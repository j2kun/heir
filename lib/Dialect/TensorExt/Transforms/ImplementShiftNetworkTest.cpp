#include <iostream>

#include "gtest/gtest.h"  // from @googletest
#include "lib/Dialect/TensorExt/Transforms/ImplementShiftNetwork.h"
#include "lib/Dialect/TensorExt/Transforms/RotationGroupKernel.h"
#include "lib/Kernel/AbstractValue.h"
#include "lib/Kernel/TestingUtils.h"

namespace mlir {
namespace heir {
namespace tensor_ext {
namespace {

using kernel::LiteralValue;

std::vector<std::vector<int>> manuallyApplyMapping(
    const Mapping& mapping, const std::vector<std::vector<int>>& input,
    int64_t ctSize) {
  std::vector<std::vector<int>> output(input.size(),
                                       std::vector<int>(ctSize, 0));
  for (const auto& entry : mapping) {
    output[entry.target.ct][entry.target.slot] =
        input[entry.source.ct][entry.source.slot];
  }
  return output;
}

void simulateShiftNetwork(const Mapping& mapping, const ShiftScheme& scheme,
                          int64_t numCiphertexts, int64_t ciphertextSize) {
  // print the rotation groups
  std::cout << "Rotation groups:\n";
  for (const auto& row : scheme.rotationGroups) {
    for (const auto& slot : row) {
      std::cout << "(" << slot.ct << "," << slot.slot << ") ";
    }
    std::cout << "\n";
  }

  SmallVector<LiteralValue> inputLeaves;
  std::vector<std::vector<int>> input;
  input.reserve(numCiphertexts);
  inputLeaves.reserve(numCiphertexts);
  // row-major values as input
  for (int64_t i = 0; i < numCiphertexts; i++) {
    std::vector<int> oneInput(ciphertextSize);
    for (int64_t j = 0; j < ciphertextSize; j++) {
      oneInput[j] = i * ciphertextSize + j;
    }
    input.push_back(oneInput);
    inputLeaves.push_back(LiteralValue(oneInput));
  }

  // print the input
  std::cout << "Input:\n";
  for (const auto& row : input) {
    for (const auto& val : row) {
      std::cout << val << " ";
    }
    std::cout << "\n";
  }

  auto expected = manuallyApplyMapping(mapping, input, ciphertextSize);
  auto dag =
      implementShiftNetwork(inputLeaves, mapping, scheme, ciphertextSize);
  std::vector<LiteralValue> actual = multiEvalKernel(dag);

  std::vector<std::vector<int>> combinedActual;
  combinedActual.reserve(numCiphertexts);
  for (const LiteralValue& val : actual) {
    combinedActual.push_back(std::get<std::vector<int>>(val.getTensor()));
  }

  EXPECT_EQ(combinedActual, expected);
}

TEST(ImplementShiftNetworkTest, TestTrivial) {
  int64_t numCts = 1;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 0), CtSlot(0, 0));
  VosVosErkinShiftNetworks shiftNetworks;
  EXPECT_EQ(shiftNetworks.findShiftScheme(mapping).rotationGroups.size(), 1);
}

TEST(ImplementShiftNetworkTest, TestFig3) {
  int64_t numCts = 1;
  int64_t ctSize = 16;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 0), CtSlot(0, 13));
  mapping.add(CtSlot(0, 1), CtSlot(0, 8));
  mapping.add(CtSlot(0, 2), CtSlot(0, 4));
  mapping.add(CtSlot(0, 3), CtSlot(0, 0));
  mapping.add(CtSlot(0, 4), CtSlot(0, 11));
  mapping.add(CtSlot(0, 5), CtSlot(0, 7));
  mapping.add(CtSlot(0, 6), CtSlot(0, 14));
  mapping.add(CtSlot(0, 7), CtSlot(0, 5));
  mapping.add(CtSlot(0, 8), CtSlot(0, 15));
  mapping.add(CtSlot(0, 9), CtSlot(0, 3));
  mapping.add(CtSlot(0, 10), CtSlot(0, 12));
  mapping.add(CtSlot(0, 11), CtSlot(0, 6));
  mapping.add(CtSlot(0, 12), CtSlot(0, 10));
  mapping.add(CtSlot(0, 13), CtSlot(0, 2));
  mapping.add(CtSlot(0, 14), CtSlot(0, 9));
  mapping.add(CtSlot(0, 15), CtSlot(0, 1));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  EXPECT_EQ(scheme.rotationGroups.size(), 3);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestFullReplication) {
  int64_t numCts = 1;
  int64_t ctSize = 16;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 0), CtSlot(0, 0));
  mapping.add(CtSlot(0, 0), CtSlot(0, 1));
  mapping.add(CtSlot(0, 0), CtSlot(0, 2));
  mapping.add(CtSlot(0, 0), CtSlot(0, 3));
  mapping.add(CtSlot(0, 0), CtSlot(0, 4));
  mapping.add(CtSlot(0, 0), CtSlot(0, 5));
  mapping.add(CtSlot(0, 0), CtSlot(0, 6));
  mapping.add(CtSlot(0, 0), CtSlot(0, 7));
  mapping.add(CtSlot(0, 0), CtSlot(0, 8));
  mapping.add(CtSlot(0, 0), CtSlot(0, 9));
  mapping.add(CtSlot(0, 0), CtSlot(0, 10));
  mapping.add(CtSlot(0, 0), CtSlot(0, 11));
  mapping.add(CtSlot(0, 0), CtSlot(0, 12));
  mapping.add(CtSlot(0, 0), CtSlot(0, 13));
  mapping.add(CtSlot(0, 0), CtSlot(0, 14));
  mapping.add(CtSlot(0, 0), CtSlot(0, 15));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  EXPECT_EQ(scheme.rotationGroups.size(), 1);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestTwoReplication) {
  int64_t numCts = 1;
  int64_t ctSize = 16;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 14), CtSlot(0, 0));
  mapping.add(CtSlot(0, 14), CtSlot(0, 1));
  mapping.add(CtSlot(0, 14), CtSlot(0, 2));
  mapping.add(CtSlot(0, 14), CtSlot(0, 3));
  mapping.add(CtSlot(0, 14), CtSlot(0, 4));
  mapping.add(CtSlot(0, 14), CtSlot(0, 5));
  mapping.add(CtSlot(0, 14), CtSlot(0, 6));
  mapping.add(CtSlot(0, 14), CtSlot(0, 7));
  mapping.add(CtSlot(0, 15), CtSlot(0, 8));
  mapping.add(CtSlot(0, 15), CtSlot(0, 9));
  mapping.add(CtSlot(0, 15), CtSlot(0, 10));
  mapping.add(CtSlot(0, 15), CtSlot(0, 11));
  mapping.add(CtSlot(0, 15), CtSlot(0, 12));
  mapping.add(CtSlot(0, 15), CtSlot(0, 13));
  mapping.add(CtSlot(0, 15), CtSlot(0, 14));
  mapping.add(CtSlot(0, 15), CtSlot(0, 15));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  EXPECT_EQ(scheme.rotationGroups.size(), 2);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestTwoReplicationAlternateShiftOrder) {
  int64_t numCts = 1;
  int64_t ctSize = 16;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 14), CtSlot(0, 0));
  mapping.add(CtSlot(0, 14), CtSlot(0, 1));
  mapping.add(CtSlot(0, 14), CtSlot(0, 2));
  mapping.add(CtSlot(0, 14), CtSlot(0, 3));
  mapping.add(CtSlot(0, 14), CtSlot(0, 4));
  mapping.add(CtSlot(0, 14), CtSlot(0, 5));
  mapping.add(CtSlot(0, 14), CtSlot(0, 6));
  mapping.add(CtSlot(0, 14), CtSlot(0, 7));
  mapping.add(CtSlot(0, 15), CtSlot(0, 8));
  mapping.add(CtSlot(0, 15), CtSlot(0, 9));
  mapping.add(CtSlot(0, 15), CtSlot(0, 10));
  mapping.add(CtSlot(0, 15), CtSlot(0, 11));
  mapping.add(CtSlot(0, 15), CtSlot(0, 12));
  mapping.add(CtSlot(0, 15), CtSlot(0, 13));
  mapping.add(CtSlot(0, 15), CtSlot(0, 14));
  mapping.add(CtSlot(0, 15), CtSlot(0, 15));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping, {8, 4, 2, 1});
  EXPECT_EQ(scheme.rotationGroups.size(), 1);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestSwapTwoCiphertexts) {
  int64_t numCts = 2;
  int64_t ctSize = 4;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 0), CtSlot(1, 0));
  mapping.add(CtSlot(0, 1), CtSlot(1, 1));
  mapping.add(CtSlot(0, 2), CtSlot(1, 2));
  mapping.add(CtSlot(0, 3), CtSlot(1, 3));
  mapping.add(CtSlot(1, 0), CtSlot(0, 0));
  mapping.add(CtSlot(1, 1), CtSlot(0, 1));
  mapping.add(CtSlot(1, 2), CtSlot(0, 2));
  mapping.add(CtSlot(1, 3), CtSlot(0, 3));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  EXPECT_EQ(scheme.rotationGroups.size(), 1);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestReorderThreeCiphertexts) {
  int64_t numCts = 3;
  int64_t ctSize = 4;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 0), CtSlot(2, 0));
  mapping.add(CtSlot(0, 1), CtSlot(2, 1));
  mapping.add(CtSlot(0, 2), CtSlot(2, 2));
  mapping.add(CtSlot(0, 3), CtSlot(2, 3));
  mapping.add(CtSlot(1, 0), CtSlot(0, 0));
  mapping.add(CtSlot(1, 1), CtSlot(0, 1));
  mapping.add(CtSlot(1, 2), CtSlot(0, 2));
  mapping.add(CtSlot(1, 3), CtSlot(0, 3));
  mapping.add(CtSlot(2, 0), CtSlot(1, 0));
  mapping.add(CtSlot(2, 1), CtSlot(1, 1));
  mapping.add(CtSlot(2, 2), CtSlot(1, 2));
  mapping.add(CtSlot(2, 3), CtSlot(1, 3));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  EXPECT_EQ(scheme.rotationGroups.size(), 1);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestSingleRotSplit) {
  int64_t numCts = 3;
  int64_t ctSize = 4;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 0), CtSlot(0, 1));
  mapping.add(CtSlot(0, 1), CtSlot(0, 2));
  mapping.add(CtSlot(0, 2), CtSlot(0, 3));
  mapping.add(CtSlot(0, 3), CtSlot(1, 0));
  mapping.add(CtSlot(1, 0), CtSlot(1, 1));
  mapping.add(CtSlot(1, 1), CtSlot(1, 2));
  mapping.add(CtSlot(1, 2), CtSlot(1, 3));
  mapping.add(CtSlot(1, 3), CtSlot(2, 0));
  mapping.add(CtSlot(2, 0), CtSlot(2, 1));
  mapping.add(CtSlot(2, 1), CtSlot(2, 2));
  mapping.add(CtSlot(2, 2), CtSlot(2, 3));
  mapping.add(CtSlot(2, 3), CtSlot(0, 0));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  EXPECT_EQ(scheme.rotationGroups.size(), 1);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_0) {
  int64_t numCts = 2;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 0), CtSlot(0, 0));
  mapping.add(CtSlot(0, 0), CtSlot(0, 1));
  mapping.add(CtSlot(0, 0), CtSlot(0, 2));
  mapping.add(CtSlot(0, 0), CtSlot(0, 3));
  mapping.add(CtSlot(0, 0), CtSlot(0, 4));
  mapping.add(CtSlot(0, 0), CtSlot(0, 5));
  mapping.add(CtSlot(0, 0), CtSlot(0, 6));
  mapping.add(CtSlot(0, 0), CtSlot(0, 7));
  mapping.add(CtSlot(0, 0), CtSlot(1, 0));
  mapping.add(CtSlot(0, 0), CtSlot(1, 1));
  mapping.add(CtSlot(1, 2), CtSlot(1, 2));
  mapping.add(CtSlot(0, 0), CtSlot(1, 3));
  mapping.add(CtSlot(0, 0), CtSlot(1, 4));
  mapping.add(CtSlot(0, 0), CtSlot(1, 5));
  mapping.add(CtSlot(0, 7), CtSlot(1, 6));
  mapping.add(CtSlot(0, 0), CtSlot(1, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_1) {
  int64_t numCts = 25;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 0), CtSlot(0, 0));
  mapping.add(CtSlot(12, 0), CtSlot(0, 1));
  mapping.add(CtSlot(23, 0), CtSlot(0, 2));
  mapping.add(CtSlot(22, 0), CtSlot(0, 3));
  mapping.add(CtSlot(0, 0), CtSlot(0, 4));
  mapping.add(CtSlot(8, 5), CtSlot(0, 5));
  mapping.add(CtSlot(0, 3), CtSlot(0, 6));
  mapping.add(CtSlot(0, 0), CtSlot(0, 7));
  mapping.add(CtSlot(18, 3), CtSlot(1, 0));
  mapping.add(CtSlot(20, 0), CtSlot(1, 1));
  mapping.add(CtSlot(15, 2), CtSlot(1, 2));
  mapping.add(CtSlot(23, 0), CtSlot(1, 3));
  mapping.add(CtSlot(13, 0), CtSlot(1, 4));
  mapping.add(CtSlot(20, 0), CtSlot(1, 5));
  mapping.add(CtSlot(23, 7), CtSlot(1, 6));
  mapping.add(CtSlot(0, 0), CtSlot(1, 7));
  mapping.add(CtSlot(0, 0), CtSlot(2, 0));
  mapping.add(CtSlot(16, 6), CtSlot(2, 1));
  mapping.add(CtSlot(20, 0), CtSlot(2, 2));
  mapping.add(CtSlot(0, 0), CtSlot(2, 3));
  mapping.add(CtSlot(15, 0), CtSlot(2, 4));
  mapping.add(CtSlot(0, 0), CtSlot(2, 5));
  mapping.add(CtSlot(11, 0), CtSlot(2, 6));
  mapping.add(CtSlot(0, 0), CtSlot(2, 7));
  mapping.add(CtSlot(13, 2), CtSlot(3, 0));
  mapping.add(CtSlot(0, 0), CtSlot(3, 1));
  mapping.add(CtSlot(0, 0), CtSlot(3, 2));
  mapping.add(CtSlot(0, 0), CtSlot(3, 3));
  mapping.add(CtSlot(22, 0), CtSlot(3, 4));
  mapping.add(CtSlot(0, 0), CtSlot(3, 5));
  mapping.add(CtSlot(0, 0), CtSlot(3, 6));
  mapping.add(CtSlot(0, 0), CtSlot(3, 7));
  mapping.add(CtSlot(20, 0), CtSlot(4, 0));
  mapping.add(CtSlot(19, 0), CtSlot(4, 1));
  mapping.add(CtSlot(0, 0), CtSlot(4, 2));
  mapping.add(CtSlot(0, 0), CtSlot(4, 3));
  mapping.add(CtSlot(11, 0), CtSlot(4, 4));
  mapping.add(CtSlot(0, 0), CtSlot(4, 5));
  mapping.add(CtSlot(13, 0), CtSlot(4, 6));
  mapping.add(CtSlot(0, 0), CtSlot(4, 7));
  mapping.add(CtSlot(16, 1), CtSlot(5, 0));
  mapping.add(CtSlot(23, 0), CtSlot(5, 1));
  mapping.add(CtSlot(21, 0), CtSlot(5, 2));
  mapping.add(CtSlot(12, 0), CtSlot(5, 3));
  mapping.add(CtSlot(15, 0), CtSlot(5, 4));
  mapping.add(CtSlot(0, 0), CtSlot(5, 5));
  mapping.add(CtSlot(0, 0), CtSlot(5, 6));
  mapping.add(CtSlot(0, 0), CtSlot(5, 7));
  mapping.add(CtSlot(21, 0), CtSlot(6, 0));
  mapping.add(CtSlot(0, 0), CtSlot(6, 1));
  mapping.add(CtSlot(22, 5), CtSlot(6, 2));
  mapping.add(CtSlot(15, 0), CtSlot(6, 3));
  mapping.add(CtSlot(19, 0), CtSlot(6, 4));
  mapping.add(CtSlot(24, 0), CtSlot(6, 5));
  mapping.add(CtSlot(0, 0), CtSlot(6, 6));
  mapping.add(CtSlot(0, 0), CtSlot(6, 7));
  mapping.add(CtSlot(18, 0), CtSlot(7, 0));
  mapping.add(CtSlot(15, 0), CtSlot(7, 1));
  mapping.add(CtSlot(0, 0), CtSlot(7, 2));
  mapping.add(CtSlot(0, 0), CtSlot(7, 3));
  mapping.add(CtSlot(12, 0), CtSlot(7, 4));
  mapping.add(CtSlot(0, 0), CtSlot(7, 5));
  mapping.add(CtSlot(13, 6), CtSlot(7, 6));
  mapping.add(CtSlot(13, 0), CtSlot(7, 7));
  mapping.add(CtSlot(13, 6), CtSlot(8, 0));
  mapping.add(CtSlot(0, 0), CtSlot(8, 1));
  mapping.add(CtSlot(0, 0), CtSlot(8, 2));
  mapping.add(CtSlot(0, 0), CtSlot(8, 3));
  mapping.add(CtSlot(18, 0), CtSlot(8, 4));
  mapping.add(CtSlot(0, 0), CtSlot(8, 5));
  mapping.add(CtSlot(23, 0), CtSlot(8, 6));
  mapping.add(CtSlot(24, 0), CtSlot(8, 7));
  mapping.add(CtSlot(18, 0), CtSlot(9, 0));
  mapping.add(CtSlot(0, 0), CtSlot(9, 1));
  mapping.add(CtSlot(13, 0), CtSlot(9, 2));
  mapping.add(CtSlot(1, 0), CtSlot(9, 3));
  mapping.add(CtSlot(18, 0), CtSlot(9, 4));
  mapping.add(CtSlot(0, 0), CtSlot(9, 5));
  mapping.add(CtSlot(11, 0), CtSlot(9, 6));
  mapping.add(CtSlot(0, 0), CtSlot(9, 7));
  mapping.add(CtSlot(0, 0), CtSlot(10, 0));
  mapping.add(CtSlot(0, 0), CtSlot(10, 1));
  mapping.add(CtSlot(23, 0), CtSlot(10, 2));
  mapping.add(CtSlot(0, 0), CtSlot(10, 3));
  mapping.add(CtSlot(0, 0), CtSlot(10, 4));
  mapping.add(CtSlot(11, 0), CtSlot(10, 5));
  mapping.add(CtSlot(12, 0), CtSlot(10, 6));
  mapping.add(CtSlot(15, 0), CtSlot(10, 7));
  mapping.add(CtSlot(15, 2), CtSlot(11, 0));
  mapping.add(CtSlot(0, 0), CtSlot(11, 1));
  mapping.add(CtSlot(0, 0), CtSlot(11, 2));
  mapping.add(CtSlot(0, 0), CtSlot(11, 3));
  mapping.add(CtSlot(0, 0), CtSlot(11, 4));
  mapping.add(CtSlot(24, 0), CtSlot(11, 5));
  mapping.add(CtSlot(0, 0), CtSlot(11, 6));
  mapping.add(CtSlot(0, 0), CtSlot(11, 7));
  mapping.add(CtSlot(0, 0), CtSlot(12, 0));
  mapping.add(CtSlot(16, 4), CtSlot(12, 1));
  mapping.add(CtSlot(18, 0), CtSlot(12, 2));
  mapping.add(CtSlot(0, 0), CtSlot(12, 3));
  mapping.add(CtSlot(0, 0), CtSlot(12, 4));
  mapping.add(CtSlot(0, 0), CtSlot(12, 5));
  mapping.add(CtSlot(0, 0), CtSlot(12, 6));
  mapping.add(CtSlot(11, 0), CtSlot(12, 7));
  mapping.add(CtSlot(0, 0), CtSlot(13, 0));
  mapping.add(CtSlot(23, 0), CtSlot(13, 1));
  mapping.add(CtSlot(0, 0), CtSlot(13, 2));
  mapping.add(CtSlot(0, 0), CtSlot(13, 3));
  mapping.add(CtSlot(13, 0), CtSlot(13, 4));
  mapping.add(CtSlot(23, 0), CtSlot(13, 5));
  mapping.add(CtSlot(19, 0), CtSlot(13, 6));
  mapping.add(CtSlot(22, 7), CtSlot(13, 7));
  mapping.add(CtSlot(13, 0), CtSlot(14, 0));
  mapping.add(CtSlot(20, 0), CtSlot(14, 1));
  mapping.add(CtSlot(0, 0), CtSlot(14, 2));
  mapping.add(CtSlot(19, 0), CtSlot(14, 3));
  mapping.add(CtSlot(12, 0), CtSlot(14, 4));
  mapping.add(CtSlot(0, 0), CtSlot(14, 5));
  mapping.add(CtSlot(0, 0), CtSlot(14, 6));
  mapping.add(CtSlot(0, 0), CtSlot(14, 7));
  mapping.add(CtSlot(0, 0), CtSlot(15, 0));
  mapping.add(CtSlot(19, 0), CtSlot(15, 1));
  mapping.add(CtSlot(18, 0), CtSlot(15, 2));
  mapping.add(CtSlot(21, 0), CtSlot(15, 3));
  mapping.add(CtSlot(18, 0), CtSlot(15, 4));
  mapping.add(CtSlot(12, 0), CtSlot(15, 5));
  mapping.add(CtSlot(22, 0), CtSlot(15, 6));
  mapping.add(CtSlot(16, 1), CtSlot(15, 7));
  mapping.add(CtSlot(16, 0), CtSlot(16, 0));
  mapping.add(CtSlot(0, 0), CtSlot(16, 1));
  mapping.add(CtSlot(0, 0), CtSlot(16, 2));
  mapping.add(CtSlot(10, 0), CtSlot(16, 3));
  mapping.add(CtSlot(0, 0), CtSlot(16, 4));
  mapping.add(CtSlot(0, 0), CtSlot(16, 5));
  mapping.add(CtSlot(18, 0), CtSlot(16, 6));
  mapping.add(CtSlot(12, 0), CtSlot(16, 7));
  mapping.add(CtSlot(0, 0), CtSlot(17, 0));
  mapping.add(CtSlot(19, 0), CtSlot(17, 1));
  mapping.add(CtSlot(18, 0), CtSlot(17, 2));
  mapping.add(CtSlot(0, 0), CtSlot(17, 3));
  mapping.add(CtSlot(0, 0), CtSlot(17, 4));
  mapping.add(CtSlot(11, 0), CtSlot(17, 5));
  mapping.add(CtSlot(20, 0), CtSlot(17, 6));
  mapping.add(CtSlot(0, 0), CtSlot(17, 7));
  mapping.add(CtSlot(0, 0), CtSlot(18, 0));
  mapping.add(CtSlot(23, 0), CtSlot(18, 1));
  mapping.add(CtSlot(20, 0), CtSlot(18, 2));
  mapping.add(CtSlot(15, 0), CtSlot(18, 3));
  mapping.add(CtSlot(18, 0), CtSlot(18, 4));
  mapping.add(CtSlot(15, 0), CtSlot(18, 5));
  mapping.add(CtSlot(24, 0), CtSlot(18, 6));
  mapping.add(CtSlot(0, 0), CtSlot(18, 7));
  mapping.add(CtSlot(0, 0), CtSlot(19, 0));
  mapping.add(CtSlot(16, 2), CtSlot(19, 1));
  mapping.add(CtSlot(0, 0), CtSlot(19, 2));
  mapping.add(CtSlot(22, 0), CtSlot(19, 3));
  mapping.add(CtSlot(0, 0), CtSlot(19, 4));
  mapping.add(CtSlot(19, 0), CtSlot(19, 5));
  mapping.add(CtSlot(0, 0), CtSlot(19, 6));
  mapping.add(CtSlot(0, 0), CtSlot(19, 7));
  mapping.add(CtSlot(0, 0), CtSlot(20, 0));
  mapping.add(CtSlot(15, 6), CtSlot(20, 1));
  mapping.add(CtSlot(22, 0), CtSlot(20, 2));
  mapping.add(CtSlot(14, 0), CtSlot(20, 3));
  mapping.add(CtSlot(16, 3), CtSlot(20, 4));
  mapping.add(CtSlot(0, 3), CtSlot(20, 5));
  mapping.add(CtSlot(19, 7), CtSlot(20, 6));
  mapping.add(CtSlot(5, 0), CtSlot(20, 7));
  mapping.add(CtSlot(18, 0), CtSlot(21, 0));
  mapping.add(CtSlot(4, 5), CtSlot(21, 1));
  mapping.add(CtSlot(20, 2), CtSlot(21, 2));
  mapping.add(CtSlot(11, 5), CtSlot(21, 3));
  mapping.add(CtSlot(24, 1), CtSlot(21, 4));
  mapping.add(CtSlot(5, 1), CtSlot(21, 5));
  mapping.add(CtSlot(14, 6), CtSlot(21, 6));
  mapping.add(CtSlot(7, 0), CtSlot(21, 7));
  mapping.add(CtSlot(21, 5), CtSlot(22, 0));
  mapping.add(CtSlot(0, 3), CtSlot(22, 1));
  mapping.add(CtSlot(4, 1), CtSlot(22, 2));
  mapping.add(CtSlot(24, 1), CtSlot(22, 3));
  mapping.add(CtSlot(17, 3), CtSlot(22, 4));
  mapping.add(CtSlot(9, 2), CtSlot(22, 5));
  mapping.add(CtSlot(20, 5), CtSlot(22, 6));
  mapping.add(CtSlot(20, 2), CtSlot(22, 7));
  mapping.add(CtSlot(0, 5), CtSlot(23, 0));
  mapping.add(CtSlot(4, 7), CtSlot(23, 1));
  mapping.add(CtSlot(16, 5), CtSlot(23, 2));
  mapping.add(CtSlot(8, 6), CtSlot(23, 3));
  mapping.add(CtSlot(21, 6), CtSlot(23, 4));
  mapping.add(CtSlot(12, 7), CtSlot(23, 5));
  mapping.add(CtSlot(17, 4), CtSlot(23, 6));
  mapping.add(CtSlot(16, 7), CtSlot(23, 7));
  mapping.add(CtSlot(3, 3), CtSlot(24, 0));
  mapping.add(CtSlot(2, 6), CtSlot(24, 1));
  mapping.add(CtSlot(19, 6), CtSlot(24, 2));
  mapping.add(CtSlot(24, 6), CtSlot(24, 3));
  mapping.add(CtSlot(13, 3), CtSlot(24, 4));
  mapping.add(CtSlot(20, 0), CtSlot(24, 5));
  mapping.add(CtSlot(3, 7), CtSlot(24, 6));
  mapping.add(CtSlot(12, 3), CtSlot(24, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_2) {
  int64_t numCts = 1;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 0), CtSlot(0, 0));
  mapping.add(CtSlot(0, 0), CtSlot(0, 1));
  mapping.add(CtSlot(0, 0), CtSlot(0, 2));
  mapping.add(CtSlot(0, 0), CtSlot(0, 3));
  mapping.add(CtSlot(0, 0), CtSlot(0, 4));
  mapping.add(CtSlot(0, 0), CtSlot(0, 5));
  mapping.add(CtSlot(0, 0), CtSlot(0, 6));
  mapping.add(CtSlot(0, 0), CtSlot(0, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_3) {
  int64_t numCts = 12;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 0), CtSlot(0, 0));
  mapping.add(CtSlot(0, 0), CtSlot(0, 1));
  mapping.add(CtSlot(0, 0), CtSlot(0, 2));
  mapping.add(CtSlot(0, 0), CtSlot(0, 3));
  mapping.add(CtSlot(0, 0), CtSlot(0, 4));
  mapping.add(CtSlot(0, 0), CtSlot(0, 5));
  mapping.add(CtSlot(0, 0), CtSlot(0, 6));
  mapping.add(CtSlot(0, 0), CtSlot(0, 7));
  mapping.add(CtSlot(0, 0), CtSlot(1, 0));
  mapping.add(CtSlot(0, 0), CtSlot(1, 1));
  mapping.add(CtSlot(0, 0), CtSlot(1, 2));
  mapping.add(CtSlot(0, 0), CtSlot(1, 3));
  mapping.add(CtSlot(0, 0), CtSlot(1, 4));
  mapping.add(CtSlot(0, 0), CtSlot(1, 5));
  mapping.add(CtSlot(0, 0), CtSlot(1, 6));
  mapping.add(CtSlot(0, 0), CtSlot(1, 7));
  mapping.add(CtSlot(0, 0), CtSlot(2, 0));
  mapping.add(CtSlot(0, 0), CtSlot(2, 1));
  mapping.add(CtSlot(0, 0), CtSlot(2, 2));
  mapping.add(CtSlot(0, 0), CtSlot(2, 3));
  mapping.add(CtSlot(0, 0), CtSlot(2, 4));
  mapping.add(CtSlot(0, 0), CtSlot(2, 5));
  mapping.add(CtSlot(0, 0), CtSlot(2, 6));
  mapping.add(CtSlot(0, 0), CtSlot(2, 7));
  mapping.add(CtSlot(0, 0), CtSlot(3, 0));
  mapping.add(CtSlot(0, 0), CtSlot(3, 1));
  mapping.add(CtSlot(0, 0), CtSlot(3, 2));
  mapping.add(CtSlot(0, 0), CtSlot(3, 3));
  mapping.add(CtSlot(0, 0), CtSlot(3, 4));
  mapping.add(CtSlot(0, 0), CtSlot(3, 5));
  mapping.add(CtSlot(0, 0), CtSlot(3, 6));
  mapping.add(CtSlot(0, 0), CtSlot(3, 7));
  mapping.add(CtSlot(0, 0), CtSlot(4, 0));
  mapping.add(CtSlot(0, 0), CtSlot(4, 1));
  mapping.add(CtSlot(0, 0), CtSlot(4, 2));
  mapping.add(CtSlot(0, 0), CtSlot(4, 3));
  mapping.add(CtSlot(0, 0), CtSlot(4, 4));
  mapping.add(CtSlot(0, 0), CtSlot(4, 5));
  mapping.add(CtSlot(0, 0), CtSlot(4, 6));
  mapping.add(CtSlot(0, 0), CtSlot(4, 7));
  mapping.add(CtSlot(0, 0), CtSlot(5, 0));
  mapping.add(CtSlot(0, 0), CtSlot(5, 1));
  mapping.add(CtSlot(0, 0), CtSlot(5, 2));
  mapping.add(CtSlot(0, 0), CtSlot(5, 3));
  mapping.add(CtSlot(0, 0), CtSlot(5, 4));
  mapping.add(CtSlot(0, 0), CtSlot(5, 5));
  mapping.add(CtSlot(0, 0), CtSlot(5, 6));
  mapping.add(CtSlot(0, 0), CtSlot(5, 7));
  mapping.add(CtSlot(0, 0), CtSlot(6, 0));
  mapping.add(CtSlot(0, 0), CtSlot(6, 1));
  mapping.add(CtSlot(0, 0), CtSlot(6, 2));
  mapping.add(CtSlot(0, 0), CtSlot(6, 3));
  mapping.add(CtSlot(0, 0), CtSlot(6, 4));
  mapping.add(CtSlot(0, 0), CtSlot(6, 5));
  mapping.add(CtSlot(0, 0), CtSlot(6, 6));
  mapping.add(CtSlot(0, 0), CtSlot(6, 7));
  mapping.add(CtSlot(0, 0), CtSlot(7, 0));
  mapping.add(CtSlot(0, 0), CtSlot(7, 1));
  mapping.add(CtSlot(0, 0), CtSlot(7, 2));
  mapping.add(CtSlot(0, 0), CtSlot(7, 3));
  mapping.add(CtSlot(0, 0), CtSlot(7, 4));
  mapping.add(CtSlot(0, 0), CtSlot(7, 5));
  mapping.add(CtSlot(0, 0), CtSlot(7, 6));
  mapping.add(CtSlot(0, 0), CtSlot(7, 7));
  mapping.add(CtSlot(0, 0), CtSlot(8, 0));
  mapping.add(CtSlot(0, 0), CtSlot(8, 1));
  mapping.add(CtSlot(0, 0), CtSlot(8, 2));
  mapping.add(CtSlot(0, 0), CtSlot(8, 3));
  mapping.add(CtSlot(0, 0), CtSlot(8, 4));
  mapping.add(CtSlot(0, 0), CtSlot(8, 5));
  mapping.add(CtSlot(0, 0), CtSlot(8, 6));
  mapping.add(CtSlot(0, 0), CtSlot(8, 7));
  mapping.add(CtSlot(0, 0), CtSlot(9, 0));
  mapping.add(CtSlot(0, 0), CtSlot(9, 1));
  mapping.add(CtSlot(0, 0), CtSlot(9, 2));
  mapping.add(CtSlot(0, 0), CtSlot(9, 3));
  mapping.add(CtSlot(0, 0), CtSlot(9, 4));
  mapping.add(CtSlot(0, 0), CtSlot(9, 5));
  mapping.add(CtSlot(0, 0), CtSlot(9, 6));
  mapping.add(CtSlot(0, 0), CtSlot(9, 7));
  mapping.add(CtSlot(0, 0), CtSlot(10, 0));
  mapping.add(CtSlot(0, 0), CtSlot(10, 1));
  mapping.add(CtSlot(0, 0), CtSlot(10, 2));
  mapping.add(CtSlot(0, 0), CtSlot(10, 3));
  mapping.add(CtSlot(0, 0), CtSlot(10, 4));
  mapping.add(CtSlot(0, 0), CtSlot(10, 5));
  mapping.add(CtSlot(0, 0), CtSlot(10, 6));
  mapping.add(CtSlot(0, 0), CtSlot(10, 7));
  mapping.add(CtSlot(0, 0), CtSlot(11, 0));
  mapping.add(CtSlot(0, 0), CtSlot(11, 1));
  mapping.add(CtSlot(0, 0), CtSlot(11, 2));
  mapping.add(CtSlot(0, 0), CtSlot(11, 3));
  mapping.add(CtSlot(0, 0), CtSlot(11, 4));
  mapping.add(CtSlot(0, 0), CtSlot(11, 5));
  mapping.add(CtSlot(0, 0), CtSlot(11, 6));
  mapping.add(CtSlot(0, 0), CtSlot(11, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_4) {
  int64_t numCts = 12;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(10, 5), CtSlot(0, 0));
  mapping.add(CtSlot(0, 6), CtSlot(0, 1));
  mapping.add(CtSlot(2, 6), CtSlot(0, 2));
  mapping.add(CtSlot(11, 2), CtSlot(0, 3));
  mapping.add(CtSlot(8, 4), CtSlot(0, 4));
  mapping.add(CtSlot(4, 6), CtSlot(0, 5));
  mapping.add(CtSlot(5, 1), CtSlot(0, 6));
  mapping.add(CtSlot(4, 4), CtSlot(0, 7));
  mapping.add(CtSlot(1, 7), CtSlot(1, 0));
  mapping.add(CtSlot(3, 0), CtSlot(1, 1));
  mapping.add(CtSlot(3, 5), CtSlot(1, 2));
  mapping.add(CtSlot(3, 6), CtSlot(1, 3));
  mapping.add(CtSlot(4, 0), CtSlot(1, 4));
  mapping.add(CtSlot(8, 3), CtSlot(1, 5));
  mapping.add(CtSlot(6, 5), CtSlot(1, 6));
  mapping.add(CtSlot(11, 2), CtSlot(1, 7));
  mapping.add(CtSlot(2, 1), CtSlot(2, 0));
  mapping.add(CtSlot(8, 5), CtSlot(2, 1));
  mapping.add(CtSlot(6, 6), CtSlot(2, 2));
  mapping.add(CtSlot(11, 5), CtSlot(2, 3));
  mapping.add(CtSlot(10, 4), CtSlot(2, 4));
  mapping.add(CtSlot(6, 0), CtSlot(2, 5));
  mapping.add(CtSlot(1, 0), CtSlot(2, 6));
  mapping.add(CtSlot(7, 6), CtSlot(2, 7));
  mapping.add(CtSlot(4, 7), CtSlot(3, 0));
  mapping.add(CtSlot(2, 5), CtSlot(3, 1));
  mapping.add(CtSlot(5, 3), CtSlot(3, 2));
  mapping.add(CtSlot(0, 6), CtSlot(3, 3));
  mapping.add(CtSlot(10, 6), CtSlot(3, 4));
  mapping.add(CtSlot(8, 5), CtSlot(3, 5));
  mapping.add(CtSlot(11, 2), CtSlot(3, 6));
  mapping.add(CtSlot(8, 7), CtSlot(3, 7));
  mapping.add(CtSlot(4, 7), CtSlot(4, 0));
  mapping.add(CtSlot(1, 5), CtSlot(4, 1));
  mapping.add(CtSlot(10, 0), CtSlot(4, 2));
  mapping.add(CtSlot(10, 7), CtSlot(4, 3));
  mapping.add(CtSlot(5, 2), CtSlot(4, 4));
  mapping.add(CtSlot(4, 4), CtSlot(4, 5));
  mapping.add(CtSlot(6, 4), CtSlot(4, 6));
  mapping.add(CtSlot(11, 1), CtSlot(4, 7));
  mapping.add(CtSlot(6, 6), CtSlot(5, 0));
  mapping.add(CtSlot(3, 5), CtSlot(5, 1));
  mapping.add(CtSlot(1, 2), CtSlot(5, 2));
  mapping.add(CtSlot(6, 0), CtSlot(5, 3));
  mapping.add(CtSlot(5, 0), CtSlot(5, 4));
  mapping.add(CtSlot(6, 1), CtSlot(5, 5));
  mapping.add(CtSlot(5, 7), CtSlot(5, 6));
  mapping.add(CtSlot(9, 7), CtSlot(5, 7));
  mapping.add(CtSlot(7, 1), CtSlot(6, 0));
  mapping.add(CtSlot(9, 0), CtSlot(6, 1));
  mapping.add(CtSlot(10, 7), CtSlot(6, 2));
  mapping.add(CtSlot(10, 7), CtSlot(6, 3));
  mapping.add(CtSlot(2, 7), CtSlot(6, 4));
  mapping.add(CtSlot(1, 5), CtSlot(6, 5));
  mapping.add(CtSlot(0, 7), CtSlot(6, 6));
  mapping.add(CtSlot(11, 0), CtSlot(6, 7));
  mapping.add(CtSlot(6, 0), CtSlot(7, 0));
  mapping.add(CtSlot(1, 5), CtSlot(7, 1));
  mapping.add(CtSlot(9, 1), CtSlot(7, 2));
  mapping.add(CtSlot(10, 6), CtSlot(7, 3));
  mapping.add(CtSlot(5, 2), CtSlot(7, 4));
  mapping.add(CtSlot(10, 7), CtSlot(7, 5));
  mapping.add(CtSlot(9, 6), CtSlot(7, 6));
  mapping.add(CtSlot(11, 3), CtSlot(7, 7));
  mapping.add(CtSlot(10, 0), CtSlot(8, 0));
  mapping.add(CtSlot(9, 1), CtSlot(8, 1));
  mapping.add(CtSlot(9, 1), CtSlot(8, 2));
  mapping.add(CtSlot(6, 3), CtSlot(8, 3));
  mapping.add(CtSlot(1, 6), CtSlot(8, 4));
  mapping.add(CtSlot(9, 5), CtSlot(8, 5));
  mapping.add(CtSlot(4, 4), CtSlot(8, 6));
  mapping.add(CtSlot(10, 7), CtSlot(8, 7));
  mapping.add(CtSlot(1, 5), CtSlot(9, 0));
  mapping.add(CtSlot(11, 5), CtSlot(9, 1));
  mapping.add(CtSlot(3, 5), CtSlot(9, 2));
  mapping.add(CtSlot(6, 0), CtSlot(9, 3));
  mapping.add(CtSlot(1, 3), CtSlot(9, 4));
  mapping.add(CtSlot(5, 2), CtSlot(9, 5));
  mapping.add(CtSlot(3, 0), CtSlot(9, 6));
  mapping.add(CtSlot(11, 5), CtSlot(9, 7));
  mapping.add(CtSlot(2, 7), CtSlot(10, 0));
  mapping.add(CtSlot(10, 3), CtSlot(10, 1));
  mapping.add(CtSlot(9, 7), CtSlot(10, 2));
  mapping.add(CtSlot(2, 0), CtSlot(10, 3));
  mapping.add(CtSlot(8, 6), CtSlot(10, 4));
  mapping.add(CtSlot(2, 1), CtSlot(10, 5));
  mapping.add(CtSlot(1, 7), CtSlot(10, 6));
  mapping.add(CtSlot(10, 3), CtSlot(10, 7));
  mapping.add(CtSlot(2, 5), CtSlot(11, 0));
  mapping.add(CtSlot(4, 4), CtSlot(11, 1));
  mapping.add(CtSlot(1, 7), CtSlot(11, 2));
  mapping.add(CtSlot(4, 6), CtSlot(11, 3));
  mapping.add(CtSlot(5, 6), CtSlot(11, 4));
  mapping.add(CtSlot(9, 1), CtSlot(11, 5));
  mapping.add(CtSlot(10, 3), CtSlot(11, 6));
  mapping.add(CtSlot(3, 3), CtSlot(11, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_5) {
  int64_t numCts = 11;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 0), CtSlot(0, 0));
  mapping.add(CtSlot(0, 0), CtSlot(0, 1));
  mapping.add(CtSlot(0, 0), CtSlot(0, 2));
  mapping.add(CtSlot(0, 0), CtSlot(0, 3));
  mapping.add(CtSlot(0, 0), CtSlot(0, 4));
  mapping.add(CtSlot(0, 0), CtSlot(0, 5));
  mapping.add(CtSlot(0, 0), CtSlot(0, 6));
  mapping.add(CtSlot(0, 0), CtSlot(0, 7));
  mapping.add(CtSlot(0, 0), CtSlot(1, 0));
  mapping.add(CtSlot(0, 0), CtSlot(1, 1));
  mapping.add(CtSlot(0, 0), CtSlot(1, 2));
  mapping.add(CtSlot(0, 0), CtSlot(1, 3));
  mapping.add(CtSlot(0, 0), CtSlot(1, 4));
  mapping.add(CtSlot(0, 0), CtSlot(1, 5));
  mapping.add(CtSlot(0, 0), CtSlot(1, 6));
  mapping.add(CtSlot(0, 0), CtSlot(1, 7));
  mapping.add(CtSlot(0, 0), CtSlot(2, 0));
  mapping.add(CtSlot(0, 0), CtSlot(2, 1));
  mapping.add(CtSlot(0, 0), CtSlot(2, 2));
  mapping.add(CtSlot(0, 0), CtSlot(2, 3));
  mapping.add(CtSlot(0, 0), CtSlot(2, 4));
  mapping.add(CtSlot(0, 0), CtSlot(2, 5));
  mapping.add(CtSlot(0, 0), CtSlot(2, 6));
  mapping.add(CtSlot(0, 0), CtSlot(2, 7));
  mapping.add(CtSlot(0, 0), CtSlot(3, 0));
  mapping.add(CtSlot(0, 0), CtSlot(3, 1));
  mapping.add(CtSlot(0, 0), CtSlot(3, 2));
  mapping.add(CtSlot(0, 0), CtSlot(3, 3));
  mapping.add(CtSlot(0, 0), CtSlot(3, 4));
  mapping.add(CtSlot(0, 0), CtSlot(3, 5));
  mapping.add(CtSlot(0, 0), CtSlot(3, 6));
  mapping.add(CtSlot(0, 0), CtSlot(3, 7));
  mapping.add(CtSlot(0, 0), CtSlot(4, 0));
  mapping.add(CtSlot(0, 0), CtSlot(4, 1));
  mapping.add(CtSlot(0, 0), CtSlot(4, 2));
  mapping.add(CtSlot(0, 0), CtSlot(4, 3));
  mapping.add(CtSlot(0, 0), CtSlot(4, 4));
  mapping.add(CtSlot(0, 0), CtSlot(4, 5));
  mapping.add(CtSlot(0, 0), CtSlot(4, 6));
  mapping.add(CtSlot(0, 0), CtSlot(4, 7));
  mapping.add(CtSlot(0, 0), CtSlot(5, 0));
  mapping.add(CtSlot(0, 0), CtSlot(5, 1));
  mapping.add(CtSlot(0, 0), CtSlot(5, 2));
  mapping.add(CtSlot(0, 0), CtSlot(5, 3));
  mapping.add(CtSlot(0, 0), CtSlot(5, 4));
  mapping.add(CtSlot(0, 0), CtSlot(5, 5));
  mapping.add(CtSlot(0, 0), CtSlot(5, 6));
  mapping.add(CtSlot(0, 0), CtSlot(5, 7));
  mapping.add(CtSlot(0, 0), CtSlot(6, 0));
  mapping.add(CtSlot(0, 0), CtSlot(6, 1));
  mapping.add(CtSlot(0, 0), CtSlot(6, 2));
  mapping.add(CtSlot(0, 0), CtSlot(6, 3));
  mapping.add(CtSlot(0, 0), CtSlot(6, 4));
  mapping.add(CtSlot(0, 0), CtSlot(6, 5));
  mapping.add(CtSlot(0, 0), CtSlot(6, 6));
  mapping.add(CtSlot(0, 0), CtSlot(6, 7));
  mapping.add(CtSlot(0, 0), CtSlot(7, 0));
  mapping.add(CtSlot(0, 0), CtSlot(7, 1));
  mapping.add(CtSlot(0, 0), CtSlot(7, 2));
  mapping.add(CtSlot(0, 0), CtSlot(7, 3));
  mapping.add(CtSlot(0, 0), CtSlot(7, 4));
  mapping.add(CtSlot(0, 0), CtSlot(7, 5));
  mapping.add(CtSlot(0, 0), CtSlot(7, 6));
  mapping.add(CtSlot(0, 0), CtSlot(7, 7));
  mapping.add(CtSlot(0, 0), CtSlot(8, 0));
  mapping.add(CtSlot(0, 0), CtSlot(8, 1));
  mapping.add(CtSlot(0, 0), CtSlot(8, 2));
  mapping.add(CtSlot(0, 0), CtSlot(8, 3));
  mapping.add(CtSlot(0, 0), CtSlot(8, 4));
  mapping.add(CtSlot(0, 0), CtSlot(8, 5));
  mapping.add(CtSlot(0, 0), CtSlot(8, 6));
  mapping.add(CtSlot(0, 0), CtSlot(8, 7));
  mapping.add(CtSlot(0, 0), CtSlot(9, 0));
  mapping.add(CtSlot(0, 0), CtSlot(9, 1));
  mapping.add(CtSlot(0, 0), CtSlot(9, 2));
  mapping.add(CtSlot(0, 0), CtSlot(9, 3));
  mapping.add(CtSlot(0, 0), CtSlot(9, 4));
  mapping.add(CtSlot(0, 0), CtSlot(9, 5));
  mapping.add(CtSlot(0, 0), CtSlot(9, 6));
  mapping.add(CtSlot(0, 0), CtSlot(9, 7));
  mapping.add(CtSlot(0, 0), CtSlot(10, 0));
  mapping.add(CtSlot(0, 0), CtSlot(10, 1));
  mapping.add(CtSlot(0, 0), CtSlot(10, 2));
  mapping.add(CtSlot(0, 0), CtSlot(10, 3));
  mapping.add(CtSlot(0, 0), CtSlot(10, 4));
  mapping.add(CtSlot(0, 0), CtSlot(10, 5));
  mapping.add(CtSlot(0, 0), CtSlot(10, 6));
  mapping.add(CtSlot(0, 0), CtSlot(10, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_6) {
  int64_t numCts = 11;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(1, 6), CtSlot(0, 0));
  mapping.add(CtSlot(3, 3), CtSlot(0, 1));
  mapping.add(CtSlot(2, 1), CtSlot(0, 2));
  mapping.add(CtSlot(2, 3), CtSlot(0, 3));
  mapping.add(CtSlot(8, 0), CtSlot(0, 4));
  mapping.add(CtSlot(2, 1), CtSlot(0, 5));
  mapping.add(CtSlot(10, 7), CtSlot(0, 6));
  mapping.add(CtSlot(4, 2), CtSlot(0, 7));
  mapping.add(CtSlot(3, 5), CtSlot(1, 0));
  mapping.add(CtSlot(0, 1), CtSlot(1, 1));
  mapping.add(CtSlot(6, 5), CtSlot(1, 2));
  mapping.add(CtSlot(1, 4), CtSlot(1, 3));
  mapping.add(CtSlot(4, 0), CtSlot(1, 4));
  mapping.add(CtSlot(7, 3), CtSlot(1, 5));
  mapping.add(CtSlot(1, 1), CtSlot(1, 6));
  mapping.add(CtSlot(0, 0), CtSlot(1, 7));
  mapping.add(CtSlot(0, 2), CtSlot(2, 0));
  mapping.add(CtSlot(9, 0), CtSlot(2, 1));
  mapping.add(CtSlot(1, 7), CtSlot(2, 2));
  mapping.add(CtSlot(4, 0), CtSlot(2, 3));
  mapping.add(CtSlot(9, 2), CtSlot(2, 4));
  mapping.add(CtSlot(4, 6), CtSlot(2, 5));
  mapping.add(CtSlot(6, 2), CtSlot(2, 6));
  mapping.add(CtSlot(4, 7), CtSlot(2, 7));
  mapping.add(CtSlot(8, 6), CtSlot(3, 0));
  mapping.add(CtSlot(10, 3), CtSlot(3, 1));
  mapping.add(CtSlot(8, 0), CtSlot(3, 2));
  mapping.add(CtSlot(0, 2), CtSlot(3, 3));
  mapping.add(CtSlot(6, 2), CtSlot(3, 4));
  mapping.add(CtSlot(8, 4), CtSlot(3, 5));
  mapping.add(CtSlot(2, 1), CtSlot(3, 6));
  mapping.add(CtSlot(4, 7), CtSlot(3, 7));
  mapping.add(CtSlot(3, 2), CtSlot(4, 0));
  mapping.add(CtSlot(4, 1), CtSlot(4, 1));
  mapping.add(CtSlot(4, 6), CtSlot(4, 2));
  mapping.add(CtSlot(8, 5), CtSlot(4, 3));
  mapping.add(CtSlot(7, 1), CtSlot(4, 4));
  mapping.add(CtSlot(10, 5), CtSlot(4, 5));
  mapping.add(CtSlot(1, 5), CtSlot(4, 6));
  mapping.add(CtSlot(7, 0), CtSlot(4, 7));
  mapping.add(CtSlot(8, 3), CtSlot(5, 0));
  mapping.add(CtSlot(0, 6), CtSlot(5, 1));
  mapping.add(CtSlot(2, 4), CtSlot(5, 2));
  mapping.add(CtSlot(4, 4), CtSlot(5, 3));
  mapping.add(CtSlot(2, 3), CtSlot(5, 4));
  mapping.add(CtSlot(7, 7), CtSlot(5, 5));
  mapping.add(CtSlot(10, 1), CtSlot(5, 6));
  mapping.add(CtSlot(2, 4), CtSlot(5, 7));
  mapping.add(CtSlot(9, 3), CtSlot(6, 0));
  mapping.add(CtSlot(10, 5), CtSlot(6, 1));
  mapping.add(CtSlot(9, 7), CtSlot(6, 2));
  mapping.add(CtSlot(9, 2), CtSlot(6, 3));
  mapping.add(CtSlot(4, 1), CtSlot(6, 4));
  mapping.add(CtSlot(5, 0), CtSlot(6, 5));
  mapping.add(CtSlot(7, 1), CtSlot(6, 6));
  mapping.add(CtSlot(7, 4), CtSlot(6, 7));
  mapping.add(CtSlot(3, 5), CtSlot(7, 0));
  mapping.add(CtSlot(1, 5), CtSlot(7, 1));
  mapping.add(CtSlot(4, 3), CtSlot(7, 2));
  mapping.add(CtSlot(6, 4), CtSlot(7, 3));
  mapping.add(CtSlot(2, 0), CtSlot(7, 4));
  mapping.add(CtSlot(7, 7), CtSlot(7, 5));
  mapping.add(CtSlot(3, 3), CtSlot(7, 6));
  mapping.add(CtSlot(7, 1), CtSlot(7, 7));
  mapping.add(CtSlot(4, 6), CtSlot(8, 0));
  mapping.add(CtSlot(0, 3), CtSlot(8, 1));
  mapping.add(CtSlot(7, 0), CtSlot(8, 2));
  mapping.add(CtSlot(5, 1), CtSlot(8, 3));
  mapping.add(CtSlot(7, 5), CtSlot(8, 4));
  mapping.add(CtSlot(0, 3), CtSlot(8, 5));
  mapping.add(CtSlot(6, 4), CtSlot(8, 6));
  mapping.add(CtSlot(4, 4), CtSlot(8, 7));
  mapping.add(CtSlot(6, 2), CtSlot(9, 0));
  mapping.add(CtSlot(5, 4), CtSlot(9, 1));
  mapping.add(CtSlot(6, 0), CtSlot(9, 2));
  mapping.add(CtSlot(3, 2), CtSlot(9, 3));
  mapping.add(CtSlot(8, 3), CtSlot(9, 4));
  mapping.add(CtSlot(10, 0), CtSlot(9, 5));
  mapping.add(CtSlot(0, 1), CtSlot(9, 6));
  mapping.add(CtSlot(2, 2), CtSlot(9, 7));
  mapping.add(CtSlot(2, 4), CtSlot(10, 0));
  mapping.add(CtSlot(9, 2), CtSlot(10, 1));
  mapping.add(CtSlot(7, 1), CtSlot(10, 2));
  mapping.add(CtSlot(9, 4), CtSlot(10, 3));
  mapping.add(CtSlot(7, 5), CtSlot(10, 4));
  mapping.add(CtSlot(4, 6), CtSlot(10, 5));
  mapping.add(CtSlot(6, 0), CtSlot(10, 6));
  mapping.add(CtSlot(3, 2), CtSlot(10, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_7) {
  int64_t numCts = 19;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 0), CtSlot(0, 0));
  mapping.add(CtSlot(0, 0), CtSlot(0, 1));
  mapping.add(CtSlot(0, 0), CtSlot(0, 2));
  mapping.add(CtSlot(0, 0), CtSlot(0, 3));
  mapping.add(CtSlot(0, 0), CtSlot(0, 4));
  mapping.add(CtSlot(0, 0), CtSlot(0, 5));
  mapping.add(CtSlot(0, 0), CtSlot(0, 6));
  mapping.add(CtSlot(0, 0), CtSlot(0, 7));
  mapping.add(CtSlot(0, 0), CtSlot(1, 0));
  mapping.add(CtSlot(0, 0), CtSlot(1, 1));
  mapping.add(CtSlot(0, 0), CtSlot(1, 2));
  mapping.add(CtSlot(0, 0), CtSlot(1, 3));
  mapping.add(CtSlot(0, 0), CtSlot(1, 4));
  mapping.add(CtSlot(0, 0), CtSlot(1, 5));
  mapping.add(CtSlot(0, 0), CtSlot(1, 6));
  mapping.add(CtSlot(0, 0), CtSlot(1, 7));
  mapping.add(CtSlot(0, 0), CtSlot(2, 0));
  mapping.add(CtSlot(0, 0), CtSlot(2, 1));
  mapping.add(CtSlot(0, 0), CtSlot(2, 2));
  mapping.add(CtSlot(0, 0), CtSlot(2, 3));
  mapping.add(CtSlot(0, 0), CtSlot(2, 4));
  mapping.add(CtSlot(0, 0), CtSlot(2, 5));
  mapping.add(CtSlot(0, 0), CtSlot(2, 6));
  mapping.add(CtSlot(0, 0), CtSlot(2, 7));
  mapping.add(CtSlot(0, 0), CtSlot(3, 0));
  mapping.add(CtSlot(0, 0), CtSlot(3, 1));
  mapping.add(CtSlot(0, 0), CtSlot(3, 2));
  mapping.add(CtSlot(0, 0), CtSlot(3, 3));
  mapping.add(CtSlot(0, 0), CtSlot(3, 4));
  mapping.add(CtSlot(0, 0), CtSlot(3, 5));
  mapping.add(CtSlot(0, 0), CtSlot(3, 6));
  mapping.add(CtSlot(0, 0), CtSlot(3, 7));
  mapping.add(CtSlot(0, 0), CtSlot(4, 0));
  mapping.add(CtSlot(0, 0), CtSlot(4, 1));
  mapping.add(CtSlot(0, 0), CtSlot(4, 2));
  mapping.add(CtSlot(0, 0), CtSlot(4, 3));
  mapping.add(CtSlot(0, 0), CtSlot(4, 4));
  mapping.add(CtSlot(0, 0), CtSlot(4, 5));
  mapping.add(CtSlot(0, 0), CtSlot(4, 6));
  mapping.add(CtSlot(0, 0), CtSlot(4, 7));
  mapping.add(CtSlot(0, 0), CtSlot(5, 0));
  mapping.add(CtSlot(0, 0), CtSlot(5, 1));
  mapping.add(CtSlot(0, 0), CtSlot(5, 2));
  mapping.add(CtSlot(0, 0), CtSlot(5, 3));
  mapping.add(CtSlot(0, 0), CtSlot(5, 4));
  mapping.add(CtSlot(0, 0), CtSlot(5, 5));
  mapping.add(CtSlot(0, 0), CtSlot(5, 6));
  mapping.add(CtSlot(0, 0), CtSlot(5, 7));
  mapping.add(CtSlot(0, 0), CtSlot(6, 0));
  mapping.add(CtSlot(0, 0), CtSlot(6, 1));
  mapping.add(CtSlot(0, 0), CtSlot(6, 2));
  mapping.add(CtSlot(0, 0), CtSlot(6, 3));
  mapping.add(CtSlot(0, 0), CtSlot(6, 4));
  mapping.add(CtSlot(0, 0), CtSlot(6, 5));
  mapping.add(CtSlot(0, 0), CtSlot(6, 6));
  mapping.add(CtSlot(0, 0), CtSlot(6, 7));
  mapping.add(CtSlot(0, 0), CtSlot(7, 0));
  mapping.add(CtSlot(0, 0), CtSlot(7, 1));
  mapping.add(CtSlot(0, 0), CtSlot(7, 2));
  mapping.add(CtSlot(0, 0), CtSlot(7, 3));
  mapping.add(CtSlot(0, 0), CtSlot(7, 4));
  mapping.add(CtSlot(0, 0), CtSlot(7, 5));
  mapping.add(CtSlot(0, 0), CtSlot(7, 6));
  mapping.add(CtSlot(0, 0), CtSlot(7, 7));
  mapping.add(CtSlot(0, 0), CtSlot(8, 0));
  mapping.add(CtSlot(0, 0), CtSlot(8, 1));
  mapping.add(CtSlot(0, 0), CtSlot(8, 2));
  mapping.add(CtSlot(0, 0), CtSlot(8, 3));
  mapping.add(CtSlot(0, 0), CtSlot(8, 4));
  mapping.add(CtSlot(0, 0), CtSlot(8, 5));
  mapping.add(CtSlot(0, 0), CtSlot(8, 6));
  mapping.add(CtSlot(0, 0), CtSlot(8, 7));
  mapping.add(CtSlot(0, 0), CtSlot(9, 0));
  mapping.add(CtSlot(0, 0), CtSlot(9, 1));
  mapping.add(CtSlot(0, 0), CtSlot(9, 2));
  mapping.add(CtSlot(0, 0), CtSlot(9, 3));
  mapping.add(CtSlot(0, 0), CtSlot(9, 4));
  mapping.add(CtSlot(0, 0), CtSlot(9, 5));
  mapping.add(CtSlot(0, 0), CtSlot(9, 6));
  mapping.add(CtSlot(0, 0), CtSlot(9, 7));
  mapping.add(CtSlot(0, 0), CtSlot(10, 0));
  mapping.add(CtSlot(0, 0), CtSlot(10, 1));
  mapping.add(CtSlot(0, 0), CtSlot(10, 2));
  mapping.add(CtSlot(0, 0), CtSlot(10, 3));
  mapping.add(CtSlot(0, 0), CtSlot(10, 4));
  mapping.add(CtSlot(0, 0), CtSlot(10, 5));
  mapping.add(CtSlot(0, 0), CtSlot(10, 6));
  mapping.add(CtSlot(0, 0), CtSlot(10, 7));
  mapping.add(CtSlot(0, 0), CtSlot(11, 0));
  mapping.add(CtSlot(0, 0), CtSlot(11, 1));
  mapping.add(CtSlot(0, 0), CtSlot(11, 2));
  mapping.add(CtSlot(0, 0), CtSlot(11, 3));
  mapping.add(CtSlot(0, 0), CtSlot(11, 4));
  mapping.add(CtSlot(0, 0), CtSlot(11, 5));
  mapping.add(CtSlot(0, 0), CtSlot(11, 6));
  mapping.add(CtSlot(0, 0), CtSlot(11, 7));
  mapping.add(CtSlot(0, 0), CtSlot(12, 0));
  mapping.add(CtSlot(0, 0), CtSlot(12, 1));
  mapping.add(CtSlot(0, 0), CtSlot(12, 2));
  mapping.add(CtSlot(0, 0), CtSlot(12, 3));
  mapping.add(CtSlot(0, 0), CtSlot(12, 4));
  mapping.add(CtSlot(0, 0), CtSlot(12, 5));
  mapping.add(CtSlot(0, 0), CtSlot(12, 6));
  mapping.add(CtSlot(0, 0), CtSlot(12, 7));
  mapping.add(CtSlot(0, 0), CtSlot(13, 0));
  mapping.add(CtSlot(0, 0), CtSlot(13, 1));
  mapping.add(CtSlot(0, 0), CtSlot(13, 2));
  mapping.add(CtSlot(0, 0), CtSlot(13, 3));
  mapping.add(CtSlot(0, 0), CtSlot(13, 4));
  mapping.add(CtSlot(0, 0), CtSlot(13, 5));
  mapping.add(CtSlot(0, 0), CtSlot(13, 6));
  mapping.add(CtSlot(0, 0), CtSlot(13, 7));
  mapping.add(CtSlot(0, 0), CtSlot(14, 0));
  mapping.add(CtSlot(0, 0), CtSlot(14, 1));
  mapping.add(CtSlot(0, 0), CtSlot(14, 2));
  mapping.add(CtSlot(0, 0), CtSlot(14, 3));
  mapping.add(CtSlot(0, 0), CtSlot(14, 4));
  mapping.add(CtSlot(0, 0), CtSlot(14, 5));
  mapping.add(CtSlot(0, 0), CtSlot(14, 6));
  mapping.add(CtSlot(0, 0), CtSlot(14, 7));
  mapping.add(CtSlot(0, 0), CtSlot(15, 0));
  mapping.add(CtSlot(0, 0), CtSlot(15, 1));
  mapping.add(CtSlot(0, 0), CtSlot(15, 2));
  mapping.add(CtSlot(0, 0), CtSlot(15, 3));
  mapping.add(CtSlot(0, 0), CtSlot(15, 4));
  mapping.add(CtSlot(0, 0), CtSlot(15, 5));
  mapping.add(CtSlot(0, 0), CtSlot(15, 6));
  mapping.add(CtSlot(0, 0), CtSlot(15, 7));
  mapping.add(CtSlot(0, 0), CtSlot(16, 0));
  mapping.add(CtSlot(0, 0), CtSlot(16, 1));
  mapping.add(CtSlot(0, 0), CtSlot(16, 2));
  mapping.add(CtSlot(0, 0), CtSlot(16, 3));
  mapping.add(CtSlot(0, 0), CtSlot(16, 4));
  mapping.add(CtSlot(0, 0), CtSlot(16, 5));
  mapping.add(CtSlot(0, 0), CtSlot(16, 6));
  mapping.add(CtSlot(0, 0), CtSlot(16, 7));
  mapping.add(CtSlot(0, 0), CtSlot(17, 0));
  mapping.add(CtSlot(0, 0), CtSlot(17, 1));
  mapping.add(CtSlot(0, 0), CtSlot(17, 2));
  mapping.add(CtSlot(0, 0), CtSlot(17, 3));
  mapping.add(CtSlot(0, 0), CtSlot(17, 4));
  mapping.add(CtSlot(0, 0), CtSlot(17, 5));
  mapping.add(CtSlot(0, 0), CtSlot(17, 6));
  mapping.add(CtSlot(0, 0), CtSlot(17, 7));
  mapping.add(CtSlot(0, 0), CtSlot(18, 0));
  mapping.add(CtSlot(0, 0), CtSlot(18, 1));
  mapping.add(CtSlot(0, 0), CtSlot(18, 2));
  mapping.add(CtSlot(0, 0), CtSlot(18, 3));
  mapping.add(CtSlot(0, 0), CtSlot(18, 4));
  mapping.add(CtSlot(0, 0), CtSlot(18, 5));
  mapping.add(CtSlot(0, 0), CtSlot(18, 6));
  mapping.add(CtSlot(0, 0), CtSlot(18, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_8) {
  int64_t numCts = 19;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(12, 3), CtSlot(0, 0));
  mapping.add(CtSlot(13, 4), CtSlot(0, 1));
  mapping.add(CtSlot(14, 1), CtSlot(0, 2));
  mapping.add(CtSlot(12, 2), CtSlot(0, 3));
  mapping.add(CtSlot(6, 1), CtSlot(0, 4));
  mapping.add(CtSlot(8, 2), CtSlot(0, 5));
  mapping.add(CtSlot(17, 2), CtSlot(0, 6));
  mapping.add(CtSlot(15, 3), CtSlot(0, 7));
  mapping.add(CtSlot(3, 0), CtSlot(1, 0));
  mapping.add(CtSlot(8, 1), CtSlot(1, 1));
  mapping.add(CtSlot(10, 1), CtSlot(1, 2));
  mapping.add(CtSlot(11, 4), CtSlot(1, 3));
  mapping.add(CtSlot(6, 1), CtSlot(1, 4));
  mapping.add(CtSlot(12, 7), CtSlot(1, 5));
  mapping.add(CtSlot(3, 5), CtSlot(1, 6));
  mapping.add(CtSlot(12, 3), CtSlot(1, 7));
  mapping.add(CtSlot(0, 3), CtSlot(2, 0));
  mapping.add(CtSlot(4, 3), CtSlot(2, 1));
  mapping.add(CtSlot(1, 6), CtSlot(2, 2));
  mapping.add(CtSlot(3, 1), CtSlot(2, 3));
  mapping.add(CtSlot(8, 0), CtSlot(2, 4));
  mapping.add(CtSlot(0, 0), CtSlot(2, 5));
  mapping.add(CtSlot(16, 0), CtSlot(2, 6));
  mapping.add(CtSlot(5, 2), CtSlot(2, 7));
  mapping.add(CtSlot(11, 1), CtSlot(3, 0));
  mapping.add(CtSlot(15, 4), CtSlot(3, 1));
  mapping.add(CtSlot(9, 0), CtSlot(3, 2));
  mapping.add(CtSlot(7, 5), CtSlot(3, 3));
  mapping.add(CtSlot(17, 7), CtSlot(3, 4));
  mapping.add(CtSlot(10, 3), CtSlot(3, 5));
  mapping.add(CtSlot(15, 7), CtSlot(3, 6));
  mapping.add(CtSlot(17, 1), CtSlot(3, 7));
  mapping.add(CtSlot(0, 6), CtSlot(4, 0));
  mapping.add(CtSlot(14, 6), CtSlot(4, 1));
  mapping.add(CtSlot(5, 2), CtSlot(4, 2));
  mapping.add(CtSlot(10, 1), CtSlot(4, 3));
  mapping.add(CtSlot(4, 4), CtSlot(4, 4));
  mapping.add(CtSlot(9, 2), CtSlot(4, 5));
  mapping.add(CtSlot(11, 6), CtSlot(4, 6));
  mapping.add(CtSlot(15, 4), CtSlot(4, 7));
  mapping.add(CtSlot(2, 2), CtSlot(5, 0));
  mapping.add(CtSlot(12, 4), CtSlot(5, 1));
  mapping.add(CtSlot(15, 0), CtSlot(5, 2));
  mapping.add(CtSlot(11, 4), CtSlot(5, 3));
  mapping.add(CtSlot(18, 7), CtSlot(5, 4));
  mapping.add(CtSlot(18, 4), CtSlot(5, 5));
  mapping.add(CtSlot(0, 7), CtSlot(5, 6));
  mapping.add(CtSlot(7, 1), CtSlot(5, 7));
  mapping.add(CtSlot(9, 6), CtSlot(6, 0));
  mapping.add(CtSlot(2, 3), CtSlot(6, 1));
  mapping.add(CtSlot(0, 0), CtSlot(6, 2));
  mapping.add(CtSlot(12, 3), CtSlot(6, 3));
  mapping.add(CtSlot(9, 3), CtSlot(6, 4));
  mapping.add(CtSlot(14, 0), CtSlot(6, 5));
  mapping.add(CtSlot(12, 7), CtSlot(6, 6));
  mapping.add(CtSlot(11, 7), CtSlot(6, 7));
  mapping.add(CtSlot(4, 0), CtSlot(7, 0));
  mapping.add(CtSlot(8, 4), CtSlot(7, 1));
  mapping.add(CtSlot(4, 5), CtSlot(7, 2));
  mapping.add(CtSlot(13, 0), CtSlot(7, 3));
  mapping.add(CtSlot(6, 2), CtSlot(7, 4));
  mapping.add(CtSlot(3, 7), CtSlot(7, 5));
  mapping.add(CtSlot(2, 6), CtSlot(7, 6));
  mapping.add(CtSlot(14, 1), CtSlot(7, 7));
  mapping.add(CtSlot(9, 6), CtSlot(8, 0));
  mapping.add(CtSlot(6, 4), CtSlot(8, 1));
  mapping.add(CtSlot(12, 1), CtSlot(8, 2));
  mapping.add(CtSlot(11, 3), CtSlot(8, 3));
  mapping.add(CtSlot(3, 1), CtSlot(8, 4));
  mapping.add(CtSlot(17, 3), CtSlot(8, 5));
  mapping.add(CtSlot(4, 2), CtSlot(8, 6));
  mapping.add(CtSlot(17, 2), CtSlot(8, 7));
  mapping.add(CtSlot(12, 7), CtSlot(9, 0));
  mapping.add(CtSlot(14, 0), CtSlot(9, 1));
  mapping.add(CtSlot(3, 0), CtSlot(9, 2));
  mapping.add(CtSlot(5, 4), CtSlot(9, 3));
  mapping.add(CtSlot(12, 5), CtSlot(9, 4));
  mapping.add(CtSlot(9, 5), CtSlot(9, 5));
  mapping.add(CtSlot(1, 3), CtSlot(9, 6));
  mapping.add(CtSlot(3, 3), CtSlot(9, 7));
  mapping.add(CtSlot(15, 3), CtSlot(10, 0));
  mapping.add(CtSlot(8, 6), CtSlot(10, 1));
  mapping.add(CtSlot(18, 0), CtSlot(10, 2));
  mapping.add(CtSlot(11, 6), CtSlot(10, 3));
  mapping.add(CtSlot(3, 3), CtSlot(10, 4));
  mapping.add(CtSlot(14, 7), CtSlot(10, 5));
  mapping.add(CtSlot(11, 7), CtSlot(10, 6));
  mapping.add(CtSlot(18, 3), CtSlot(10, 7));
  mapping.add(CtSlot(1, 6), CtSlot(11, 0));
  mapping.add(CtSlot(9, 0), CtSlot(11, 1));
  mapping.add(CtSlot(4, 1), CtSlot(11, 2));
  mapping.add(CtSlot(5, 6), CtSlot(11, 3));
  mapping.add(CtSlot(18, 7), CtSlot(11, 4));
  mapping.add(CtSlot(0, 0), CtSlot(11, 5));
  mapping.add(CtSlot(16, 1), CtSlot(11, 6));
  mapping.add(CtSlot(2, 1), CtSlot(11, 7));
  mapping.add(CtSlot(9, 0), CtSlot(12, 0));
  mapping.add(CtSlot(9, 2), CtSlot(12, 1));
  mapping.add(CtSlot(6, 4), CtSlot(12, 2));
  mapping.add(CtSlot(7, 6), CtSlot(12, 3));
  mapping.add(CtSlot(9, 2), CtSlot(12, 4));
  mapping.add(CtSlot(12, 2), CtSlot(12, 5));
  mapping.add(CtSlot(1, 7), CtSlot(12, 6));
  mapping.add(CtSlot(17, 5), CtSlot(12, 7));
  mapping.add(CtSlot(7, 6), CtSlot(13, 0));
  mapping.add(CtSlot(6, 5), CtSlot(13, 1));
  mapping.add(CtSlot(2, 5), CtSlot(13, 2));
  mapping.add(CtSlot(13, 0), CtSlot(13, 3));
  mapping.add(CtSlot(1, 4), CtSlot(13, 4));
  mapping.add(CtSlot(0, 4), CtSlot(13, 5));
  mapping.add(CtSlot(13, 6), CtSlot(13, 6));
  mapping.add(CtSlot(15, 7), CtSlot(13, 7));
  mapping.add(CtSlot(10, 3), CtSlot(14, 0));
  mapping.add(CtSlot(13, 1), CtSlot(14, 1));
  mapping.add(CtSlot(7, 2), CtSlot(14, 2));
  mapping.add(CtSlot(18, 6), CtSlot(14, 3));
  mapping.add(CtSlot(3, 1), CtSlot(14, 4));
  mapping.add(CtSlot(8, 6), CtSlot(14, 5));
  mapping.add(CtSlot(9, 3), CtSlot(14, 6));
  mapping.add(CtSlot(7, 0), CtSlot(14, 7));
  mapping.add(CtSlot(2, 1), CtSlot(15, 0));
  mapping.add(CtSlot(9, 0), CtSlot(15, 1));
  mapping.add(CtSlot(10, 1), CtSlot(15, 2));
  mapping.add(CtSlot(7, 7), CtSlot(15, 3));
  mapping.add(CtSlot(16, 7), CtSlot(15, 4));
  mapping.add(CtSlot(11, 4), CtSlot(15, 5));
  mapping.add(CtSlot(15, 1), CtSlot(15, 6));
  mapping.add(CtSlot(7, 6), CtSlot(15, 7));
  mapping.add(CtSlot(0, 7), CtSlot(16, 0));
  mapping.add(CtSlot(3, 2), CtSlot(16, 1));
  mapping.add(CtSlot(14, 3), CtSlot(16, 2));
  mapping.add(CtSlot(4, 2), CtSlot(16, 3));
  mapping.add(CtSlot(15, 3), CtSlot(16, 4));
  mapping.add(CtSlot(8, 1), CtSlot(16, 5));
  mapping.add(CtSlot(4, 6), CtSlot(16, 6));
  mapping.add(CtSlot(15, 5), CtSlot(16, 7));
  mapping.add(CtSlot(13, 0), CtSlot(17, 0));
  mapping.add(CtSlot(4, 7), CtSlot(17, 1));
  mapping.add(CtSlot(5, 3), CtSlot(17, 2));
  mapping.add(CtSlot(6, 0), CtSlot(17, 3));
  mapping.add(CtSlot(15, 0), CtSlot(17, 4));
  mapping.add(CtSlot(3, 1), CtSlot(17, 5));
  mapping.add(CtSlot(18, 4), CtSlot(17, 6));
  mapping.add(CtSlot(17, 3), CtSlot(17, 7));
  mapping.add(CtSlot(17, 5), CtSlot(18, 0));
  mapping.add(CtSlot(1, 3), CtSlot(18, 1));
  mapping.add(CtSlot(15, 1), CtSlot(18, 2));
  mapping.add(CtSlot(4, 4), CtSlot(18, 3));
  mapping.add(CtSlot(14, 0), CtSlot(18, 4));
  mapping.add(CtSlot(2, 4), CtSlot(18, 5));
  mapping.add(CtSlot(13, 0), CtSlot(18, 6));
  mapping.add(CtSlot(10, 1), CtSlot(18, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_9) {
  int64_t numCts = 17;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 0), CtSlot(0, 0));
  mapping.add(CtSlot(0, 0), CtSlot(0, 1));
  mapping.add(CtSlot(0, 0), CtSlot(0, 2));
  mapping.add(CtSlot(0, 0), CtSlot(0, 3));
  mapping.add(CtSlot(0, 0), CtSlot(0, 4));
  mapping.add(CtSlot(0, 0), CtSlot(0, 5));
  mapping.add(CtSlot(0, 0), CtSlot(0, 6));
  mapping.add(CtSlot(0, 0), CtSlot(0, 7));
  mapping.add(CtSlot(0, 0), CtSlot(1, 0));
  mapping.add(CtSlot(0, 0), CtSlot(1, 1));
  mapping.add(CtSlot(0, 0), CtSlot(1, 2));
  mapping.add(CtSlot(0, 0), CtSlot(1, 3));
  mapping.add(CtSlot(0, 0), CtSlot(1, 4));
  mapping.add(CtSlot(0, 0), CtSlot(1, 5));
  mapping.add(CtSlot(0, 0), CtSlot(1, 6));
  mapping.add(CtSlot(0, 0), CtSlot(1, 7));
  mapping.add(CtSlot(0, 0), CtSlot(2, 0));
  mapping.add(CtSlot(0, 0), CtSlot(2, 1));
  mapping.add(CtSlot(0, 0), CtSlot(2, 2));
  mapping.add(CtSlot(0, 0), CtSlot(2, 3));
  mapping.add(CtSlot(0, 0), CtSlot(2, 4));
  mapping.add(CtSlot(0, 0), CtSlot(2, 5));
  mapping.add(CtSlot(0, 0), CtSlot(2, 6));
  mapping.add(CtSlot(0, 0), CtSlot(2, 7));
  mapping.add(CtSlot(0, 0), CtSlot(3, 0));
  mapping.add(CtSlot(0, 0), CtSlot(3, 1));
  mapping.add(CtSlot(0, 0), CtSlot(3, 2));
  mapping.add(CtSlot(0, 0), CtSlot(3, 3));
  mapping.add(CtSlot(0, 0), CtSlot(3, 4));
  mapping.add(CtSlot(0, 0), CtSlot(3, 5));
  mapping.add(CtSlot(0, 0), CtSlot(3, 6));
  mapping.add(CtSlot(0, 0), CtSlot(3, 7));
  mapping.add(CtSlot(0, 0), CtSlot(4, 0));
  mapping.add(CtSlot(0, 0), CtSlot(4, 1));
  mapping.add(CtSlot(0, 0), CtSlot(4, 2));
  mapping.add(CtSlot(0, 0), CtSlot(4, 3));
  mapping.add(CtSlot(0, 0), CtSlot(4, 4));
  mapping.add(CtSlot(0, 0), CtSlot(4, 5));
  mapping.add(CtSlot(0, 0), CtSlot(4, 6));
  mapping.add(CtSlot(0, 0), CtSlot(4, 7));
  mapping.add(CtSlot(0, 0), CtSlot(5, 0));
  mapping.add(CtSlot(0, 0), CtSlot(5, 1));
  mapping.add(CtSlot(0, 0), CtSlot(5, 2));
  mapping.add(CtSlot(0, 0), CtSlot(5, 3));
  mapping.add(CtSlot(0, 0), CtSlot(5, 4));
  mapping.add(CtSlot(0, 0), CtSlot(5, 5));
  mapping.add(CtSlot(0, 0), CtSlot(5, 6));
  mapping.add(CtSlot(0, 0), CtSlot(5, 7));
  mapping.add(CtSlot(0, 0), CtSlot(6, 0));
  mapping.add(CtSlot(0, 0), CtSlot(6, 1));
  mapping.add(CtSlot(0, 0), CtSlot(6, 2));
  mapping.add(CtSlot(0, 0), CtSlot(6, 3));
  mapping.add(CtSlot(0, 0), CtSlot(6, 4));
  mapping.add(CtSlot(0, 0), CtSlot(6, 5));
  mapping.add(CtSlot(0, 0), CtSlot(6, 6));
  mapping.add(CtSlot(0, 0), CtSlot(6, 7));
  mapping.add(CtSlot(0, 0), CtSlot(7, 0));
  mapping.add(CtSlot(0, 0), CtSlot(7, 1));
  mapping.add(CtSlot(0, 0), CtSlot(7, 2));
  mapping.add(CtSlot(0, 0), CtSlot(7, 3));
  mapping.add(CtSlot(0, 0), CtSlot(7, 4));
  mapping.add(CtSlot(0, 0), CtSlot(7, 5));
  mapping.add(CtSlot(0, 0), CtSlot(7, 6));
  mapping.add(CtSlot(0, 0), CtSlot(7, 7));
  mapping.add(CtSlot(0, 0), CtSlot(8, 0));
  mapping.add(CtSlot(0, 0), CtSlot(8, 1));
  mapping.add(CtSlot(0, 0), CtSlot(8, 2));
  mapping.add(CtSlot(0, 0), CtSlot(8, 3));
  mapping.add(CtSlot(0, 0), CtSlot(8, 4));
  mapping.add(CtSlot(0, 0), CtSlot(8, 5));
  mapping.add(CtSlot(0, 0), CtSlot(8, 6));
  mapping.add(CtSlot(0, 0), CtSlot(8, 7));
  mapping.add(CtSlot(0, 0), CtSlot(9, 0));
  mapping.add(CtSlot(0, 0), CtSlot(9, 1));
  mapping.add(CtSlot(0, 0), CtSlot(9, 2));
  mapping.add(CtSlot(0, 0), CtSlot(9, 3));
  mapping.add(CtSlot(0, 0), CtSlot(9, 4));
  mapping.add(CtSlot(0, 0), CtSlot(9, 5));
  mapping.add(CtSlot(0, 0), CtSlot(9, 6));
  mapping.add(CtSlot(0, 0), CtSlot(9, 7));
  mapping.add(CtSlot(0, 0), CtSlot(10, 0));
  mapping.add(CtSlot(0, 0), CtSlot(10, 1));
  mapping.add(CtSlot(0, 0), CtSlot(10, 2));
  mapping.add(CtSlot(0, 0), CtSlot(10, 3));
  mapping.add(CtSlot(0, 0), CtSlot(10, 4));
  mapping.add(CtSlot(0, 0), CtSlot(10, 5));
  mapping.add(CtSlot(0, 0), CtSlot(10, 6));
  mapping.add(CtSlot(0, 0), CtSlot(10, 7));
  mapping.add(CtSlot(0, 0), CtSlot(11, 0));
  mapping.add(CtSlot(0, 0), CtSlot(11, 1));
  mapping.add(CtSlot(0, 0), CtSlot(11, 2));
  mapping.add(CtSlot(0, 0), CtSlot(11, 3));
  mapping.add(CtSlot(0, 0), CtSlot(11, 4));
  mapping.add(CtSlot(0, 0), CtSlot(11, 5));
  mapping.add(CtSlot(0, 0), CtSlot(11, 6));
  mapping.add(CtSlot(0, 0), CtSlot(11, 7));
  mapping.add(CtSlot(0, 0), CtSlot(12, 0));
  mapping.add(CtSlot(0, 0), CtSlot(12, 1));
  mapping.add(CtSlot(0, 0), CtSlot(12, 2));
  mapping.add(CtSlot(0, 0), CtSlot(12, 3));
  mapping.add(CtSlot(0, 0), CtSlot(12, 4));
  mapping.add(CtSlot(0, 0), CtSlot(12, 5));
  mapping.add(CtSlot(0, 0), CtSlot(12, 6));
  mapping.add(CtSlot(0, 0), CtSlot(12, 7));
  mapping.add(CtSlot(0, 0), CtSlot(13, 0));
  mapping.add(CtSlot(0, 0), CtSlot(13, 1));
  mapping.add(CtSlot(0, 0), CtSlot(13, 2));
  mapping.add(CtSlot(0, 0), CtSlot(13, 3));
  mapping.add(CtSlot(0, 0), CtSlot(13, 4));
  mapping.add(CtSlot(0, 0), CtSlot(13, 5));
  mapping.add(CtSlot(0, 0), CtSlot(13, 6));
  mapping.add(CtSlot(0, 0), CtSlot(13, 7));
  mapping.add(CtSlot(0, 0), CtSlot(14, 0));
  mapping.add(CtSlot(0, 0), CtSlot(14, 1));
  mapping.add(CtSlot(0, 0), CtSlot(14, 2));
  mapping.add(CtSlot(0, 0), CtSlot(14, 3));
  mapping.add(CtSlot(0, 0), CtSlot(14, 4));
  mapping.add(CtSlot(0, 0), CtSlot(14, 5));
  mapping.add(CtSlot(0, 0), CtSlot(14, 6));
  mapping.add(CtSlot(0, 0), CtSlot(14, 7));
  mapping.add(CtSlot(0, 0), CtSlot(15, 0));
  mapping.add(CtSlot(0, 0), CtSlot(15, 1));
  mapping.add(CtSlot(0, 0), CtSlot(15, 2));
  mapping.add(CtSlot(0, 0), CtSlot(15, 3));
  mapping.add(CtSlot(0, 0), CtSlot(15, 4));
  mapping.add(CtSlot(0, 0), CtSlot(15, 5));
  mapping.add(CtSlot(0, 0), CtSlot(15, 6));
  mapping.add(CtSlot(0, 0), CtSlot(15, 7));
  mapping.add(CtSlot(0, 0), CtSlot(16, 0));
  mapping.add(CtSlot(0, 0), CtSlot(16, 1));
  mapping.add(CtSlot(0, 0), CtSlot(16, 2));
  mapping.add(CtSlot(0, 0), CtSlot(16, 3));
  mapping.add(CtSlot(0, 0), CtSlot(16, 4));
  mapping.add(CtSlot(0, 0), CtSlot(16, 5));
  mapping.add(CtSlot(0, 0), CtSlot(16, 6));
  mapping.add(CtSlot(0, 0), CtSlot(16, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_10) {
  int64_t numCts = 17;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(2, 0), CtSlot(0, 0));
  mapping.add(CtSlot(6, 7), CtSlot(0, 1));
  mapping.add(CtSlot(13, 6), CtSlot(0, 2));
  mapping.add(CtSlot(5, 7), CtSlot(0, 3));
  mapping.add(CtSlot(10, 1), CtSlot(0, 4));
  mapping.add(CtSlot(1, 5), CtSlot(0, 5));
  mapping.add(CtSlot(16, 2), CtSlot(0, 6));
  mapping.add(CtSlot(1, 4), CtSlot(0, 7));
  mapping.add(CtSlot(2, 0), CtSlot(1, 0));
  mapping.add(CtSlot(0, 0), CtSlot(1, 1));
  mapping.add(CtSlot(3, 2), CtSlot(1, 2));
  mapping.add(CtSlot(12, 4), CtSlot(1, 3));
  mapping.add(CtSlot(2, 2), CtSlot(1, 4));
  mapping.add(CtSlot(14, 5), CtSlot(1, 5));
  mapping.add(CtSlot(0, 2), CtSlot(1, 6));
  mapping.add(CtSlot(1, 1), CtSlot(1, 7));
  mapping.add(CtSlot(8, 1), CtSlot(2, 0));
  mapping.add(CtSlot(4, 5), CtSlot(2, 1));
  mapping.add(CtSlot(5, 2), CtSlot(2, 2));
  mapping.add(CtSlot(11, 6), CtSlot(2, 3));
  mapping.add(CtSlot(0, 2), CtSlot(2, 4));
  mapping.add(CtSlot(8, 5), CtSlot(2, 5));
  mapping.add(CtSlot(2, 7), CtSlot(2, 6));
  mapping.add(CtSlot(8, 4), CtSlot(2, 7));
  mapping.add(CtSlot(9, 4), CtSlot(3, 0));
  mapping.add(CtSlot(13, 1), CtSlot(3, 1));
  mapping.add(CtSlot(2, 4), CtSlot(3, 2));
  mapping.add(CtSlot(10, 5), CtSlot(3, 3));
  mapping.add(CtSlot(9, 3), CtSlot(3, 4));
  mapping.add(CtSlot(1, 6), CtSlot(3, 5));
  mapping.add(CtSlot(13, 3), CtSlot(3, 6));
  mapping.add(CtSlot(7, 2), CtSlot(3, 7));
  mapping.add(CtSlot(2, 0), CtSlot(4, 0));
  mapping.add(CtSlot(15, 1), CtSlot(4, 1));
  mapping.add(CtSlot(0, 3), CtSlot(4, 2));
  mapping.add(CtSlot(1, 7), CtSlot(4, 3));
  mapping.add(CtSlot(15, 7), CtSlot(4, 4));
  mapping.add(CtSlot(16, 2), CtSlot(4, 5));
  mapping.add(CtSlot(16, 3), CtSlot(4, 6));
  mapping.add(CtSlot(0, 2), CtSlot(4, 7));
  mapping.add(CtSlot(1, 1), CtSlot(5, 0));
  mapping.add(CtSlot(3, 3), CtSlot(5, 1));
  mapping.add(CtSlot(6, 7), CtSlot(5, 2));
  mapping.add(CtSlot(2, 2), CtSlot(5, 3));
  mapping.add(CtSlot(14, 6), CtSlot(5, 4));
  mapping.add(CtSlot(15, 0), CtSlot(5, 5));
  mapping.add(CtSlot(11, 4), CtSlot(5, 6));
  mapping.add(CtSlot(10, 2), CtSlot(5, 7));
  mapping.add(CtSlot(11, 2), CtSlot(6, 0));
  mapping.add(CtSlot(11, 6), CtSlot(6, 1));
  mapping.add(CtSlot(9, 2), CtSlot(6, 2));
  mapping.add(CtSlot(11, 5), CtSlot(6, 3));
  mapping.add(CtSlot(12, 6), CtSlot(6, 4));
  mapping.add(CtSlot(7, 6), CtSlot(6, 5));
  mapping.add(CtSlot(4, 5), CtSlot(6, 6));
  mapping.add(CtSlot(8, 1), CtSlot(6, 7));
  mapping.add(CtSlot(10, 1), CtSlot(7, 0));
  mapping.add(CtSlot(13, 1), CtSlot(7, 1));
  mapping.add(CtSlot(13, 5), CtSlot(7, 2));
  mapping.add(CtSlot(7, 2), CtSlot(7, 3));
  mapping.add(CtSlot(12, 0), CtSlot(7, 4));
  mapping.add(CtSlot(16, 7), CtSlot(7, 5));
  mapping.add(CtSlot(3, 3), CtSlot(7, 6));
  mapping.add(CtSlot(13, 0), CtSlot(7, 7));
  mapping.add(CtSlot(10, 6), CtSlot(8, 0));
  mapping.add(CtSlot(6, 5), CtSlot(8, 1));
  mapping.add(CtSlot(13, 4), CtSlot(8, 2));
  mapping.add(CtSlot(1, 3), CtSlot(8, 3));
  mapping.add(CtSlot(9, 2), CtSlot(8, 4));
  mapping.add(CtSlot(8, 6), CtSlot(8, 5));
  mapping.add(CtSlot(4, 5), CtSlot(8, 6));
  mapping.add(CtSlot(14, 7), CtSlot(8, 7));
  mapping.add(CtSlot(2, 0), CtSlot(9, 0));
  mapping.add(CtSlot(14, 4), CtSlot(9, 1));
  mapping.add(CtSlot(0, 0), CtSlot(9, 2));
  mapping.add(CtSlot(11, 5), CtSlot(9, 3));
  mapping.add(CtSlot(0, 4), CtSlot(9, 4));
  mapping.add(CtSlot(10, 1), CtSlot(9, 5));
  mapping.add(CtSlot(8, 0), CtSlot(9, 6));
  mapping.add(CtSlot(9, 7), CtSlot(9, 7));
  mapping.add(CtSlot(16, 7), CtSlot(10, 0));
  mapping.add(CtSlot(7, 5), CtSlot(10, 1));
  mapping.add(CtSlot(9, 6), CtSlot(10, 2));
  mapping.add(CtSlot(1, 4), CtSlot(10, 3));
  mapping.add(CtSlot(14, 6), CtSlot(10, 4));
  mapping.add(CtSlot(7, 0), CtSlot(10, 5));
  mapping.add(CtSlot(15, 2), CtSlot(10, 6));
  mapping.add(CtSlot(9, 4), CtSlot(10, 7));
  mapping.add(CtSlot(7, 7), CtSlot(11, 0));
  mapping.add(CtSlot(8, 7), CtSlot(11, 1));
  mapping.add(CtSlot(9, 5), CtSlot(11, 2));
  mapping.add(CtSlot(14, 3), CtSlot(11, 3));
  mapping.add(CtSlot(14, 6), CtSlot(11, 4));
  mapping.add(CtSlot(14, 5), CtSlot(11, 5));
  mapping.add(CtSlot(2, 4), CtSlot(11, 6));
  mapping.add(CtSlot(0, 3), CtSlot(11, 7));
  mapping.add(CtSlot(3, 3), CtSlot(12, 0));
  mapping.add(CtSlot(12, 6), CtSlot(12, 1));
  mapping.add(CtSlot(5, 1), CtSlot(12, 2));
  mapping.add(CtSlot(12, 2), CtSlot(12, 3));
  mapping.add(CtSlot(8, 4), CtSlot(12, 4));
  mapping.add(CtSlot(15, 3), CtSlot(12, 5));
  mapping.add(CtSlot(11, 2), CtSlot(12, 6));
  mapping.add(CtSlot(13, 0), CtSlot(12, 7));
  mapping.add(CtSlot(9, 6), CtSlot(13, 0));
  mapping.add(CtSlot(7, 5), CtSlot(13, 1));
  mapping.add(CtSlot(5, 5), CtSlot(13, 2));
  mapping.add(CtSlot(16, 0), CtSlot(13, 3));
  mapping.add(CtSlot(1, 1), CtSlot(13, 4));
  mapping.add(CtSlot(7, 0), CtSlot(13, 5));
  mapping.add(CtSlot(2, 4), CtSlot(13, 6));
  mapping.add(CtSlot(10, 4), CtSlot(13, 7));
  mapping.add(CtSlot(16, 3), CtSlot(14, 0));
  mapping.add(CtSlot(12, 0), CtSlot(14, 1));
  mapping.add(CtSlot(0, 6), CtSlot(14, 2));
  mapping.add(CtSlot(8, 2), CtSlot(14, 3));
  mapping.add(CtSlot(13, 4), CtSlot(14, 4));
  mapping.add(CtSlot(7, 4), CtSlot(14, 5));
  mapping.add(CtSlot(4, 1), CtSlot(14, 6));
  mapping.add(CtSlot(4, 0), CtSlot(14, 7));
  mapping.add(CtSlot(15, 5), CtSlot(15, 0));
  mapping.add(CtSlot(0, 2), CtSlot(15, 1));
  mapping.add(CtSlot(7, 5), CtSlot(15, 2));
  mapping.add(CtSlot(14, 1), CtSlot(15, 3));
  mapping.add(CtSlot(1, 7), CtSlot(15, 4));
  mapping.add(CtSlot(6, 1), CtSlot(15, 5));
  mapping.add(CtSlot(9, 2), CtSlot(15, 6));
  mapping.add(CtSlot(0, 3), CtSlot(15, 7));
  mapping.add(CtSlot(15, 3), CtSlot(16, 0));
  mapping.add(CtSlot(15, 1), CtSlot(16, 1));
  mapping.add(CtSlot(16, 7), CtSlot(16, 2));
  mapping.add(CtSlot(8, 3), CtSlot(16, 3));
  mapping.add(CtSlot(0, 2), CtSlot(16, 4));
  mapping.add(CtSlot(9, 3), CtSlot(16, 5));
  mapping.add(CtSlot(9, 2), CtSlot(16, 6));
  mapping.add(CtSlot(11, 1), CtSlot(16, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_11) {
  int64_t numCts = 30;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(20, 7), CtSlot(0, 0));
  mapping.add(CtSlot(21, 7), CtSlot(0, 1));
  mapping.add(CtSlot(0, 5), CtSlot(0, 2));
  mapping.add(CtSlot(2, 7), CtSlot(0, 3));
  mapping.add(CtSlot(0, 6), CtSlot(0, 4));
  mapping.add(CtSlot(22, 5), CtSlot(0, 5));
  mapping.add(CtSlot(5, 3), CtSlot(0, 6));
  mapping.add(CtSlot(17, 2), CtSlot(0, 7));
  mapping.add(CtSlot(11, 4), CtSlot(1, 0));
  mapping.add(CtSlot(29, 2), CtSlot(1, 1));
  mapping.add(CtSlot(29, 4), CtSlot(1, 2));
  mapping.add(CtSlot(24, 4), CtSlot(1, 3));
  mapping.add(CtSlot(25, 0), CtSlot(1, 4));
  mapping.add(CtSlot(23, 3), CtSlot(1, 5));
  mapping.add(CtSlot(27, 2), CtSlot(1, 6));
  mapping.add(CtSlot(26, 1), CtSlot(1, 7));
  mapping.add(CtSlot(1, 7), CtSlot(2, 0));
  mapping.add(CtSlot(1, 6), CtSlot(2, 1));
  mapping.add(CtSlot(7, 4), CtSlot(2, 2));
  mapping.add(CtSlot(16, 4), CtSlot(2, 3));
  mapping.add(CtSlot(15, 7), CtSlot(2, 4));
  mapping.add(CtSlot(5, 2), CtSlot(2, 5));
  mapping.add(CtSlot(9, 7), CtSlot(2, 6));
  mapping.add(CtSlot(2, 6), CtSlot(2, 7));
  mapping.add(CtSlot(18, 5), CtSlot(3, 0));
  mapping.add(CtSlot(11, 3), CtSlot(3, 1));
  mapping.add(CtSlot(4, 1), CtSlot(3, 2));
  mapping.add(CtSlot(4, 2), CtSlot(3, 3));
  mapping.add(CtSlot(5, 1), CtSlot(3, 4));
  mapping.add(CtSlot(19, 1), CtSlot(3, 5));
  mapping.add(CtSlot(10, 0), CtSlot(3, 6));
  mapping.add(CtSlot(17, 2), CtSlot(3, 7));
  mapping.add(CtSlot(19, 5), CtSlot(4, 0));
  mapping.add(CtSlot(8, 2), CtSlot(4, 1));
  mapping.add(CtSlot(16, 7), CtSlot(4, 2));
  mapping.add(CtSlot(3, 3), CtSlot(4, 3));
  mapping.add(CtSlot(3, 2), CtSlot(4, 4));
  mapping.add(CtSlot(11, 2), CtSlot(4, 5));
  mapping.add(CtSlot(0, 3), CtSlot(4, 6));
  mapping.add(CtSlot(0, 4), CtSlot(4, 7));
  mapping.add(CtSlot(26, 6), CtSlot(5, 0));
  mapping.add(CtSlot(20, 1), CtSlot(5, 1));
  mapping.add(CtSlot(26, 4), CtSlot(5, 2));
  mapping.add(CtSlot(6, 2), CtSlot(5, 3));
  mapping.add(CtSlot(22, 4), CtSlot(5, 4));
  mapping.add(CtSlot(21, 3), CtSlot(5, 5));
  mapping.add(CtSlot(8, 7), CtSlot(5, 6));
  mapping.add(CtSlot(13, 1), CtSlot(5, 7));
  mapping.add(CtSlot(4, 3), CtSlot(6, 0));
  mapping.add(CtSlot(28, 2), CtSlot(6, 1));
  mapping.add(CtSlot(3, 1), CtSlot(6, 2));
  mapping.add(CtSlot(7, 6), CtSlot(6, 3));
  mapping.add(CtSlot(29, 6), CtSlot(6, 4));
  mapping.add(CtSlot(24, 6), CtSlot(6, 5));
  mapping.add(CtSlot(1, 6), CtSlot(6, 6));
  mapping.add(CtSlot(12, 4), CtSlot(6, 7));
  mapping.add(CtSlot(14, 2), CtSlot(7, 0));
  mapping.add(CtSlot(11, 5), CtSlot(7, 1));
  mapping.add(CtSlot(3, 3), CtSlot(7, 2));
  mapping.add(CtSlot(18, 2), CtSlot(7, 3));
  mapping.add(CtSlot(18, 6), CtSlot(7, 4));
  mapping.add(CtSlot(11, 5), CtSlot(7, 5));
  mapping.add(CtSlot(15, 2), CtSlot(7, 6));
  mapping.add(CtSlot(21, 5), CtSlot(7, 7));
  mapping.add(CtSlot(21, 5), CtSlot(8, 0));
  mapping.add(CtSlot(4, 6), CtSlot(8, 1));
  mapping.add(CtSlot(20, 2), CtSlot(8, 2));
  mapping.add(CtSlot(8, 6), CtSlot(8, 3));
  mapping.add(CtSlot(1, 7), CtSlot(8, 4));
  mapping.add(CtSlot(22, 7), CtSlot(8, 5));
  mapping.add(CtSlot(21, 3), CtSlot(8, 6));
  mapping.add(CtSlot(12, 1), CtSlot(8, 7));
  mapping.add(CtSlot(16, 2), CtSlot(9, 0));
  mapping.add(CtSlot(22, 1), CtSlot(9, 1));
  mapping.add(CtSlot(15, 3), CtSlot(9, 2));
  mapping.add(CtSlot(5, 5), CtSlot(9, 3));
  mapping.add(CtSlot(23, 0), CtSlot(9, 4));
  mapping.add(CtSlot(20, 0), CtSlot(9, 5));
  mapping.add(CtSlot(21, 3), CtSlot(9, 6));
  mapping.add(CtSlot(22, 2), CtSlot(9, 7));
  mapping.add(CtSlot(0, 3), CtSlot(10, 0));
  mapping.add(CtSlot(7, 0), CtSlot(10, 1));
  mapping.add(CtSlot(10, 1), CtSlot(10, 2));
  mapping.add(CtSlot(14, 3), CtSlot(10, 3));
  mapping.add(CtSlot(28, 2), CtSlot(10, 4));
  mapping.add(CtSlot(17, 2), CtSlot(10, 5));
  mapping.add(CtSlot(21, 4), CtSlot(10, 6));
  mapping.add(CtSlot(23, 6), CtSlot(10, 7));
  mapping.add(CtSlot(20, 1), CtSlot(11, 0));
  mapping.add(CtSlot(10, 3), CtSlot(11, 1));
  mapping.add(CtSlot(10, 5), CtSlot(11, 2));
  mapping.add(CtSlot(10, 4), CtSlot(11, 3));
  mapping.add(CtSlot(14, 4), CtSlot(11, 4));
  mapping.add(CtSlot(22, 6), CtSlot(11, 5));
  mapping.add(CtSlot(26, 1), CtSlot(11, 6));
  mapping.add(CtSlot(7, 4), CtSlot(11, 7));
  mapping.add(CtSlot(20, 6), CtSlot(12, 0));
  mapping.add(CtSlot(19, 5), CtSlot(12, 1));
  mapping.add(CtSlot(27, 3), CtSlot(12, 2));
  mapping.add(CtSlot(1, 6), CtSlot(12, 3));
  mapping.add(CtSlot(6, 6), CtSlot(12, 4));
  mapping.add(CtSlot(23, 3), CtSlot(12, 5));
  mapping.add(CtSlot(17, 5), CtSlot(12, 6));
  mapping.add(CtSlot(23, 7), CtSlot(12, 7));
  mapping.add(CtSlot(14, 4), CtSlot(13, 0));
  mapping.add(CtSlot(18, 6), CtSlot(13, 1));
  mapping.add(CtSlot(27, 3), CtSlot(13, 2));
  mapping.add(CtSlot(16, 4), CtSlot(13, 3));
  mapping.add(CtSlot(8, 1), CtSlot(13, 4));
  mapping.add(CtSlot(3, 0), CtSlot(13, 5));
  mapping.add(CtSlot(15, 1), CtSlot(13, 6));
  mapping.add(CtSlot(29, 0), CtSlot(13, 7));
  mapping.add(CtSlot(19, 1), CtSlot(14, 0));
  mapping.add(CtSlot(28, 5), CtSlot(14, 1));
  mapping.add(CtSlot(25, 4), CtSlot(14, 2));
  mapping.add(CtSlot(4, 7), CtSlot(14, 3));
  mapping.add(CtSlot(20, 0), CtSlot(14, 4));
  mapping.add(CtSlot(7, 3), CtSlot(14, 5));
  mapping.add(CtSlot(26, 0), CtSlot(14, 6));
  mapping.add(CtSlot(0, 6), CtSlot(14, 7));
  mapping.add(CtSlot(28, 4), CtSlot(15, 0));
  mapping.add(CtSlot(19, 6), CtSlot(15, 1));
  mapping.add(CtSlot(26, 7), CtSlot(15, 2));
  mapping.add(CtSlot(6, 2), CtSlot(15, 3));
  mapping.add(CtSlot(25, 5), CtSlot(15, 4));
  mapping.add(CtSlot(21, 1), CtSlot(15, 5));
  mapping.add(CtSlot(21, 4), CtSlot(15, 6));
  mapping.add(CtSlot(20, 1), CtSlot(15, 7));
  mapping.add(CtSlot(28, 5), CtSlot(16, 0));
  mapping.add(CtSlot(29, 3), CtSlot(16, 1));
  mapping.add(CtSlot(21, 3), CtSlot(16, 2));
  mapping.add(CtSlot(16, 2), CtSlot(16, 3));
  mapping.add(CtSlot(15, 4), CtSlot(16, 4));
  mapping.add(CtSlot(26, 4), CtSlot(16, 5));
  mapping.add(CtSlot(1, 7), CtSlot(16, 6));
  mapping.add(CtSlot(10, 4), CtSlot(16, 7));
  mapping.add(CtSlot(20, 7), CtSlot(17, 0));
  mapping.add(CtSlot(11, 2), CtSlot(17, 1));
  mapping.add(CtSlot(7, 3), CtSlot(17, 2));
  mapping.add(CtSlot(0, 3), CtSlot(17, 3));
  mapping.add(CtSlot(15, 4), CtSlot(17, 4));
  mapping.add(CtSlot(18, 6), CtSlot(17, 5));
  mapping.add(CtSlot(17, 7), CtSlot(17, 6));
  mapping.add(CtSlot(21, 6), CtSlot(17, 7));
  mapping.add(CtSlot(13, 7), CtSlot(18, 0));
  mapping.add(CtSlot(19, 3), CtSlot(18, 1));
  mapping.add(CtSlot(9, 2), CtSlot(18, 2));
  mapping.add(CtSlot(4, 4), CtSlot(18, 3));
  mapping.add(CtSlot(11, 7), CtSlot(18, 4));
  mapping.add(CtSlot(20, 4), CtSlot(18, 5));
  mapping.add(CtSlot(13, 6), CtSlot(18, 6));
  mapping.add(CtSlot(15, 1), CtSlot(18, 7));
  mapping.add(CtSlot(16, 1), CtSlot(19, 0));
  mapping.add(CtSlot(17, 4), CtSlot(19, 1));
  mapping.add(CtSlot(4, 6), CtSlot(19, 2));
  mapping.add(CtSlot(8, 5), CtSlot(19, 3));
  mapping.add(CtSlot(4, 0), CtSlot(19, 4));
  mapping.add(CtSlot(0, 3), CtSlot(19, 5));
  mapping.add(CtSlot(17, 4), CtSlot(19, 6));
  mapping.add(CtSlot(11, 2), CtSlot(19, 7));
  mapping.add(CtSlot(22, 5), CtSlot(20, 0));
  mapping.add(CtSlot(4, 0), CtSlot(20, 1));
  mapping.add(CtSlot(23, 4), CtSlot(20, 2));
  mapping.add(CtSlot(2, 6), CtSlot(20, 3));
  mapping.add(CtSlot(21, 7), CtSlot(20, 4));
  mapping.add(CtSlot(27, 1), CtSlot(20, 5));
  mapping.add(CtSlot(4, 1), CtSlot(20, 6));
  mapping.add(CtSlot(21, 6), CtSlot(20, 7));
  mapping.add(CtSlot(8, 1), CtSlot(21, 0));
  mapping.add(CtSlot(28, 2), CtSlot(21, 1));
  mapping.add(CtSlot(28, 4), CtSlot(21, 2));
  mapping.add(CtSlot(19, 6), CtSlot(21, 3));
  mapping.add(CtSlot(15, 4), CtSlot(21, 4));
  mapping.add(CtSlot(9, 4), CtSlot(21, 5));
  mapping.add(CtSlot(3, 5), CtSlot(21, 6));
  mapping.add(CtSlot(24, 7), CtSlot(21, 7));
  mapping.add(CtSlot(5, 4), CtSlot(22, 0));
  mapping.add(CtSlot(9, 6), CtSlot(22, 1));
  mapping.add(CtSlot(13, 3), CtSlot(22, 2));
  mapping.add(CtSlot(19, 0), CtSlot(22, 3));
  mapping.add(CtSlot(10, 0), CtSlot(22, 4));
  mapping.add(CtSlot(3, 1), CtSlot(22, 5));
  mapping.add(CtSlot(2, 6), CtSlot(22, 6));
  mapping.add(CtSlot(13, 5), CtSlot(22, 7));
  mapping.add(CtSlot(23, 3), CtSlot(23, 0));
  mapping.add(CtSlot(28, 4), CtSlot(23, 1));
  mapping.add(CtSlot(12, 4), CtSlot(23, 2));
  mapping.add(CtSlot(19, 2), CtSlot(23, 3));
  mapping.add(CtSlot(21, 4), CtSlot(23, 4));
  mapping.add(CtSlot(5, 3), CtSlot(23, 5));
  mapping.add(CtSlot(12, 1), CtSlot(23, 6));
  mapping.add(CtSlot(26, 4), CtSlot(23, 7));
  mapping.add(CtSlot(18, 0), CtSlot(24, 0));
  mapping.add(CtSlot(21, 3), CtSlot(24, 1));
  mapping.add(CtSlot(12, 7), CtSlot(24, 2));
  mapping.add(CtSlot(6, 7), CtSlot(24, 3));
  mapping.add(CtSlot(22, 2), CtSlot(24, 4));
  mapping.add(CtSlot(7, 4), CtSlot(24, 5));
  mapping.add(CtSlot(1, 4), CtSlot(24, 6));
  mapping.add(CtSlot(13, 7), CtSlot(24, 7));
  mapping.add(CtSlot(22, 1), CtSlot(25, 0));
  mapping.add(CtSlot(9, 1), CtSlot(25, 1));
  mapping.add(CtSlot(11, 6), CtSlot(25, 2));
  mapping.add(CtSlot(25, 2), CtSlot(25, 3));
  mapping.add(CtSlot(7, 6), CtSlot(25, 4));
  mapping.add(CtSlot(16, 1), CtSlot(25, 5));
  mapping.add(CtSlot(17, 6), CtSlot(25, 6));
  mapping.add(CtSlot(17, 0), CtSlot(25, 7));
  mapping.add(CtSlot(12, 5), CtSlot(26, 0));
  mapping.add(CtSlot(11, 2), CtSlot(26, 1));
  mapping.add(CtSlot(19, 5), CtSlot(26, 2));
  mapping.add(CtSlot(9, 4), CtSlot(26, 3));
  mapping.add(CtSlot(18, 3), CtSlot(26, 4));
  mapping.add(CtSlot(10, 4), CtSlot(26, 5));
  mapping.add(CtSlot(28, 1), CtSlot(26, 6));
  mapping.add(CtSlot(21, 5), CtSlot(26, 7));
  mapping.add(CtSlot(16, 4), CtSlot(27, 0));
  mapping.add(CtSlot(3, 6), CtSlot(27, 1));
  mapping.add(CtSlot(27, 7), CtSlot(27, 2));
  mapping.add(CtSlot(21, 6), CtSlot(27, 3));
  mapping.add(CtSlot(23, 4), CtSlot(27, 4));
  mapping.add(CtSlot(16, 1), CtSlot(27, 5));
  mapping.add(CtSlot(8, 4), CtSlot(27, 6));
  mapping.add(CtSlot(4, 1), CtSlot(27, 7));
  mapping.add(CtSlot(29, 7), CtSlot(28, 0));
  mapping.add(CtSlot(24, 6), CtSlot(28, 1));
  mapping.add(CtSlot(18, 0), CtSlot(28, 2));
  mapping.add(CtSlot(7, 5), CtSlot(28, 3));
  mapping.add(CtSlot(5, 4), CtSlot(28, 4));
  mapping.add(CtSlot(20, 7), CtSlot(28, 5));
  mapping.add(CtSlot(23, 5), CtSlot(28, 6));
  mapping.add(CtSlot(5, 4), CtSlot(28, 7));
  mapping.add(CtSlot(10, 1), CtSlot(29, 0));
  mapping.add(CtSlot(18, 5), CtSlot(29, 1));
  mapping.add(CtSlot(29, 5), CtSlot(29, 2));
  mapping.add(CtSlot(11, 6), CtSlot(29, 3));
  mapping.add(CtSlot(19, 1), CtSlot(29, 4));
  mapping.add(CtSlot(14, 7), CtSlot(29, 5));
  mapping.add(CtSlot(17, 6), CtSlot(29, 6));
  mapping.add(CtSlot(26, 1), CtSlot(29, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_12) {
  int64_t numCts = 31;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(9, 1), CtSlot(0, 0));
  mapping.add(CtSlot(22, 3), CtSlot(0, 1));
  mapping.add(CtSlot(3, 7), CtSlot(0, 2));
  mapping.add(CtSlot(26, 6), CtSlot(0, 3));
  mapping.add(CtSlot(21, 0), CtSlot(0, 4));
  mapping.add(CtSlot(27, 2), CtSlot(0, 5));
  mapping.add(CtSlot(0, 7), CtSlot(0, 6));
  mapping.add(CtSlot(15, 4), CtSlot(0, 7));
  mapping.add(CtSlot(12, 5), CtSlot(1, 0));
  mapping.add(CtSlot(13, 5), CtSlot(1, 1));
  mapping.add(CtSlot(9, 2), CtSlot(1, 2));
  mapping.add(CtSlot(13, 2), CtSlot(1, 3));
  mapping.add(CtSlot(2, 6), CtSlot(1, 4));
  mapping.add(CtSlot(12, 6), CtSlot(1, 5));
  mapping.add(CtSlot(17, 5), CtSlot(1, 6));
  mapping.add(CtSlot(20, 7), CtSlot(1, 7));
  mapping.add(CtSlot(0, 2), CtSlot(2, 0));
  mapping.add(CtSlot(7, 1), CtSlot(2, 1));
  mapping.add(CtSlot(3, 2), CtSlot(2, 2));
  mapping.add(CtSlot(5, 6), CtSlot(2, 3));
  mapping.add(CtSlot(2, 1), CtSlot(2, 4));
  mapping.add(CtSlot(23, 3), CtSlot(2, 5));
  mapping.add(CtSlot(14, 5), CtSlot(2, 6));
  mapping.add(CtSlot(11, 5), CtSlot(2, 7));
  mapping.add(CtSlot(18, 0), CtSlot(3, 0));
  mapping.add(CtSlot(26, 0), CtSlot(3, 1));
  mapping.add(CtSlot(3, 2), CtSlot(3, 2));
  mapping.add(CtSlot(7, 3), CtSlot(3, 3));
  mapping.add(CtSlot(21, 0), CtSlot(3, 4));
  mapping.add(CtSlot(6, 1), CtSlot(3, 5));
  mapping.add(CtSlot(2, 5), CtSlot(3, 6));
  mapping.add(CtSlot(25, 5), CtSlot(3, 7));
  mapping.add(CtSlot(8, 7), CtSlot(4, 0));
  mapping.add(CtSlot(8, 2), CtSlot(4, 1));
  mapping.add(CtSlot(3, 3), CtSlot(4, 2));
  mapping.add(CtSlot(23, 4), CtSlot(4, 3));
  mapping.add(CtSlot(1, 1), CtSlot(4, 4));
  mapping.add(CtSlot(17, 1), CtSlot(4, 5));
  mapping.add(CtSlot(27, 1), CtSlot(4, 6));
  mapping.add(CtSlot(2, 1), CtSlot(4, 7));
  mapping.add(CtSlot(16, 6), CtSlot(5, 0));
  mapping.add(CtSlot(16, 2), CtSlot(5, 1));
  mapping.add(CtSlot(19, 7), CtSlot(5, 2));
  mapping.add(CtSlot(11, 7), CtSlot(5, 3));
  mapping.add(CtSlot(16, 0), CtSlot(5, 4));
  mapping.add(CtSlot(18, 7), CtSlot(5, 5));
  mapping.add(CtSlot(7, 6), CtSlot(5, 6));
  mapping.add(CtSlot(2, 2), CtSlot(5, 7));
  mapping.add(CtSlot(15, 6), CtSlot(6, 0));
  mapping.add(CtSlot(23, 3), CtSlot(6, 1));
  mapping.add(CtSlot(24, 4), CtSlot(6, 2));
  mapping.add(CtSlot(5, 7), CtSlot(6, 3));
  mapping.add(CtSlot(12, 2), CtSlot(6, 4));
  mapping.add(CtSlot(19, 1), CtSlot(6, 5));
  mapping.add(CtSlot(11, 6), CtSlot(6, 6));
  mapping.add(CtSlot(18, 2), CtSlot(6, 7));
  mapping.add(CtSlot(29, 3), CtSlot(7, 0));
  mapping.add(CtSlot(19, 0), CtSlot(7, 1));
  mapping.add(CtSlot(24, 3), CtSlot(7, 2));
  mapping.add(CtSlot(26, 6), CtSlot(7, 3));
  mapping.add(CtSlot(1, 7), CtSlot(7, 4));
  mapping.add(CtSlot(13, 0), CtSlot(7, 5));
  mapping.add(CtSlot(5, 4), CtSlot(7, 6));
  mapping.add(CtSlot(5, 7), CtSlot(7, 7));
  mapping.add(CtSlot(8, 0), CtSlot(8, 0));
  mapping.add(CtSlot(13, 0), CtSlot(8, 1));
  mapping.add(CtSlot(8, 4), CtSlot(8, 2));
  mapping.add(CtSlot(9, 0), CtSlot(8, 3));
  mapping.add(CtSlot(18, 2), CtSlot(8, 4));
  mapping.add(CtSlot(29, 1), CtSlot(8, 5));
  mapping.add(CtSlot(22, 0), CtSlot(8, 6));
  mapping.add(CtSlot(3, 2), CtSlot(8, 7));
  mapping.add(CtSlot(19, 6), CtSlot(9, 0));
  mapping.add(CtSlot(25, 6), CtSlot(9, 1));
  mapping.add(CtSlot(0, 6), CtSlot(9, 2));
  mapping.add(CtSlot(30, 4), CtSlot(9, 3));
  mapping.add(CtSlot(17, 5), CtSlot(9, 4));
  mapping.add(CtSlot(19, 5), CtSlot(9, 5));
  mapping.add(CtSlot(4, 7), CtSlot(9, 6));
  mapping.add(CtSlot(29, 0), CtSlot(9, 7));
  mapping.add(CtSlot(20, 5), CtSlot(10, 0));
  mapping.add(CtSlot(26, 3), CtSlot(10, 1));
  mapping.add(CtSlot(8, 3), CtSlot(10, 2));
  mapping.add(CtSlot(1, 5), CtSlot(10, 3));
  mapping.add(CtSlot(21, 1), CtSlot(10, 4));
  mapping.add(CtSlot(25, 4), CtSlot(10, 5));
  mapping.add(CtSlot(4, 1), CtSlot(10, 6));
  mapping.add(CtSlot(6, 6), CtSlot(10, 7));
  mapping.add(CtSlot(4, 0), CtSlot(11, 0));
  mapping.add(CtSlot(12, 1), CtSlot(11, 1));
  mapping.add(CtSlot(30, 7), CtSlot(11, 2));
  mapping.add(CtSlot(27, 7), CtSlot(11, 3));
  mapping.add(CtSlot(6, 0), CtSlot(11, 4));
  mapping.add(CtSlot(3, 7), CtSlot(11, 5));
  mapping.add(CtSlot(10, 1), CtSlot(11, 6));
  mapping.add(CtSlot(17, 4), CtSlot(11, 7));
  mapping.add(CtSlot(19, 6), CtSlot(12, 0));
  mapping.add(CtSlot(2, 7), CtSlot(12, 1));
  mapping.add(CtSlot(22, 7), CtSlot(12, 2));
  mapping.add(CtSlot(14, 2), CtSlot(12, 3));
  mapping.add(CtSlot(27, 3), CtSlot(12, 4));
  mapping.add(CtSlot(0, 2), CtSlot(12, 5));
  mapping.add(CtSlot(10, 6), CtSlot(12, 6));
  mapping.add(CtSlot(27, 2), CtSlot(12, 7));
  mapping.add(CtSlot(2, 0), CtSlot(13, 0));
  mapping.add(CtSlot(30, 3), CtSlot(13, 1));
  mapping.add(CtSlot(2, 1), CtSlot(13, 2));
  mapping.add(CtSlot(18, 5), CtSlot(13, 3));
  mapping.add(CtSlot(14, 1), CtSlot(13, 4));
  mapping.add(CtSlot(0, 7), CtSlot(13, 5));
  mapping.add(CtSlot(11, 0), CtSlot(13, 6));
  mapping.add(CtSlot(28, 3), CtSlot(13, 7));
  mapping.add(CtSlot(14, 4), CtSlot(14, 0));
  mapping.add(CtSlot(26, 2), CtSlot(14, 1));
  mapping.add(CtSlot(14, 0), CtSlot(14, 2));
  mapping.add(CtSlot(7, 3), CtSlot(14, 3));
  mapping.add(CtSlot(6, 3), CtSlot(14, 4));
  mapping.add(CtSlot(12, 4), CtSlot(14, 5));
  mapping.add(CtSlot(28, 5), CtSlot(14, 6));
  mapping.add(CtSlot(13, 1), CtSlot(14, 7));
  mapping.add(CtSlot(26, 3), CtSlot(15, 0));
  mapping.add(CtSlot(16, 0), CtSlot(15, 1));
  mapping.add(CtSlot(24, 5), CtSlot(15, 2));
  mapping.add(CtSlot(4, 6), CtSlot(15, 3));
  mapping.add(CtSlot(8, 5), CtSlot(15, 4));
  mapping.add(CtSlot(9, 0), CtSlot(15, 5));
  mapping.add(CtSlot(19, 7), CtSlot(15, 6));
  mapping.add(CtSlot(21, 0), CtSlot(15, 7));
  mapping.add(CtSlot(5, 7), CtSlot(16, 0));
  mapping.add(CtSlot(16, 5), CtSlot(16, 1));
  mapping.add(CtSlot(17, 4), CtSlot(16, 2));
  mapping.add(CtSlot(11, 3), CtSlot(16, 3));
  mapping.add(CtSlot(26, 0), CtSlot(16, 4));
  mapping.add(CtSlot(26, 0), CtSlot(16, 5));
  mapping.add(CtSlot(8, 1), CtSlot(16, 6));
  mapping.add(CtSlot(12, 0), CtSlot(16, 7));
  mapping.add(CtSlot(21, 7), CtSlot(17, 0));
  mapping.add(CtSlot(26, 0), CtSlot(17, 1));
  mapping.add(CtSlot(7, 1), CtSlot(17, 2));
  mapping.add(CtSlot(12, 7), CtSlot(17, 3));
  mapping.add(CtSlot(6, 0), CtSlot(17, 4));
  mapping.add(CtSlot(3, 2), CtSlot(17, 5));
  mapping.add(CtSlot(10, 3), CtSlot(17, 6));
  mapping.add(CtSlot(9, 4), CtSlot(17, 7));
  mapping.add(CtSlot(9, 4), CtSlot(18, 0));
  mapping.add(CtSlot(22, 3), CtSlot(18, 1));
  mapping.add(CtSlot(1, 4), CtSlot(18, 2));
  mapping.add(CtSlot(8, 6), CtSlot(18, 3));
  mapping.add(CtSlot(16, 1), CtSlot(18, 4));
  mapping.add(CtSlot(18, 6), CtSlot(18, 5));
  mapping.add(CtSlot(23, 3), CtSlot(18, 6));
  mapping.add(CtSlot(0, 2), CtSlot(18, 7));
  mapping.add(CtSlot(30, 6), CtSlot(19, 0));
  mapping.add(CtSlot(9, 3), CtSlot(19, 1));
  mapping.add(CtSlot(24, 2), CtSlot(19, 2));
  mapping.add(CtSlot(3, 1), CtSlot(19, 3));
  mapping.add(CtSlot(24, 2), CtSlot(19, 4));
  mapping.add(CtSlot(5, 5), CtSlot(19, 5));
  mapping.add(CtSlot(14, 4), CtSlot(19, 6));
  mapping.add(CtSlot(5, 7), CtSlot(19, 7));
  mapping.add(CtSlot(17, 0), CtSlot(20, 0));
  mapping.add(CtSlot(21, 5), CtSlot(20, 1));
  mapping.add(CtSlot(28, 5), CtSlot(20, 2));
  mapping.add(CtSlot(23, 1), CtSlot(20, 3));
  mapping.add(CtSlot(29, 1), CtSlot(20, 4));
  mapping.add(CtSlot(30, 4), CtSlot(20, 5));
  mapping.add(CtSlot(6, 2), CtSlot(20, 6));
  mapping.add(CtSlot(24, 3), CtSlot(20, 7));
  mapping.add(CtSlot(19, 2), CtSlot(21, 0));
  mapping.add(CtSlot(16, 5), CtSlot(21, 1));
  mapping.add(CtSlot(12, 0), CtSlot(21, 2));
  mapping.add(CtSlot(0, 4), CtSlot(21, 3));
  mapping.add(CtSlot(20, 1), CtSlot(21, 4));
  mapping.add(CtSlot(6, 7), CtSlot(21, 5));
  mapping.add(CtSlot(7, 2), CtSlot(21, 6));
  mapping.add(CtSlot(30, 3), CtSlot(21, 7));
  mapping.add(CtSlot(25, 7), CtSlot(22, 0));
  mapping.add(CtSlot(11, 1), CtSlot(22, 1));
  mapping.add(CtSlot(22, 6), CtSlot(22, 2));
  mapping.add(CtSlot(24, 4), CtSlot(22, 3));
  mapping.add(CtSlot(16, 3), CtSlot(22, 4));
  mapping.add(CtSlot(0, 0), CtSlot(22, 5));
  mapping.add(CtSlot(11, 7), CtSlot(22, 6));
  mapping.add(CtSlot(27, 0), CtSlot(22, 7));
  mapping.add(CtSlot(25, 1), CtSlot(23, 0));
  mapping.add(CtSlot(19, 2), CtSlot(23, 1));
  mapping.add(CtSlot(13, 0), CtSlot(23, 2));
  mapping.add(CtSlot(7, 0), CtSlot(23, 3));
  mapping.add(CtSlot(17, 2), CtSlot(23, 4));
  mapping.add(CtSlot(22, 1), CtSlot(23, 5));
  mapping.add(CtSlot(17, 2), CtSlot(23, 6));
  mapping.add(CtSlot(21, 7), CtSlot(23, 7));
  mapping.add(CtSlot(10, 2), CtSlot(24, 0));
  mapping.add(CtSlot(7, 7), CtSlot(24, 1));
  mapping.add(CtSlot(8, 2), CtSlot(24, 2));
  mapping.add(CtSlot(23, 4), CtSlot(24, 3));
  mapping.add(CtSlot(26, 7), CtSlot(24, 4));
  mapping.add(CtSlot(18, 5), CtSlot(24, 5));
  mapping.add(CtSlot(10, 2), CtSlot(24, 6));
  mapping.add(CtSlot(23, 6), CtSlot(24, 7));
  mapping.add(CtSlot(27, 0), CtSlot(25, 0));
  mapping.add(CtSlot(28, 1), CtSlot(25, 1));
  mapping.add(CtSlot(12, 3), CtSlot(25, 2));
  mapping.add(CtSlot(4, 5), CtSlot(25, 3));
  mapping.add(CtSlot(20, 4), CtSlot(25, 4));
  mapping.add(CtSlot(5, 7), CtSlot(25, 5));
  mapping.add(CtSlot(16, 4), CtSlot(25, 6));
  mapping.add(CtSlot(10, 6), CtSlot(25, 7));
  mapping.add(CtSlot(30, 3), CtSlot(26, 0));
  mapping.add(CtSlot(24, 7), CtSlot(26, 1));
  mapping.add(CtSlot(13, 3), CtSlot(26, 2));
  mapping.add(CtSlot(6, 2), CtSlot(26, 3));
  mapping.add(CtSlot(10, 6), CtSlot(26, 4));
  mapping.add(CtSlot(13, 5), CtSlot(26, 5));
  mapping.add(CtSlot(4, 0), CtSlot(26, 6));
  mapping.add(CtSlot(22, 1), CtSlot(26, 7));
  mapping.add(CtSlot(30, 1), CtSlot(27, 0));
  mapping.add(CtSlot(2, 5), CtSlot(27, 1));
  mapping.add(CtSlot(15, 7), CtSlot(27, 2));
  mapping.add(CtSlot(8, 4), CtSlot(27, 3));
  mapping.add(CtSlot(18, 5), CtSlot(27, 4));
  mapping.add(CtSlot(2, 7), CtSlot(27, 5));
  mapping.add(CtSlot(21, 2), CtSlot(27, 6));
  mapping.add(CtSlot(15, 0), CtSlot(27, 7));
  mapping.add(CtSlot(26, 0), CtSlot(28, 0));
  mapping.add(CtSlot(24, 7), CtSlot(28, 1));
  mapping.add(CtSlot(6, 0), CtSlot(28, 2));
  mapping.add(CtSlot(19, 5), CtSlot(28, 3));
  mapping.add(CtSlot(8, 4), CtSlot(28, 4));
  mapping.add(CtSlot(24, 0), CtSlot(28, 5));
  mapping.add(CtSlot(25, 1), CtSlot(28, 6));
  mapping.add(CtSlot(15, 1), CtSlot(28, 7));
  mapping.add(CtSlot(19, 0), CtSlot(29, 0));
  mapping.add(CtSlot(21, 1), CtSlot(29, 1));
  mapping.add(CtSlot(16, 3), CtSlot(29, 2));
  mapping.add(CtSlot(10, 7), CtSlot(29, 3));
  mapping.add(CtSlot(21, 1), CtSlot(29, 4));
  mapping.add(CtSlot(2, 2), CtSlot(29, 5));
  mapping.add(CtSlot(8, 1), CtSlot(29, 6));
  mapping.add(CtSlot(14, 1), CtSlot(29, 7));
  mapping.add(CtSlot(22, 4), CtSlot(30, 0));
  mapping.add(CtSlot(2, 6), CtSlot(30, 1));
  mapping.add(CtSlot(20, 2), CtSlot(30, 2));
  mapping.add(CtSlot(4, 4), CtSlot(30, 3));
  mapping.add(CtSlot(11, 1), CtSlot(30, 4));
  mapping.add(CtSlot(11, 0), CtSlot(30, 5));
  mapping.add(CtSlot(21, 0), CtSlot(30, 6));
  mapping.add(CtSlot(14, 7), CtSlot(30, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_13) {
  int64_t numCts = 31;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(9, 1), CtSlot(0, 0));
  mapping.add(CtSlot(22, 3), CtSlot(0, 1));
  mapping.add(CtSlot(3, 7), CtSlot(0, 2));
  mapping.add(CtSlot(26, 6), CtSlot(0, 3));
  mapping.add(CtSlot(21, 0), CtSlot(0, 4));
  mapping.add(CtSlot(27, 2), CtSlot(0, 5));
  mapping.add(CtSlot(0, 7), CtSlot(0, 6));
  mapping.add(CtSlot(15, 4), CtSlot(0, 7));
  mapping.add(CtSlot(12, 5), CtSlot(1, 0));
  mapping.add(CtSlot(13, 5), CtSlot(1, 1));
  mapping.add(CtSlot(9, 2), CtSlot(1, 2));
  mapping.add(CtSlot(13, 2), CtSlot(1, 3));
  mapping.add(CtSlot(2, 6), CtSlot(1, 4));
  mapping.add(CtSlot(12, 6), CtSlot(1, 5));
  mapping.add(CtSlot(17, 5), CtSlot(1, 6));
  mapping.add(CtSlot(20, 7), CtSlot(1, 7));
  mapping.add(CtSlot(0, 2), CtSlot(2, 0));
  mapping.add(CtSlot(7, 1), CtSlot(2, 1));
  mapping.add(CtSlot(3, 2), CtSlot(2, 2));
  mapping.add(CtSlot(5, 6), CtSlot(2, 3));
  mapping.add(CtSlot(2, 1), CtSlot(2, 4));
  mapping.add(CtSlot(23, 3), CtSlot(2, 5));
  mapping.add(CtSlot(14, 5), CtSlot(2, 6));
  mapping.add(CtSlot(11, 5), CtSlot(2, 7));
  mapping.add(CtSlot(18, 0), CtSlot(3, 0));
  mapping.add(CtSlot(26, 0), CtSlot(3, 1));
  mapping.add(CtSlot(3, 2), CtSlot(3, 2));
  mapping.add(CtSlot(7, 3), CtSlot(3, 3));
  mapping.add(CtSlot(21, 0), CtSlot(3, 4));
  mapping.add(CtSlot(6, 1), CtSlot(3, 5));
  mapping.add(CtSlot(2, 5), CtSlot(3, 6));
  mapping.add(CtSlot(25, 5), CtSlot(3, 7));
  mapping.add(CtSlot(8, 7), CtSlot(4, 0));
  mapping.add(CtSlot(8, 2), CtSlot(4, 1));
  mapping.add(CtSlot(3, 3), CtSlot(4, 2));
  mapping.add(CtSlot(23, 4), CtSlot(4, 3));
  mapping.add(CtSlot(1, 1), CtSlot(4, 4));
  mapping.add(CtSlot(17, 1), CtSlot(4, 5));
  mapping.add(CtSlot(27, 1), CtSlot(4, 6));
  mapping.add(CtSlot(2, 1), CtSlot(4, 7));
  mapping.add(CtSlot(16, 6), CtSlot(5, 0));
  mapping.add(CtSlot(16, 2), CtSlot(5, 1));
  mapping.add(CtSlot(19, 7), CtSlot(5, 2));
  mapping.add(CtSlot(11, 7), CtSlot(5, 3));
  mapping.add(CtSlot(16, 0), CtSlot(5, 4));
  mapping.add(CtSlot(18, 7), CtSlot(5, 5));
  mapping.add(CtSlot(7, 6), CtSlot(5, 6));
  mapping.add(CtSlot(2, 2), CtSlot(5, 7));
  mapping.add(CtSlot(15, 6), CtSlot(6, 0));
  mapping.add(CtSlot(23, 3), CtSlot(6, 1));
  mapping.add(CtSlot(24, 4), CtSlot(6, 2));
  mapping.add(CtSlot(5, 7), CtSlot(6, 3));
  mapping.add(CtSlot(12, 2), CtSlot(6, 4));
  mapping.add(CtSlot(19, 1), CtSlot(6, 5));
  mapping.add(CtSlot(11, 6), CtSlot(6, 6));
  mapping.add(CtSlot(18, 2), CtSlot(6, 7));
  mapping.add(CtSlot(29, 3), CtSlot(7, 0));
  mapping.add(CtSlot(19, 0), CtSlot(7, 1));
  mapping.add(CtSlot(24, 3), CtSlot(7, 2));
  mapping.add(CtSlot(26, 6), CtSlot(7, 3));
  mapping.add(CtSlot(1, 7), CtSlot(7, 4));
  mapping.add(CtSlot(13, 0), CtSlot(7, 5));
  mapping.add(CtSlot(5, 4), CtSlot(7, 6));
  mapping.add(CtSlot(5, 7), CtSlot(7, 7));
  mapping.add(CtSlot(8, 0), CtSlot(8, 0));
  mapping.add(CtSlot(13, 0), CtSlot(8, 1));
  mapping.add(CtSlot(8, 4), CtSlot(8, 2));
  mapping.add(CtSlot(9, 0), CtSlot(8, 3));
  mapping.add(CtSlot(18, 2), CtSlot(8, 4));
  mapping.add(CtSlot(29, 1), CtSlot(8, 5));
  mapping.add(CtSlot(22, 0), CtSlot(8, 6));
  mapping.add(CtSlot(3, 2), CtSlot(8, 7));
  mapping.add(CtSlot(19, 6), CtSlot(9, 0));
  mapping.add(CtSlot(25, 6), CtSlot(9, 1));
  mapping.add(CtSlot(0, 6), CtSlot(9, 2));
  mapping.add(CtSlot(30, 4), CtSlot(9, 3));
  mapping.add(CtSlot(17, 5), CtSlot(9, 4));
  mapping.add(CtSlot(19, 5), CtSlot(9, 5));
  mapping.add(CtSlot(4, 7), CtSlot(9, 6));
  mapping.add(CtSlot(29, 0), CtSlot(9, 7));
  mapping.add(CtSlot(20, 5), CtSlot(10, 0));
  mapping.add(CtSlot(26, 3), CtSlot(10, 1));
  mapping.add(CtSlot(8, 3), CtSlot(10, 2));
  mapping.add(CtSlot(1, 5), CtSlot(10, 3));
  mapping.add(CtSlot(21, 1), CtSlot(10, 4));
  mapping.add(CtSlot(25, 4), CtSlot(10, 5));
  mapping.add(CtSlot(4, 1), CtSlot(10, 6));
  mapping.add(CtSlot(6, 6), CtSlot(10, 7));
  mapping.add(CtSlot(4, 0), CtSlot(11, 0));
  mapping.add(CtSlot(12, 1), CtSlot(11, 1));
  mapping.add(CtSlot(30, 7), CtSlot(11, 2));
  mapping.add(CtSlot(27, 7), CtSlot(11, 3));
  mapping.add(CtSlot(6, 0), CtSlot(11, 4));
  mapping.add(CtSlot(3, 7), CtSlot(11, 5));
  mapping.add(CtSlot(10, 1), CtSlot(11, 6));
  mapping.add(CtSlot(17, 4), CtSlot(11, 7));
  mapping.add(CtSlot(19, 6), CtSlot(12, 0));
  mapping.add(CtSlot(2, 7), CtSlot(12, 1));
  mapping.add(CtSlot(22, 7), CtSlot(12, 2));
  mapping.add(CtSlot(14, 2), CtSlot(12, 3));
  mapping.add(CtSlot(27, 3), CtSlot(12, 4));
  mapping.add(CtSlot(0, 2), CtSlot(12, 5));
  mapping.add(CtSlot(10, 6), CtSlot(12, 6));
  mapping.add(CtSlot(27, 2), CtSlot(12, 7));
  mapping.add(CtSlot(2, 0), CtSlot(13, 0));
  mapping.add(CtSlot(30, 3), CtSlot(13, 1));
  mapping.add(CtSlot(2, 1), CtSlot(13, 2));
  mapping.add(CtSlot(18, 5), CtSlot(13, 3));
  mapping.add(CtSlot(14, 1), CtSlot(13, 4));
  mapping.add(CtSlot(0, 7), CtSlot(13, 5));
  mapping.add(CtSlot(11, 0), CtSlot(13, 6));
  mapping.add(CtSlot(28, 3), CtSlot(13, 7));
  mapping.add(CtSlot(14, 4), CtSlot(14, 0));
  mapping.add(CtSlot(26, 2), CtSlot(14, 1));
  mapping.add(CtSlot(5, 0), CtSlot(14, 2));
  mapping.add(CtSlot(7, 3), CtSlot(14, 3));
  mapping.add(CtSlot(6, 3), CtSlot(14, 4));
  mapping.add(CtSlot(12, 4), CtSlot(14, 5));
  mapping.add(CtSlot(28, 5), CtSlot(14, 6));
  mapping.add(CtSlot(13, 1), CtSlot(14, 7));
  mapping.add(CtSlot(26, 3), CtSlot(15, 0));
  mapping.add(CtSlot(16, 0), CtSlot(15, 1));
  mapping.add(CtSlot(24, 5), CtSlot(15, 2));
  mapping.add(CtSlot(4, 6), CtSlot(15, 3));
  mapping.add(CtSlot(8, 5), CtSlot(15, 4));
  mapping.add(CtSlot(9, 0), CtSlot(15, 5));
  mapping.add(CtSlot(19, 7), CtSlot(15, 6));
  mapping.add(CtSlot(21, 0), CtSlot(15, 7));
  mapping.add(CtSlot(5, 7), CtSlot(16, 0));
  mapping.add(CtSlot(16, 5), CtSlot(16, 1));
  mapping.add(CtSlot(17, 4), CtSlot(16, 2));
  mapping.add(CtSlot(11, 3), CtSlot(16, 3));
  mapping.add(CtSlot(26, 0), CtSlot(16, 4));
  mapping.add(CtSlot(26, 0), CtSlot(16, 5));
  mapping.add(CtSlot(8, 1), CtSlot(16, 6));
  mapping.add(CtSlot(12, 0), CtSlot(16, 7));
  mapping.add(CtSlot(21, 7), CtSlot(17, 0));
  mapping.add(CtSlot(26, 0), CtSlot(17, 1));
  mapping.add(CtSlot(7, 1), CtSlot(17, 2));
  mapping.add(CtSlot(12, 7), CtSlot(17, 3));
  mapping.add(CtSlot(6, 0), CtSlot(17, 4));
  mapping.add(CtSlot(3, 2), CtSlot(17, 5));
  mapping.add(CtSlot(10, 3), CtSlot(17, 6));
  mapping.add(CtSlot(9, 4), CtSlot(17, 7));
  mapping.add(CtSlot(9, 4), CtSlot(18, 0));
  mapping.add(CtSlot(22, 3), CtSlot(18, 1));
  mapping.add(CtSlot(1, 4), CtSlot(18, 2));
  mapping.add(CtSlot(8, 6), CtSlot(18, 3));
  mapping.add(CtSlot(16, 1), CtSlot(18, 4));
  mapping.add(CtSlot(18, 6), CtSlot(18, 5));
  mapping.add(CtSlot(23, 3), CtSlot(18, 6));
  mapping.add(CtSlot(0, 2), CtSlot(18, 7));
  mapping.add(CtSlot(30, 6), CtSlot(19, 0));
  mapping.add(CtSlot(9, 3), CtSlot(19, 1));
  mapping.add(CtSlot(24, 2), CtSlot(19, 2));
  mapping.add(CtSlot(3, 1), CtSlot(19, 3));
  mapping.add(CtSlot(24, 2), CtSlot(19, 4));
  mapping.add(CtSlot(5, 5), CtSlot(19, 5));
  mapping.add(CtSlot(14, 4), CtSlot(19, 6));
  mapping.add(CtSlot(5, 7), CtSlot(19, 7));
  mapping.add(CtSlot(17, 0), CtSlot(20, 0));
  mapping.add(CtSlot(21, 5), CtSlot(20, 1));
  mapping.add(CtSlot(28, 5), CtSlot(20, 2));
  mapping.add(CtSlot(23, 1), CtSlot(20, 3));
  mapping.add(CtSlot(29, 1), CtSlot(20, 4));
  mapping.add(CtSlot(30, 4), CtSlot(20, 5));
  mapping.add(CtSlot(6, 2), CtSlot(20, 6));
  mapping.add(CtSlot(24, 3), CtSlot(20, 7));
  mapping.add(CtSlot(19, 2), CtSlot(21, 0));
  mapping.add(CtSlot(16, 5), CtSlot(21, 1));
  mapping.add(CtSlot(12, 0), CtSlot(21, 2));
  mapping.add(CtSlot(0, 4), CtSlot(21, 3));
  mapping.add(CtSlot(20, 1), CtSlot(21, 4));
  mapping.add(CtSlot(6, 7), CtSlot(21, 5));
  mapping.add(CtSlot(7, 2), CtSlot(21, 6));
  mapping.add(CtSlot(30, 3), CtSlot(21, 7));
  mapping.add(CtSlot(25, 7), CtSlot(22, 0));
  mapping.add(CtSlot(11, 1), CtSlot(22, 1));
  mapping.add(CtSlot(22, 6), CtSlot(22, 2));
  mapping.add(CtSlot(24, 4), CtSlot(22, 3));
  mapping.add(CtSlot(16, 3), CtSlot(22, 4));
  mapping.add(CtSlot(0, 0), CtSlot(22, 5));
  mapping.add(CtSlot(11, 7), CtSlot(22, 6));
  mapping.add(CtSlot(27, 0), CtSlot(22, 7));
  mapping.add(CtSlot(25, 1), CtSlot(23, 0));
  mapping.add(CtSlot(19, 2), CtSlot(23, 1));
  mapping.add(CtSlot(13, 0), CtSlot(23, 2));
  mapping.add(CtSlot(7, 0), CtSlot(23, 3));
  mapping.add(CtSlot(17, 2), CtSlot(23, 4));
  mapping.add(CtSlot(22, 1), CtSlot(23, 5));
  mapping.add(CtSlot(17, 2), CtSlot(23, 6));
  mapping.add(CtSlot(21, 7), CtSlot(23, 7));
  mapping.add(CtSlot(10, 2), CtSlot(24, 0));
  mapping.add(CtSlot(7, 7), CtSlot(24, 1));
  mapping.add(CtSlot(8, 2), CtSlot(24, 2));
  mapping.add(CtSlot(23, 4), CtSlot(24, 3));
  mapping.add(CtSlot(26, 7), CtSlot(24, 4));
  mapping.add(CtSlot(18, 5), CtSlot(24, 5));
  mapping.add(CtSlot(10, 2), CtSlot(24, 6));
  mapping.add(CtSlot(23, 6), CtSlot(24, 7));
  mapping.add(CtSlot(27, 0), CtSlot(25, 0));
  mapping.add(CtSlot(28, 1), CtSlot(25, 1));
  mapping.add(CtSlot(12, 3), CtSlot(25, 2));
  mapping.add(CtSlot(4, 5), CtSlot(25, 3));
  mapping.add(CtSlot(20, 4), CtSlot(25, 4));
  mapping.add(CtSlot(5, 7), CtSlot(25, 5));
  mapping.add(CtSlot(16, 4), CtSlot(25, 6));
  mapping.add(CtSlot(10, 6), CtSlot(25, 7));
  mapping.add(CtSlot(30, 3), CtSlot(26, 0));
  mapping.add(CtSlot(24, 7), CtSlot(26, 1));
  mapping.add(CtSlot(13, 3), CtSlot(26, 2));
  mapping.add(CtSlot(6, 2), CtSlot(26, 3));
  mapping.add(CtSlot(10, 6), CtSlot(26, 4));
  mapping.add(CtSlot(13, 5), CtSlot(26, 5));
  mapping.add(CtSlot(4, 0), CtSlot(26, 6));
  mapping.add(CtSlot(22, 1), CtSlot(26, 7));
  mapping.add(CtSlot(30, 1), CtSlot(27, 0));
  mapping.add(CtSlot(2, 5), CtSlot(27, 1));
  mapping.add(CtSlot(15, 7), CtSlot(27, 2));
  mapping.add(CtSlot(8, 4), CtSlot(27, 3));
  mapping.add(CtSlot(18, 5), CtSlot(27, 4));
  mapping.add(CtSlot(2, 7), CtSlot(27, 5));
  mapping.add(CtSlot(21, 2), CtSlot(27, 6));
  mapping.add(CtSlot(15, 0), CtSlot(27, 7));
  mapping.add(CtSlot(26, 0), CtSlot(28, 0));
  mapping.add(CtSlot(24, 7), CtSlot(28, 1));
  mapping.add(CtSlot(6, 0), CtSlot(28, 2));
  mapping.add(CtSlot(19, 5), CtSlot(28, 3));
  mapping.add(CtSlot(8, 4), CtSlot(28, 4));
  mapping.add(CtSlot(24, 0), CtSlot(28, 5));
  mapping.add(CtSlot(25, 1), CtSlot(28, 6));
  mapping.add(CtSlot(15, 1), CtSlot(28, 7));
  mapping.add(CtSlot(19, 0), CtSlot(29, 0));
  mapping.add(CtSlot(21, 1), CtSlot(29, 1));
  mapping.add(CtSlot(16, 3), CtSlot(29, 2));
  mapping.add(CtSlot(10, 7), CtSlot(29, 3));
  mapping.add(CtSlot(21, 1), CtSlot(29, 4));
  mapping.add(CtSlot(2, 2), CtSlot(29, 5));
  mapping.add(CtSlot(8, 1), CtSlot(29, 6));
  mapping.add(CtSlot(14, 1), CtSlot(29, 7));
  mapping.add(CtSlot(22, 4), CtSlot(30, 0));
  mapping.add(CtSlot(2, 6), CtSlot(30, 1));
  mapping.add(CtSlot(20, 2), CtSlot(30, 2));
  mapping.add(CtSlot(4, 4), CtSlot(30, 3));
  mapping.add(CtSlot(11, 1), CtSlot(30, 4));
  mapping.add(CtSlot(11, 0), CtSlot(30, 5));
  mapping.add(CtSlot(21, 0), CtSlot(30, 6));
  mapping.add(CtSlot(14, 7), CtSlot(30, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_14) {
  int64_t numCts = 31;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(9, 1), CtSlot(0, 0));
  mapping.add(CtSlot(22, 3), CtSlot(0, 1));
  mapping.add(CtSlot(3, 7), CtSlot(0, 2));
  mapping.add(CtSlot(26, 6), CtSlot(0, 3));
  mapping.add(CtSlot(21, 0), CtSlot(0, 4));
  mapping.add(CtSlot(27, 2), CtSlot(0, 5));
  mapping.add(CtSlot(0, 7), CtSlot(0, 6));
  mapping.add(CtSlot(15, 4), CtSlot(0, 7));
  mapping.add(CtSlot(12, 5), CtSlot(1, 0));
  mapping.add(CtSlot(13, 5), CtSlot(1, 1));
  mapping.add(CtSlot(9, 2), CtSlot(1, 2));
  mapping.add(CtSlot(13, 2), CtSlot(1, 3));
  mapping.add(CtSlot(2, 6), CtSlot(1, 4));
  mapping.add(CtSlot(12, 6), CtSlot(1, 5));
  mapping.add(CtSlot(17, 5), CtSlot(1, 6));
  mapping.add(CtSlot(20, 7), CtSlot(1, 7));
  mapping.add(CtSlot(0, 2), CtSlot(2, 0));
  mapping.add(CtSlot(7, 1), CtSlot(2, 1));
  mapping.add(CtSlot(3, 2), CtSlot(2, 2));
  mapping.add(CtSlot(5, 6), CtSlot(2, 3));
  mapping.add(CtSlot(2, 1), CtSlot(2, 4));
  mapping.add(CtSlot(23, 3), CtSlot(2, 5));
  mapping.add(CtSlot(14, 5), CtSlot(2, 6));
  mapping.add(CtSlot(11, 5), CtSlot(2, 7));
  mapping.add(CtSlot(18, 0), CtSlot(3, 0));
  mapping.add(CtSlot(26, 0), CtSlot(3, 1));
  mapping.add(CtSlot(3, 2), CtSlot(3, 2));
  mapping.add(CtSlot(7, 3), CtSlot(3, 3));
  mapping.add(CtSlot(21, 0), CtSlot(3, 4));
  mapping.add(CtSlot(6, 1), CtSlot(3, 5));
  mapping.add(CtSlot(2, 5), CtSlot(3, 6));
  mapping.add(CtSlot(25, 5), CtSlot(3, 7));
  mapping.add(CtSlot(8, 7), CtSlot(4, 0));
  mapping.add(CtSlot(8, 2), CtSlot(4, 1));
  mapping.add(CtSlot(3, 3), CtSlot(4, 2));
  mapping.add(CtSlot(23, 4), CtSlot(4, 3));
  mapping.add(CtSlot(1, 1), CtSlot(4, 4));
  mapping.add(CtSlot(17, 1), CtSlot(4, 5));
  mapping.add(CtSlot(27, 1), CtSlot(4, 6));
  mapping.add(CtSlot(2, 1), CtSlot(4, 7));
  mapping.add(CtSlot(16, 6), CtSlot(5, 0));
  mapping.add(CtSlot(16, 2), CtSlot(5, 1));
  mapping.add(CtSlot(19, 7), CtSlot(5, 2));
  mapping.add(CtSlot(11, 7), CtSlot(5, 3));
  mapping.add(CtSlot(16, 0), CtSlot(5, 4));
  mapping.add(CtSlot(18, 7), CtSlot(5, 5));
  mapping.add(CtSlot(7, 6), CtSlot(5, 6));
  mapping.add(CtSlot(2, 2), CtSlot(5, 7));
  mapping.add(CtSlot(15, 6), CtSlot(6, 0));
  mapping.add(CtSlot(23, 3), CtSlot(6, 1));
  mapping.add(CtSlot(24, 4), CtSlot(6, 2));
  mapping.add(CtSlot(5, 7), CtSlot(6, 3));
  mapping.add(CtSlot(12, 2), CtSlot(6, 4));
  mapping.add(CtSlot(19, 1), CtSlot(6, 5));
  mapping.add(CtSlot(11, 6), CtSlot(6, 6));
  mapping.add(CtSlot(18, 2), CtSlot(6, 7));
  mapping.add(CtSlot(29, 3), CtSlot(7, 0));
  mapping.add(CtSlot(19, 0), CtSlot(7, 1));
  mapping.add(CtSlot(24, 3), CtSlot(7, 2));
  mapping.add(CtSlot(26, 6), CtSlot(7, 3));
  mapping.add(CtSlot(1, 7), CtSlot(7, 4));
  mapping.add(CtSlot(13, 0), CtSlot(7, 5));
  mapping.add(CtSlot(5, 4), CtSlot(7, 6));
  mapping.add(CtSlot(5, 7), CtSlot(7, 7));
  mapping.add(CtSlot(8, 0), CtSlot(8, 0));
  mapping.add(CtSlot(13, 0), CtSlot(8, 1));
  mapping.add(CtSlot(8, 4), CtSlot(8, 2));
  mapping.add(CtSlot(9, 0), CtSlot(8, 3));
  mapping.add(CtSlot(18, 2), CtSlot(8, 4));
  mapping.add(CtSlot(29, 1), CtSlot(8, 5));
  mapping.add(CtSlot(22, 0), CtSlot(8, 6));
  mapping.add(CtSlot(3, 2), CtSlot(8, 7));
  mapping.add(CtSlot(19, 6), CtSlot(9, 0));
  mapping.add(CtSlot(25, 6), CtSlot(9, 1));
  mapping.add(CtSlot(0, 6), CtSlot(9, 2));
  mapping.add(CtSlot(30, 4), CtSlot(9, 3));
  mapping.add(CtSlot(17, 5), CtSlot(9, 4));
  mapping.add(CtSlot(19, 5), CtSlot(9, 5));
  mapping.add(CtSlot(4, 7), CtSlot(9, 6));
  mapping.add(CtSlot(29, 0), CtSlot(9, 7));
  mapping.add(CtSlot(20, 5), CtSlot(10, 0));
  mapping.add(CtSlot(26, 3), CtSlot(10, 1));
  mapping.add(CtSlot(8, 3), CtSlot(10, 2));
  mapping.add(CtSlot(1, 5), CtSlot(10, 3));
  mapping.add(CtSlot(21, 1), CtSlot(10, 4));
  mapping.add(CtSlot(25, 4), CtSlot(10, 5));
  mapping.add(CtSlot(4, 1), CtSlot(10, 6));
  mapping.add(CtSlot(6, 6), CtSlot(10, 7));
  mapping.add(CtSlot(4, 0), CtSlot(11, 0));
  mapping.add(CtSlot(12, 1), CtSlot(11, 1));
  mapping.add(CtSlot(30, 7), CtSlot(11, 2));
  mapping.add(CtSlot(27, 7), CtSlot(11, 3));
  mapping.add(CtSlot(6, 0), CtSlot(11, 4));
  mapping.add(CtSlot(3, 7), CtSlot(11, 5));
  mapping.add(CtSlot(10, 1), CtSlot(11, 6));
  mapping.add(CtSlot(17, 4), CtSlot(11, 7));
  mapping.add(CtSlot(19, 6), CtSlot(12, 0));
  mapping.add(CtSlot(2, 7), CtSlot(12, 1));
  mapping.add(CtSlot(22, 7), CtSlot(12, 2));
  mapping.add(CtSlot(14, 2), CtSlot(12, 3));
  mapping.add(CtSlot(27, 3), CtSlot(12, 4));
  mapping.add(CtSlot(0, 2), CtSlot(12, 5));
  mapping.add(CtSlot(10, 6), CtSlot(12, 6));
  mapping.add(CtSlot(27, 2), CtSlot(12, 7));
  mapping.add(CtSlot(2, 0), CtSlot(13, 0));
  mapping.add(CtSlot(30, 3), CtSlot(13, 1));
  mapping.add(CtSlot(2, 1), CtSlot(13, 2));
  mapping.add(CtSlot(18, 5), CtSlot(13, 3));
  mapping.add(CtSlot(14, 1), CtSlot(13, 4));
  mapping.add(CtSlot(0, 7), CtSlot(13, 5));
  mapping.add(CtSlot(11, 0), CtSlot(13, 6));
  mapping.add(CtSlot(28, 3), CtSlot(13, 7));
  mapping.add(CtSlot(14, 4), CtSlot(14, 0));
  mapping.add(CtSlot(26, 2), CtSlot(14, 1));
  mapping.add(CtSlot(5, 0), CtSlot(14, 2));
  mapping.add(CtSlot(7, 3), CtSlot(14, 3));
  mapping.add(CtSlot(6, 3), CtSlot(14, 4));
  mapping.add(CtSlot(12, 4), CtSlot(14, 5));
  mapping.add(CtSlot(28, 5), CtSlot(14, 6));
  mapping.add(CtSlot(13, 1), CtSlot(14, 7));
  mapping.add(CtSlot(26, 3), CtSlot(15, 0));
  mapping.add(CtSlot(16, 0), CtSlot(15, 1));
  mapping.add(CtSlot(24, 5), CtSlot(15, 2));
  mapping.add(CtSlot(4, 6), CtSlot(15, 3));
  mapping.add(CtSlot(8, 5), CtSlot(15, 4));
  mapping.add(CtSlot(9, 0), CtSlot(15, 5));
  mapping.add(CtSlot(19, 7), CtSlot(15, 6));
  mapping.add(CtSlot(21, 0), CtSlot(15, 7));
  mapping.add(CtSlot(5, 7), CtSlot(16, 0));
  mapping.add(CtSlot(16, 5), CtSlot(16, 1));
  mapping.add(CtSlot(17, 4), CtSlot(16, 2));
  mapping.add(CtSlot(11, 3), CtSlot(16, 3));
  mapping.add(CtSlot(26, 0), CtSlot(16, 4));
  mapping.add(CtSlot(26, 0), CtSlot(16, 5));
  mapping.add(CtSlot(8, 1), CtSlot(16, 6));
  mapping.add(CtSlot(12, 0), CtSlot(16, 7));
  mapping.add(CtSlot(21, 7), CtSlot(17, 0));
  mapping.add(CtSlot(26, 0), CtSlot(17, 1));
  mapping.add(CtSlot(7, 1), CtSlot(17, 2));
  mapping.add(CtSlot(12, 7), CtSlot(17, 3));
  mapping.add(CtSlot(6, 0), CtSlot(17, 4));
  mapping.add(CtSlot(3, 2), CtSlot(17, 5));
  mapping.add(CtSlot(10, 3), CtSlot(17, 6));
  mapping.add(CtSlot(9, 4), CtSlot(17, 7));
  mapping.add(CtSlot(9, 4), CtSlot(18, 0));
  mapping.add(CtSlot(22, 3), CtSlot(18, 1));
  mapping.add(CtSlot(1, 4), CtSlot(18, 2));
  mapping.add(CtSlot(8, 6), CtSlot(18, 3));
  mapping.add(CtSlot(16, 1), CtSlot(18, 4));
  mapping.add(CtSlot(18, 6), CtSlot(18, 5));
  mapping.add(CtSlot(23, 3), CtSlot(18, 6));
  mapping.add(CtSlot(0, 2), CtSlot(18, 7));
  mapping.add(CtSlot(30, 6), CtSlot(19, 0));
  mapping.add(CtSlot(9, 3), CtSlot(19, 1));
  mapping.add(CtSlot(24, 2), CtSlot(19, 2));
  mapping.add(CtSlot(3, 1), CtSlot(19, 3));
  mapping.add(CtSlot(24, 2), CtSlot(19, 4));
  mapping.add(CtSlot(5, 5), CtSlot(19, 5));
  mapping.add(CtSlot(14, 4), CtSlot(19, 6));
  mapping.add(CtSlot(5, 7), CtSlot(19, 7));
  mapping.add(CtSlot(17, 0), CtSlot(20, 0));
  mapping.add(CtSlot(21, 5), CtSlot(20, 1));
  mapping.add(CtSlot(28, 5), CtSlot(20, 2));
  mapping.add(CtSlot(23, 1), CtSlot(20, 3));
  mapping.add(CtSlot(29, 1), CtSlot(20, 4));
  mapping.add(CtSlot(30, 4), CtSlot(20, 5));
  mapping.add(CtSlot(6, 2), CtSlot(20, 6));
  mapping.add(CtSlot(24, 3), CtSlot(20, 7));
  mapping.add(CtSlot(19, 2), CtSlot(21, 0));
  mapping.add(CtSlot(16, 5), CtSlot(21, 1));
  mapping.add(CtSlot(12, 0), CtSlot(21, 2));
  mapping.add(CtSlot(0, 4), CtSlot(21, 3));
  mapping.add(CtSlot(20, 1), CtSlot(21, 4));
  mapping.add(CtSlot(6, 7), CtSlot(21, 5));
  mapping.add(CtSlot(7, 2), CtSlot(21, 6));
  mapping.add(CtSlot(30, 3), CtSlot(21, 7));
  mapping.add(CtSlot(25, 7), CtSlot(22, 0));
  mapping.add(CtSlot(11, 1), CtSlot(22, 1));
  mapping.add(CtSlot(22, 6), CtSlot(22, 2));
  mapping.add(CtSlot(24, 4), CtSlot(22, 3));
  mapping.add(CtSlot(16, 3), CtSlot(22, 4));
  mapping.add(CtSlot(0, 0), CtSlot(22, 5));
  mapping.add(CtSlot(11, 7), CtSlot(22, 6));
  mapping.add(CtSlot(27, 0), CtSlot(22, 7));
  mapping.add(CtSlot(25, 1), CtSlot(23, 0));
  mapping.add(CtSlot(19, 2), CtSlot(23, 1));
  mapping.add(CtSlot(13, 0), CtSlot(23, 2));
  mapping.add(CtSlot(7, 0), CtSlot(23, 3));
  mapping.add(CtSlot(17, 2), CtSlot(23, 4));
  mapping.add(CtSlot(22, 1), CtSlot(23, 5));
  mapping.add(CtSlot(17, 2), CtSlot(23, 6));
  mapping.add(CtSlot(21, 7), CtSlot(23, 7));
  mapping.add(CtSlot(10, 2), CtSlot(24, 0));
  mapping.add(CtSlot(7, 7), CtSlot(24, 1));
  mapping.add(CtSlot(8, 2), CtSlot(24, 2));
  mapping.add(CtSlot(23, 4), CtSlot(24, 3));
  mapping.add(CtSlot(26, 7), CtSlot(24, 4));
  mapping.add(CtSlot(7, 5), CtSlot(24, 5));
  mapping.add(CtSlot(10, 2), CtSlot(24, 6));
  mapping.add(CtSlot(23, 6), CtSlot(24, 7));
  mapping.add(CtSlot(27, 0), CtSlot(25, 0));
  mapping.add(CtSlot(28, 1), CtSlot(25, 1));
  mapping.add(CtSlot(12, 3), CtSlot(25, 2));
  mapping.add(CtSlot(4, 5), CtSlot(25, 3));
  mapping.add(CtSlot(20, 4), CtSlot(25, 4));
  mapping.add(CtSlot(5, 7), CtSlot(25, 5));
  mapping.add(CtSlot(16, 4), CtSlot(25, 6));
  mapping.add(CtSlot(10, 6), CtSlot(25, 7));
  mapping.add(CtSlot(30, 3), CtSlot(26, 0));
  mapping.add(CtSlot(24, 7), CtSlot(26, 1));
  mapping.add(CtSlot(13, 3), CtSlot(26, 2));
  mapping.add(CtSlot(6, 2), CtSlot(26, 3));
  mapping.add(CtSlot(10, 6), CtSlot(26, 4));
  mapping.add(CtSlot(13, 5), CtSlot(26, 5));
  mapping.add(CtSlot(4, 0), CtSlot(26, 6));
  mapping.add(CtSlot(22, 1), CtSlot(26, 7));
  mapping.add(CtSlot(30, 1), CtSlot(27, 0));
  mapping.add(CtSlot(2, 5), CtSlot(27, 1));
  mapping.add(CtSlot(15, 7), CtSlot(27, 2));
  mapping.add(CtSlot(8, 4), CtSlot(27, 3));
  mapping.add(CtSlot(18, 5), CtSlot(27, 4));
  mapping.add(CtSlot(2, 7), CtSlot(27, 5));
  mapping.add(CtSlot(21, 2), CtSlot(27, 6));
  mapping.add(CtSlot(15, 0), CtSlot(27, 7));
  mapping.add(CtSlot(26, 0), CtSlot(28, 0));
  mapping.add(CtSlot(24, 7), CtSlot(28, 1));
  mapping.add(CtSlot(6, 0), CtSlot(28, 2));
  mapping.add(CtSlot(19, 5), CtSlot(28, 3));
  mapping.add(CtSlot(8, 4), CtSlot(28, 4));
  mapping.add(CtSlot(24, 0), CtSlot(28, 5));
  mapping.add(CtSlot(25, 1), CtSlot(28, 6));
  mapping.add(CtSlot(15, 1), CtSlot(28, 7));
  mapping.add(CtSlot(19, 0), CtSlot(29, 0));
  mapping.add(CtSlot(21, 1), CtSlot(29, 1));
  mapping.add(CtSlot(16, 3), CtSlot(29, 2));
  mapping.add(CtSlot(10, 7), CtSlot(29, 3));
  mapping.add(CtSlot(21, 1), CtSlot(29, 4));
  mapping.add(CtSlot(2, 2), CtSlot(29, 5));
  mapping.add(CtSlot(8, 1), CtSlot(29, 6));
  mapping.add(CtSlot(14, 1), CtSlot(29, 7));
  mapping.add(CtSlot(22, 4), CtSlot(30, 0));
  mapping.add(CtSlot(2, 6), CtSlot(30, 1));
  mapping.add(CtSlot(20, 2), CtSlot(30, 2));
  mapping.add(CtSlot(4, 4), CtSlot(30, 3));
  mapping.add(CtSlot(11, 1), CtSlot(30, 4));
  mapping.add(CtSlot(11, 0), CtSlot(30, 5));
  mapping.add(CtSlot(21, 0), CtSlot(30, 6));
  mapping.add(CtSlot(14, 7), CtSlot(30, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_15) {
  int64_t numCts = 31;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(9, 1), CtSlot(0, 0));
  mapping.add(CtSlot(22, 3), CtSlot(0, 1));
  mapping.add(CtSlot(3, 7), CtSlot(0, 2));
  mapping.add(CtSlot(26, 6), CtSlot(0, 3));
  mapping.add(CtSlot(21, 0), CtSlot(0, 4));
  mapping.add(CtSlot(27, 2), CtSlot(0, 5));
  mapping.add(CtSlot(0, 7), CtSlot(0, 6));
  mapping.add(CtSlot(15, 4), CtSlot(0, 7));
  mapping.add(CtSlot(12, 5), CtSlot(1, 0));
  mapping.add(CtSlot(13, 5), CtSlot(1, 1));
  mapping.add(CtSlot(9, 2), CtSlot(1, 2));
  mapping.add(CtSlot(13, 2), CtSlot(1, 3));
  mapping.add(CtSlot(2, 6), CtSlot(1, 4));
  mapping.add(CtSlot(12, 6), CtSlot(1, 5));
  mapping.add(CtSlot(17, 5), CtSlot(1, 6));
  mapping.add(CtSlot(20, 7), CtSlot(1, 7));
  mapping.add(CtSlot(0, 2), CtSlot(2, 0));
  mapping.add(CtSlot(7, 1), CtSlot(2, 1));
  mapping.add(CtSlot(3, 2), CtSlot(2, 2));
  mapping.add(CtSlot(5, 6), CtSlot(2, 3));
  mapping.add(CtSlot(2, 1), CtSlot(2, 4));
  mapping.add(CtSlot(23, 3), CtSlot(2, 5));
  mapping.add(CtSlot(14, 5), CtSlot(2, 6));
  mapping.add(CtSlot(11, 5), CtSlot(2, 7));
  mapping.add(CtSlot(18, 0), CtSlot(3, 0));
  mapping.add(CtSlot(26, 0), CtSlot(3, 1));
  mapping.add(CtSlot(3, 2), CtSlot(3, 2));
  mapping.add(CtSlot(7, 3), CtSlot(3, 3));
  mapping.add(CtSlot(21, 0), CtSlot(3, 4));
  mapping.add(CtSlot(6, 1), CtSlot(3, 5));
  mapping.add(CtSlot(2, 5), CtSlot(3, 6));
  mapping.add(CtSlot(25, 5), CtSlot(3, 7));
  mapping.add(CtSlot(8, 7), CtSlot(4, 0));
  mapping.add(CtSlot(8, 2), CtSlot(4, 1));
  mapping.add(CtSlot(3, 3), CtSlot(4, 2));
  mapping.add(CtSlot(23, 4), CtSlot(4, 3));
  mapping.add(CtSlot(1, 1), CtSlot(4, 4));
  mapping.add(CtSlot(17, 1), CtSlot(4, 5));
  mapping.add(CtSlot(27, 1), CtSlot(4, 6));
  mapping.add(CtSlot(2, 1), CtSlot(4, 7));
  mapping.add(CtSlot(16, 6), CtSlot(5, 0));
  mapping.add(CtSlot(16, 2), CtSlot(5, 1));
  mapping.add(CtSlot(19, 7), CtSlot(5, 2));
  mapping.add(CtSlot(11, 7), CtSlot(5, 3));
  mapping.add(CtSlot(16, 0), CtSlot(5, 4));
  mapping.add(CtSlot(18, 7), CtSlot(5, 5));
  mapping.add(CtSlot(7, 6), CtSlot(5, 6));
  mapping.add(CtSlot(2, 2), CtSlot(5, 7));
  mapping.add(CtSlot(15, 6), CtSlot(6, 0));
  mapping.add(CtSlot(23, 3), CtSlot(6, 1));
  mapping.add(CtSlot(24, 4), CtSlot(6, 2));
  mapping.add(CtSlot(5, 7), CtSlot(6, 3));
  mapping.add(CtSlot(12, 2), CtSlot(6, 4));
  mapping.add(CtSlot(19, 1), CtSlot(6, 5));
  mapping.add(CtSlot(11, 6), CtSlot(6, 6));
  mapping.add(CtSlot(18, 2), CtSlot(6, 7));
  mapping.add(CtSlot(29, 3), CtSlot(7, 0));
  mapping.add(CtSlot(19, 0), CtSlot(7, 1));
  mapping.add(CtSlot(24, 3), CtSlot(7, 2));
  mapping.add(CtSlot(26, 6), CtSlot(7, 3));
  mapping.add(CtSlot(1, 7), CtSlot(7, 4));
  mapping.add(CtSlot(13, 0), CtSlot(7, 5));
  mapping.add(CtSlot(5, 4), CtSlot(7, 6));
  mapping.add(CtSlot(5, 7), CtSlot(7, 7));
  mapping.add(CtSlot(8, 0), CtSlot(8, 0));
  mapping.add(CtSlot(13, 0), CtSlot(8, 1));
  mapping.add(CtSlot(8, 4), CtSlot(8, 2));
  mapping.add(CtSlot(9, 0), CtSlot(8, 3));
  mapping.add(CtSlot(18, 2), CtSlot(8, 4));
  mapping.add(CtSlot(29, 1), CtSlot(8, 5));
  mapping.add(CtSlot(22, 0), CtSlot(8, 6));
  mapping.add(CtSlot(3, 2), CtSlot(8, 7));
  mapping.add(CtSlot(19, 6), CtSlot(9, 0));
  mapping.add(CtSlot(25, 6), CtSlot(9, 1));
  mapping.add(CtSlot(0, 6), CtSlot(9, 2));
  mapping.add(CtSlot(30, 4), CtSlot(9, 3));
  mapping.add(CtSlot(17, 5), CtSlot(9, 4));
  mapping.add(CtSlot(19, 5), CtSlot(9, 5));
  mapping.add(CtSlot(4, 7), CtSlot(9, 6));
  mapping.add(CtSlot(29, 0), CtSlot(9, 7));
  mapping.add(CtSlot(20, 5), CtSlot(10, 0));
  mapping.add(CtSlot(26, 3), CtSlot(10, 1));
  mapping.add(CtSlot(8, 3), CtSlot(10, 2));
  mapping.add(CtSlot(1, 5), CtSlot(10, 3));
  mapping.add(CtSlot(21, 1), CtSlot(10, 4));
  mapping.add(CtSlot(25, 4), CtSlot(10, 5));
  mapping.add(CtSlot(4, 1), CtSlot(10, 6));
  mapping.add(CtSlot(6, 6), CtSlot(10, 7));
  mapping.add(CtSlot(4, 0), CtSlot(11, 0));
  mapping.add(CtSlot(12, 1), CtSlot(11, 1));
  mapping.add(CtSlot(30, 7), CtSlot(11, 2));
  mapping.add(CtSlot(27, 7), CtSlot(11, 3));
  mapping.add(CtSlot(6, 0), CtSlot(11, 4));
  mapping.add(CtSlot(3, 7), CtSlot(11, 5));
  mapping.add(CtSlot(10, 1), CtSlot(11, 6));
  mapping.add(CtSlot(17, 4), CtSlot(11, 7));
  mapping.add(CtSlot(19, 6), CtSlot(12, 0));
  mapping.add(CtSlot(2, 7), CtSlot(12, 1));
  mapping.add(CtSlot(22, 7), CtSlot(12, 2));
  mapping.add(CtSlot(14, 2), CtSlot(12, 3));
  mapping.add(CtSlot(27, 3), CtSlot(12, 4));
  mapping.add(CtSlot(0, 2), CtSlot(12, 5));
  mapping.add(CtSlot(10, 6), CtSlot(12, 6));
  mapping.add(CtSlot(27, 2), CtSlot(12, 7));
  mapping.add(CtSlot(2, 0), CtSlot(13, 0));
  mapping.add(CtSlot(30, 3), CtSlot(13, 1));
  mapping.add(CtSlot(2, 1), CtSlot(13, 2));
  mapping.add(CtSlot(18, 5), CtSlot(13, 3));
  mapping.add(CtSlot(14, 1), CtSlot(13, 4));
  mapping.add(CtSlot(0, 7), CtSlot(13, 5));
  mapping.add(CtSlot(11, 0), CtSlot(13, 6));
  mapping.add(CtSlot(28, 3), CtSlot(13, 7));
  mapping.add(CtSlot(14, 4), CtSlot(14, 0));
  mapping.add(CtSlot(26, 2), CtSlot(14, 1));
  mapping.add(CtSlot(5, 0), CtSlot(14, 2));
  mapping.add(CtSlot(7, 3), CtSlot(14, 3));
  mapping.add(CtSlot(6, 3), CtSlot(14, 4));
  mapping.add(CtSlot(12, 4), CtSlot(14, 5));
  mapping.add(CtSlot(28, 5), CtSlot(14, 6));
  mapping.add(CtSlot(13, 1), CtSlot(14, 7));
  mapping.add(CtSlot(26, 3), CtSlot(15, 0));
  mapping.add(CtSlot(16, 0), CtSlot(15, 1));
  mapping.add(CtSlot(24, 5), CtSlot(15, 2));
  mapping.add(CtSlot(4, 6), CtSlot(15, 3));
  mapping.add(CtSlot(8, 5), CtSlot(15, 4));
  mapping.add(CtSlot(9, 0), CtSlot(15, 5));
  mapping.add(CtSlot(19, 7), CtSlot(15, 6));
  mapping.add(CtSlot(21, 0), CtSlot(15, 7));
  mapping.add(CtSlot(5, 7), CtSlot(16, 0));
  mapping.add(CtSlot(16, 5), CtSlot(16, 1));
  mapping.add(CtSlot(17, 4), CtSlot(16, 2));
  mapping.add(CtSlot(11, 3), CtSlot(16, 3));
  mapping.add(CtSlot(26, 0), CtSlot(16, 4));
  mapping.add(CtSlot(26, 0), CtSlot(16, 5));
  mapping.add(CtSlot(8, 1), CtSlot(16, 6));
  mapping.add(CtSlot(12, 0), CtSlot(16, 7));
  mapping.add(CtSlot(21, 7), CtSlot(17, 0));
  mapping.add(CtSlot(26, 0), CtSlot(17, 1));
  mapping.add(CtSlot(7, 1), CtSlot(17, 2));
  mapping.add(CtSlot(12, 7), CtSlot(17, 3));
  mapping.add(CtSlot(6, 0), CtSlot(17, 4));
  mapping.add(CtSlot(3, 2), CtSlot(17, 5));
  mapping.add(CtSlot(10, 3), CtSlot(17, 6));
  mapping.add(CtSlot(9, 4), CtSlot(17, 7));
  mapping.add(CtSlot(9, 4), CtSlot(18, 0));
  mapping.add(CtSlot(22, 3), CtSlot(18, 1));
  mapping.add(CtSlot(1, 4), CtSlot(18, 2));
  mapping.add(CtSlot(8, 6), CtSlot(18, 3));
  mapping.add(CtSlot(16, 1), CtSlot(18, 4));
  mapping.add(CtSlot(18, 6), CtSlot(18, 5));
  mapping.add(CtSlot(23, 3), CtSlot(18, 6));
  mapping.add(CtSlot(0, 2), CtSlot(18, 7));
  mapping.add(CtSlot(30, 6), CtSlot(19, 0));
  mapping.add(CtSlot(9, 3), CtSlot(19, 1));
  mapping.add(CtSlot(24, 2), CtSlot(19, 2));
  mapping.add(CtSlot(3, 1), CtSlot(19, 3));
  mapping.add(CtSlot(24, 2), CtSlot(19, 4));
  mapping.add(CtSlot(5, 5), CtSlot(19, 5));
  mapping.add(CtSlot(14, 4), CtSlot(19, 6));
  mapping.add(CtSlot(5, 7), CtSlot(19, 7));
  mapping.add(CtSlot(17, 0), CtSlot(20, 0));
  mapping.add(CtSlot(21, 5), CtSlot(20, 1));
  mapping.add(CtSlot(28, 5), CtSlot(20, 2));
  mapping.add(CtSlot(23, 1), CtSlot(20, 3));
  mapping.add(CtSlot(29, 1), CtSlot(20, 4));
  mapping.add(CtSlot(30, 4), CtSlot(20, 5));
  mapping.add(CtSlot(6, 2), CtSlot(20, 6));
  mapping.add(CtSlot(24, 3), CtSlot(20, 7));
  mapping.add(CtSlot(19, 2), CtSlot(21, 0));
  mapping.add(CtSlot(16, 5), CtSlot(21, 1));
  mapping.add(CtSlot(12, 0), CtSlot(21, 2));
  mapping.add(CtSlot(0, 4), CtSlot(21, 3));
  mapping.add(CtSlot(20, 1), CtSlot(21, 4));
  mapping.add(CtSlot(6, 7), CtSlot(21, 5));
  mapping.add(CtSlot(7, 2), CtSlot(21, 6));
  mapping.add(CtSlot(30, 3), CtSlot(21, 7));
  mapping.add(CtSlot(25, 7), CtSlot(22, 0));
  mapping.add(CtSlot(11, 1), CtSlot(22, 1));
  mapping.add(CtSlot(22, 6), CtSlot(22, 2));
  mapping.add(CtSlot(24, 4), CtSlot(22, 3));
  mapping.add(CtSlot(16, 3), CtSlot(22, 4));
  mapping.add(CtSlot(0, 0), CtSlot(22, 5));
  mapping.add(CtSlot(11, 7), CtSlot(22, 6));
  mapping.add(CtSlot(27, 0), CtSlot(22, 7));
  mapping.add(CtSlot(25, 1), CtSlot(23, 0));
  mapping.add(CtSlot(19, 2), CtSlot(23, 1));
  mapping.add(CtSlot(13, 0), CtSlot(23, 2));
  mapping.add(CtSlot(7, 0), CtSlot(23, 3));
  mapping.add(CtSlot(17, 2), CtSlot(23, 4));
  mapping.add(CtSlot(22, 1), CtSlot(23, 5));
  mapping.add(CtSlot(17, 2), CtSlot(23, 6));
  mapping.add(CtSlot(21, 7), CtSlot(23, 7));
  mapping.add(CtSlot(10, 2), CtSlot(24, 0));
  mapping.add(CtSlot(7, 7), CtSlot(24, 1));
  mapping.add(CtSlot(8, 2), CtSlot(24, 2));
  mapping.add(CtSlot(23, 4), CtSlot(24, 3));
  mapping.add(CtSlot(26, 7), CtSlot(24, 4));
  mapping.add(CtSlot(7, 5), CtSlot(24, 5));
  mapping.add(CtSlot(10, 2), CtSlot(24, 6));
  mapping.add(CtSlot(23, 6), CtSlot(24, 7));
  mapping.add(CtSlot(27, 0), CtSlot(25, 0));
  mapping.add(CtSlot(28, 1), CtSlot(25, 1));
  mapping.add(CtSlot(12, 3), CtSlot(25, 2));
  mapping.add(CtSlot(4, 5), CtSlot(25, 3));
  mapping.add(CtSlot(20, 4), CtSlot(25, 4));
  mapping.add(CtSlot(5, 7), CtSlot(25, 5));
  mapping.add(CtSlot(16, 4), CtSlot(25, 6));
  mapping.add(CtSlot(10, 6), CtSlot(25, 7));
  mapping.add(CtSlot(30, 3), CtSlot(26, 0));
  mapping.add(CtSlot(24, 7), CtSlot(26, 1));
  mapping.add(CtSlot(13, 3), CtSlot(26, 2));
  mapping.add(CtSlot(6, 2), CtSlot(26, 3));
  mapping.add(CtSlot(10, 6), CtSlot(26, 4));
  mapping.add(CtSlot(13, 5), CtSlot(26, 5));
  mapping.add(CtSlot(4, 0), CtSlot(26, 6));
  mapping.add(CtSlot(22, 1), CtSlot(26, 7));
  mapping.add(CtSlot(30, 1), CtSlot(27, 0));
  mapping.add(CtSlot(2, 5), CtSlot(27, 1));
  mapping.add(CtSlot(15, 7), CtSlot(27, 2));
  mapping.add(CtSlot(8, 4), CtSlot(27, 3));
  mapping.add(CtSlot(18, 5), CtSlot(27, 4));
  mapping.add(CtSlot(2, 7), CtSlot(27, 5));
  mapping.add(CtSlot(21, 2), CtSlot(27, 6));
  mapping.add(CtSlot(15, 0), CtSlot(27, 7));
  mapping.add(CtSlot(26, 0), CtSlot(28, 0));
  mapping.add(CtSlot(24, 7), CtSlot(28, 1));
  mapping.add(CtSlot(6, 0), CtSlot(28, 2));
  mapping.add(CtSlot(19, 5), CtSlot(28, 3));
  mapping.add(CtSlot(8, 4), CtSlot(28, 4));
  mapping.add(CtSlot(24, 0), CtSlot(28, 5));
  mapping.add(CtSlot(25, 1), CtSlot(28, 6));
  mapping.add(CtSlot(15, 1), CtSlot(28, 7));
  mapping.add(CtSlot(19, 0), CtSlot(29, 0));
  mapping.add(CtSlot(21, 1), CtSlot(29, 1));
  mapping.add(CtSlot(16, 3), CtSlot(29, 2));
  mapping.add(CtSlot(10, 7), CtSlot(29, 3));
  mapping.add(CtSlot(21, 1), CtSlot(29, 4));
  mapping.add(CtSlot(2, 0), CtSlot(29, 5));
  mapping.add(CtSlot(8, 1), CtSlot(29, 6));
  mapping.add(CtSlot(14, 1), CtSlot(29, 7));
  mapping.add(CtSlot(22, 4), CtSlot(30, 0));
  mapping.add(CtSlot(2, 6), CtSlot(30, 1));
  mapping.add(CtSlot(20, 2), CtSlot(30, 2));
  mapping.add(CtSlot(4, 4), CtSlot(30, 3));
  mapping.add(CtSlot(11, 1), CtSlot(30, 4));
  mapping.add(CtSlot(11, 0), CtSlot(30, 5));
  mapping.add(CtSlot(21, 0), CtSlot(30, 6));
  mapping.add(CtSlot(14, 7), CtSlot(30, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_16) {
  int64_t numCts = 31;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(9, 1), CtSlot(0, 0));
  mapping.add(CtSlot(22, 3), CtSlot(0, 1));
  mapping.add(CtSlot(3, 7), CtSlot(0, 2));
  mapping.add(CtSlot(26, 6), CtSlot(0, 3));
  mapping.add(CtSlot(21, 0), CtSlot(0, 4));
  mapping.add(CtSlot(27, 2), CtSlot(0, 5));
  mapping.add(CtSlot(0, 7), CtSlot(0, 6));
  mapping.add(CtSlot(15, 4), CtSlot(0, 7));
  mapping.add(CtSlot(12, 5), CtSlot(1, 0));
  mapping.add(CtSlot(13, 5), CtSlot(1, 1));
  mapping.add(CtSlot(9, 2), CtSlot(1, 2));
  mapping.add(CtSlot(13, 2), CtSlot(1, 3));
  mapping.add(CtSlot(2, 6), CtSlot(1, 4));
  mapping.add(CtSlot(12, 6), CtSlot(1, 5));
  mapping.add(CtSlot(17, 5), CtSlot(1, 6));
  mapping.add(CtSlot(20, 7), CtSlot(1, 7));
  mapping.add(CtSlot(0, 2), CtSlot(2, 0));
  mapping.add(CtSlot(7, 1), CtSlot(2, 1));
  mapping.add(CtSlot(3, 2), CtSlot(2, 2));
  mapping.add(CtSlot(5, 6), CtSlot(2, 3));
  mapping.add(CtSlot(2, 1), CtSlot(2, 4));
  mapping.add(CtSlot(23, 3), CtSlot(2, 5));
  mapping.add(CtSlot(14, 5), CtSlot(2, 6));
  mapping.add(CtSlot(11, 5), CtSlot(2, 7));
  mapping.add(CtSlot(18, 0), CtSlot(3, 0));
  mapping.add(CtSlot(26, 0), CtSlot(3, 1));
  mapping.add(CtSlot(3, 2), CtSlot(3, 2));
  mapping.add(CtSlot(7, 3), CtSlot(3, 3));
  mapping.add(CtSlot(21, 0), CtSlot(3, 4));
  mapping.add(CtSlot(6, 1), CtSlot(3, 5));
  mapping.add(CtSlot(2, 5), CtSlot(3, 6));
  mapping.add(CtSlot(25, 5), CtSlot(3, 7));
  mapping.add(CtSlot(8, 7), CtSlot(4, 0));
  mapping.add(CtSlot(8, 2), CtSlot(4, 1));
  mapping.add(CtSlot(3, 3), CtSlot(4, 2));
  mapping.add(CtSlot(23, 4), CtSlot(4, 3));
  mapping.add(CtSlot(1, 1), CtSlot(4, 4));
  mapping.add(CtSlot(17, 1), CtSlot(4, 5));
  mapping.add(CtSlot(27, 1), CtSlot(4, 6));
  mapping.add(CtSlot(2, 1), CtSlot(4, 7));
  mapping.add(CtSlot(16, 6), CtSlot(5, 0));
  mapping.add(CtSlot(16, 2), CtSlot(5, 1));
  mapping.add(CtSlot(19, 7), CtSlot(5, 2));
  mapping.add(CtSlot(11, 7), CtSlot(5, 3));
  mapping.add(CtSlot(16, 0), CtSlot(5, 4));
  mapping.add(CtSlot(18, 7), CtSlot(5, 5));
  mapping.add(CtSlot(7, 6), CtSlot(5, 6));
  mapping.add(CtSlot(2, 2), CtSlot(5, 7));
  mapping.add(CtSlot(15, 6), CtSlot(6, 0));
  mapping.add(CtSlot(23, 3), CtSlot(6, 1));
  mapping.add(CtSlot(24, 4), CtSlot(6, 2));
  mapping.add(CtSlot(5, 7), CtSlot(6, 3));
  mapping.add(CtSlot(12, 2), CtSlot(6, 4));
  mapping.add(CtSlot(19, 1), CtSlot(6, 5));
  mapping.add(CtSlot(11, 6), CtSlot(6, 6));
  mapping.add(CtSlot(18, 2), CtSlot(6, 7));
  mapping.add(CtSlot(29, 3), CtSlot(7, 0));
  mapping.add(CtSlot(19, 0), CtSlot(7, 1));
  mapping.add(CtSlot(24, 3), CtSlot(7, 2));
  mapping.add(CtSlot(26, 6), CtSlot(7, 3));
  mapping.add(CtSlot(1, 7), CtSlot(7, 4));
  mapping.add(CtSlot(13, 0), CtSlot(7, 5));
  mapping.add(CtSlot(5, 4), CtSlot(7, 6));
  mapping.add(CtSlot(5, 7), CtSlot(7, 7));
  mapping.add(CtSlot(8, 0), CtSlot(8, 0));
  mapping.add(CtSlot(13, 0), CtSlot(8, 1));
  mapping.add(CtSlot(8, 4), CtSlot(8, 2));
  mapping.add(CtSlot(9, 0), CtSlot(8, 3));
  mapping.add(CtSlot(18, 2), CtSlot(8, 4));
  mapping.add(CtSlot(29, 1), CtSlot(8, 5));
  mapping.add(CtSlot(22, 0), CtSlot(8, 6));
  mapping.add(CtSlot(3, 2), CtSlot(8, 7));
  mapping.add(CtSlot(19, 6), CtSlot(9, 0));
  mapping.add(CtSlot(25, 6), CtSlot(9, 1));
  mapping.add(CtSlot(0, 6), CtSlot(9, 2));
  mapping.add(CtSlot(30, 4), CtSlot(9, 3));
  mapping.add(CtSlot(17, 5), CtSlot(9, 4));
  mapping.add(CtSlot(19, 5), CtSlot(9, 5));
  mapping.add(CtSlot(4, 7), CtSlot(9, 6));
  mapping.add(CtSlot(29, 0), CtSlot(9, 7));
  mapping.add(CtSlot(20, 5), CtSlot(10, 0));
  mapping.add(CtSlot(26, 3), CtSlot(10, 1));
  mapping.add(CtSlot(8, 3), CtSlot(10, 2));
  mapping.add(CtSlot(1, 5), CtSlot(10, 3));
  mapping.add(CtSlot(21, 1), CtSlot(10, 4));
  mapping.add(CtSlot(25, 4), CtSlot(10, 5));
  mapping.add(CtSlot(4, 1), CtSlot(10, 6));
  mapping.add(CtSlot(6, 6), CtSlot(10, 7));
  mapping.add(CtSlot(4, 0), CtSlot(11, 0));
  mapping.add(CtSlot(12, 1), CtSlot(11, 1));
  mapping.add(CtSlot(30, 7), CtSlot(11, 2));
  mapping.add(CtSlot(27, 7), CtSlot(11, 3));
  mapping.add(CtSlot(6, 0), CtSlot(11, 4));
  mapping.add(CtSlot(3, 7), CtSlot(11, 5));
  mapping.add(CtSlot(10, 1), CtSlot(11, 6));
  mapping.add(CtSlot(17, 4), CtSlot(11, 7));
  mapping.add(CtSlot(19, 6), CtSlot(12, 0));
  mapping.add(CtSlot(2, 7), CtSlot(12, 1));
  mapping.add(CtSlot(22, 7), CtSlot(12, 2));
  mapping.add(CtSlot(14, 2), CtSlot(12, 3));
  mapping.add(CtSlot(27, 3), CtSlot(12, 4));
  mapping.add(CtSlot(15, 2), CtSlot(12, 5));
  mapping.add(CtSlot(10, 6), CtSlot(12, 6));
  mapping.add(CtSlot(27, 2), CtSlot(12, 7));
  mapping.add(CtSlot(2, 0), CtSlot(13, 0));
  mapping.add(CtSlot(30, 3), CtSlot(13, 1));
  mapping.add(CtSlot(2, 1), CtSlot(13, 2));
  mapping.add(CtSlot(18, 5), CtSlot(13, 3));
  mapping.add(CtSlot(14, 1), CtSlot(13, 4));
  mapping.add(CtSlot(0, 7), CtSlot(13, 5));
  mapping.add(CtSlot(11, 0), CtSlot(13, 6));
  mapping.add(CtSlot(28, 3), CtSlot(13, 7));
  mapping.add(CtSlot(14, 4), CtSlot(14, 0));
  mapping.add(CtSlot(26, 2), CtSlot(14, 1));
  mapping.add(CtSlot(5, 0), CtSlot(14, 2));
  mapping.add(CtSlot(7, 3), CtSlot(14, 3));
  mapping.add(CtSlot(6, 3), CtSlot(14, 4));
  mapping.add(CtSlot(12, 4), CtSlot(14, 5));
  mapping.add(CtSlot(28, 5), CtSlot(14, 6));
  mapping.add(CtSlot(13, 1), CtSlot(14, 7));
  mapping.add(CtSlot(26, 3), CtSlot(15, 0));
  mapping.add(CtSlot(16, 0), CtSlot(15, 1));
  mapping.add(CtSlot(24, 5), CtSlot(15, 2));
  mapping.add(CtSlot(4, 6), CtSlot(15, 3));
  mapping.add(CtSlot(8, 5), CtSlot(15, 4));
  mapping.add(CtSlot(9, 0), CtSlot(15, 5));
  mapping.add(CtSlot(19, 7), CtSlot(15, 6));
  mapping.add(CtSlot(21, 0), CtSlot(15, 7));
  mapping.add(CtSlot(5, 7), CtSlot(16, 0));
  mapping.add(CtSlot(16, 5), CtSlot(16, 1));
  mapping.add(CtSlot(17, 4), CtSlot(16, 2));
  mapping.add(CtSlot(11, 3), CtSlot(16, 3));
  mapping.add(CtSlot(26, 0), CtSlot(16, 4));
  mapping.add(CtSlot(26, 0), CtSlot(16, 5));
  mapping.add(CtSlot(8, 1), CtSlot(16, 6));
  mapping.add(CtSlot(12, 0), CtSlot(16, 7));
  mapping.add(CtSlot(21, 7), CtSlot(17, 0));
  mapping.add(CtSlot(26, 0), CtSlot(17, 1));
  mapping.add(CtSlot(7, 1), CtSlot(17, 2));
  mapping.add(CtSlot(12, 7), CtSlot(17, 3));
  mapping.add(CtSlot(6, 0), CtSlot(17, 4));
  mapping.add(CtSlot(3, 2), CtSlot(17, 5));
  mapping.add(CtSlot(10, 3), CtSlot(17, 6));
  mapping.add(CtSlot(9, 4), CtSlot(17, 7));
  mapping.add(CtSlot(9, 4), CtSlot(18, 0));
  mapping.add(CtSlot(22, 3), CtSlot(18, 1));
  mapping.add(CtSlot(1, 4), CtSlot(18, 2));
  mapping.add(CtSlot(8, 6), CtSlot(18, 3));
  mapping.add(CtSlot(16, 1), CtSlot(18, 4));
  mapping.add(CtSlot(18, 6), CtSlot(18, 5));
  mapping.add(CtSlot(23, 3), CtSlot(18, 6));
  mapping.add(CtSlot(0, 2), CtSlot(18, 7));
  mapping.add(CtSlot(30, 6), CtSlot(19, 0));
  mapping.add(CtSlot(9, 3), CtSlot(19, 1));
  mapping.add(CtSlot(24, 2), CtSlot(19, 2));
  mapping.add(CtSlot(3, 1), CtSlot(19, 3));
  mapping.add(CtSlot(24, 2), CtSlot(19, 4));
  mapping.add(CtSlot(5, 5), CtSlot(19, 5));
  mapping.add(CtSlot(14, 4), CtSlot(19, 6));
  mapping.add(CtSlot(5, 7), CtSlot(19, 7));
  mapping.add(CtSlot(17, 0), CtSlot(20, 0));
  mapping.add(CtSlot(21, 5), CtSlot(20, 1));
  mapping.add(CtSlot(28, 5), CtSlot(20, 2));
  mapping.add(CtSlot(23, 1), CtSlot(20, 3));
  mapping.add(CtSlot(29, 1), CtSlot(20, 4));
  mapping.add(CtSlot(30, 4), CtSlot(20, 5));
  mapping.add(CtSlot(6, 2), CtSlot(20, 6));
  mapping.add(CtSlot(24, 3), CtSlot(20, 7));
  mapping.add(CtSlot(19, 2), CtSlot(21, 0));
  mapping.add(CtSlot(16, 5), CtSlot(21, 1));
  mapping.add(CtSlot(12, 0), CtSlot(21, 2));
  mapping.add(CtSlot(0, 4), CtSlot(21, 3));
  mapping.add(CtSlot(20, 1), CtSlot(21, 4));
  mapping.add(CtSlot(6, 7), CtSlot(21, 5));
  mapping.add(CtSlot(7, 2), CtSlot(21, 6));
  mapping.add(CtSlot(30, 3), CtSlot(21, 7));
  mapping.add(CtSlot(25, 7), CtSlot(22, 0));
  mapping.add(CtSlot(11, 1), CtSlot(22, 1));
  mapping.add(CtSlot(22, 6), CtSlot(22, 2));
  mapping.add(CtSlot(24, 4), CtSlot(22, 3));
  mapping.add(CtSlot(16, 3), CtSlot(22, 4));
  mapping.add(CtSlot(0, 0), CtSlot(22, 5));
  mapping.add(CtSlot(11, 7), CtSlot(22, 6));
  mapping.add(CtSlot(27, 0), CtSlot(22, 7));
  mapping.add(CtSlot(25, 1), CtSlot(23, 0));
  mapping.add(CtSlot(19, 2), CtSlot(23, 1));
  mapping.add(CtSlot(13, 0), CtSlot(23, 2));
  mapping.add(CtSlot(7, 0), CtSlot(23, 3));
  mapping.add(CtSlot(17, 2), CtSlot(23, 4));
  mapping.add(CtSlot(22, 1), CtSlot(23, 5));
  mapping.add(CtSlot(17, 2), CtSlot(23, 6));
  mapping.add(CtSlot(21, 7), CtSlot(23, 7));
  mapping.add(CtSlot(10, 2), CtSlot(24, 0));
  mapping.add(CtSlot(7, 7), CtSlot(24, 1));
  mapping.add(CtSlot(8, 2), CtSlot(24, 2));
  mapping.add(CtSlot(23, 4), CtSlot(24, 3));
  mapping.add(CtSlot(26, 7), CtSlot(24, 4));
  mapping.add(CtSlot(7, 5), CtSlot(24, 5));
  mapping.add(CtSlot(10, 2), CtSlot(24, 6));
  mapping.add(CtSlot(23, 6), CtSlot(24, 7));
  mapping.add(CtSlot(27, 0), CtSlot(25, 0));
  mapping.add(CtSlot(28, 1), CtSlot(25, 1));
  mapping.add(CtSlot(12, 3), CtSlot(25, 2));
  mapping.add(CtSlot(4, 5), CtSlot(25, 3));
  mapping.add(CtSlot(20, 4), CtSlot(25, 4));
  mapping.add(CtSlot(5, 7), CtSlot(25, 5));
  mapping.add(CtSlot(16, 4), CtSlot(25, 6));
  mapping.add(CtSlot(10, 6), CtSlot(25, 7));
  mapping.add(CtSlot(30, 3), CtSlot(26, 0));
  mapping.add(CtSlot(24, 7), CtSlot(26, 1));
  mapping.add(CtSlot(13, 3), CtSlot(26, 2));
  mapping.add(CtSlot(6, 2), CtSlot(26, 3));
  mapping.add(CtSlot(10, 6), CtSlot(26, 4));
  mapping.add(CtSlot(13, 5), CtSlot(26, 5));
  mapping.add(CtSlot(4, 0), CtSlot(26, 6));
  mapping.add(CtSlot(22, 1), CtSlot(26, 7));
  mapping.add(CtSlot(30, 1), CtSlot(27, 0));
  mapping.add(CtSlot(2, 5), CtSlot(27, 1));
  mapping.add(CtSlot(15, 7), CtSlot(27, 2));
  mapping.add(CtSlot(8, 4), CtSlot(27, 3));
  mapping.add(CtSlot(18, 5), CtSlot(27, 4));
  mapping.add(CtSlot(2, 7), CtSlot(27, 5));
  mapping.add(CtSlot(21, 2), CtSlot(27, 6));
  mapping.add(CtSlot(15, 0), CtSlot(27, 7));
  mapping.add(CtSlot(26, 0), CtSlot(28, 0));
  mapping.add(CtSlot(24, 7), CtSlot(28, 1));
  mapping.add(CtSlot(6, 0), CtSlot(28, 2));
  mapping.add(CtSlot(19, 5), CtSlot(28, 3));
  mapping.add(CtSlot(8, 4), CtSlot(28, 4));
  mapping.add(CtSlot(24, 0), CtSlot(28, 5));
  mapping.add(CtSlot(25, 1), CtSlot(28, 6));
  mapping.add(CtSlot(15, 1), CtSlot(28, 7));
  mapping.add(CtSlot(19, 0), CtSlot(29, 0));
  mapping.add(CtSlot(21, 1), CtSlot(29, 1));
  mapping.add(CtSlot(16, 3), CtSlot(29, 2));
  mapping.add(CtSlot(10, 7), CtSlot(29, 3));
  mapping.add(CtSlot(21, 1), CtSlot(29, 4));
  mapping.add(CtSlot(2, 0), CtSlot(29, 5));
  mapping.add(CtSlot(8, 1), CtSlot(29, 6));
  mapping.add(CtSlot(14, 1), CtSlot(29, 7));
  mapping.add(CtSlot(22, 4), CtSlot(30, 0));
  mapping.add(CtSlot(2, 6), CtSlot(30, 1));
  mapping.add(CtSlot(20, 2), CtSlot(30, 2));
  mapping.add(CtSlot(4, 4), CtSlot(30, 3));
  mapping.add(CtSlot(11, 1), CtSlot(30, 4));
  mapping.add(CtSlot(11, 0), CtSlot(30, 5));
  mapping.add(CtSlot(21, 0), CtSlot(30, 6));
  mapping.add(CtSlot(14, 7), CtSlot(30, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_17) {
  int64_t numCts = 31;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(9, 1), CtSlot(0, 0));
  mapping.add(CtSlot(22, 3), CtSlot(0, 1));
  mapping.add(CtSlot(3, 7), CtSlot(0, 2));
  mapping.add(CtSlot(26, 6), CtSlot(0, 3));
  mapping.add(CtSlot(21, 0), CtSlot(0, 4));
  mapping.add(CtSlot(27, 2), CtSlot(0, 5));
  mapping.add(CtSlot(0, 7), CtSlot(0, 6));
  mapping.add(CtSlot(15, 4), CtSlot(0, 7));
  mapping.add(CtSlot(12, 5), CtSlot(1, 0));
  mapping.add(CtSlot(13, 5), CtSlot(1, 1));
  mapping.add(CtSlot(9, 2), CtSlot(1, 2));
  mapping.add(CtSlot(13, 2), CtSlot(1, 3));
  mapping.add(CtSlot(2, 6), CtSlot(1, 4));
  mapping.add(CtSlot(12, 6), CtSlot(1, 5));
  mapping.add(CtSlot(17, 5), CtSlot(1, 6));
  mapping.add(CtSlot(20, 7), CtSlot(1, 7));
  mapping.add(CtSlot(0, 2), CtSlot(2, 0));
  mapping.add(CtSlot(7, 1), CtSlot(2, 1));
  mapping.add(CtSlot(3, 2), CtSlot(2, 2));
  mapping.add(CtSlot(5, 6), CtSlot(2, 3));
  mapping.add(CtSlot(2, 1), CtSlot(2, 4));
  mapping.add(CtSlot(23, 3), CtSlot(2, 5));
  mapping.add(CtSlot(14, 5), CtSlot(2, 6));
  mapping.add(CtSlot(11, 5), CtSlot(2, 7));
  mapping.add(CtSlot(18, 0), CtSlot(3, 0));
  mapping.add(CtSlot(26, 0), CtSlot(3, 1));
  mapping.add(CtSlot(3, 2), CtSlot(3, 2));
  mapping.add(CtSlot(7, 3), CtSlot(3, 3));
  mapping.add(CtSlot(21, 0), CtSlot(3, 4));
  mapping.add(CtSlot(6, 1), CtSlot(3, 5));
  mapping.add(CtSlot(2, 5), CtSlot(3, 6));
  mapping.add(CtSlot(25, 5), CtSlot(3, 7));
  mapping.add(CtSlot(8, 7), CtSlot(4, 0));
  mapping.add(CtSlot(8, 2), CtSlot(4, 1));
  mapping.add(CtSlot(3, 3), CtSlot(4, 2));
  mapping.add(CtSlot(23, 4), CtSlot(4, 3));
  mapping.add(CtSlot(1, 1), CtSlot(4, 4));
  mapping.add(CtSlot(17, 1), CtSlot(4, 5));
  mapping.add(CtSlot(27, 1), CtSlot(4, 6));
  mapping.add(CtSlot(2, 1), CtSlot(4, 7));
  mapping.add(CtSlot(16, 6), CtSlot(5, 0));
  mapping.add(CtSlot(16, 2), CtSlot(5, 1));
  mapping.add(CtSlot(19, 7), CtSlot(5, 2));
  mapping.add(CtSlot(11, 7), CtSlot(5, 3));
  mapping.add(CtSlot(16, 0), CtSlot(5, 4));
  mapping.add(CtSlot(18, 7), CtSlot(5, 5));
  mapping.add(CtSlot(7, 6), CtSlot(5, 6));
  mapping.add(CtSlot(2, 2), CtSlot(5, 7));
  mapping.add(CtSlot(15, 6), CtSlot(6, 0));
  mapping.add(CtSlot(23, 3), CtSlot(6, 1));
  mapping.add(CtSlot(24, 4), CtSlot(6, 2));
  mapping.add(CtSlot(5, 7), CtSlot(6, 3));
  mapping.add(CtSlot(12, 2), CtSlot(6, 4));
  mapping.add(CtSlot(19, 1), CtSlot(6, 5));
  mapping.add(CtSlot(11, 6), CtSlot(6, 6));
  mapping.add(CtSlot(18, 2), CtSlot(6, 7));
  mapping.add(CtSlot(29, 3), CtSlot(7, 0));
  mapping.add(CtSlot(19, 0), CtSlot(7, 1));
  mapping.add(CtSlot(24, 3), CtSlot(7, 2));
  mapping.add(CtSlot(26, 6), CtSlot(7, 3));
  mapping.add(CtSlot(1, 7), CtSlot(7, 4));
  mapping.add(CtSlot(13, 0), CtSlot(7, 5));
  mapping.add(CtSlot(5, 4), CtSlot(7, 6));
  mapping.add(CtSlot(5, 7), CtSlot(7, 7));
  mapping.add(CtSlot(8, 0), CtSlot(8, 0));
  mapping.add(CtSlot(13, 0), CtSlot(8, 1));
  mapping.add(CtSlot(8, 4), CtSlot(8, 2));
  mapping.add(CtSlot(9, 0), CtSlot(8, 3));
  mapping.add(CtSlot(18, 2), CtSlot(8, 4));
  mapping.add(CtSlot(29, 1), CtSlot(8, 5));
  mapping.add(CtSlot(22, 0), CtSlot(8, 6));
  mapping.add(CtSlot(3, 2), CtSlot(8, 7));
  mapping.add(CtSlot(19, 6), CtSlot(9, 0));
  mapping.add(CtSlot(25, 6), CtSlot(9, 1));
  mapping.add(CtSlot(0, 6), CtSlot(9, 2));
  mapping.add(CtSlot(30, 4), CtSlot(9, 3));
  mapping.add(CtSlot(17, 5), CtSlot(9, 4));
  mapping.add(CtSlot(19, 5), CtSlot(9, 5));
  mapping.add(CtSlot(4, 7), CtSlot(9, 6));
  mapping.add(CtSlot(29, 0), CtSlot(9, 7));
  mapping.add(CtSlot(20, 5), CtSlot(10, 0));
  mapping.add(CtSlot(26, 3), CtSlot(10, 1));
  mapping.add(CtSlot(8, 3), CtSlot(10, 2));
  mapping.add(CtSlot(1, 5), CtSlot(10, 3));
  mapping.add(CtSlot(21, 1), CtSlot(10, 4));
  mapping.add(CtSlot(25, 4), CtSlot(10, 5));
  mapping.add(CtSlot(4, 1), CtSlot(10, 6));
  mapping.add(CtSlot(6, 6), CtSlot(10, 7));
  mapping.add(CtSlot(4, 0), CtSlot(11, 0));
  mapping.add(CtSlot(12, 1), CtSlot(11, 1));
  mapping.add(CtSlot(30, 7), CtSlot(11, 2));
  mapping.add(CtSlot(27, 7), CtSlot(11, 3));
  mapping.add(CtSlot(6, 0), CtSlot(11, 4));
  mapping.add(CtSlot(3, 7), CtSlot(11, 5));
  mapping.add(CtSlot(10, 1), CtSlot(11, 6));
  mapping.add(CtSlot(17, 4), CtSlot(11, 7));
  mapping.add(CtSlot(19, 6), CtSlot(12, 0));
  mapping.add(CtSlot(2, 7), CtSlot(12, 1));
  mapping.add(CtSlot(22, 7), CtSlot(12, 2));
  mapping.add(CtSlot(14, 2), CtSlot(12, 3));
  mapping.add(CtSlot(27, 3), CtSlot(12, 4));
  mapping.add(CtSlot(15, 2), CtSlot(12, 5));
  mapping.add(CtSlot(10, 6), CtSlot(12, 6));
  mapping.add(CtSlot(27, 2), CtSlot(12, 7));
  mapping.add(CtSlot(2, 0), CtSlot(13, 0));
  mapping.add(CtSlot(30, 3), CtSlot(13, 1));
  mapping.add(CtSlot(2, 1), CtSlot(13, 2));
  mapping.add(CtSlot(18, 5), CtSlot(13, 3));
  mapping.add(CtSlot(14, 1), CtSlot(13, 4));
  mapping.add(CtSlot(0, 7), CtSlot(13, 5));
  mapping.add(CtSlot(11, 0), CtSlot(13, 6));
  mapping.add(CtSlot(28, 3), CtSlot(13, 7));
  mapping.add(CtSlot(14, 4), CtSlot(14, 0));
  mapping.add(CtSlot(26, 2), CtSlot(14, 1));
  mapping.add(CtSlot(5, 0), CtSlot(14, 2));
  mapping.add(CtSlot(7, 3), CtSlot(14, 3));
  mapping.add(CtSlot(6, 3), CtSlot(14, 4));
  mapping.add(CtSlot(12, 4), CtSlot(14, 5));
  mapping.add(CtSlot(28, 5), CtSlot(14, 6));
  mapping.add(CtSlot(13, 1), CtSlot(14, 7));
  mapping.add(CtSlot(26, 3), CtSlot(15, 0));
  mapping.add(CtSlot(16, 0), CtSlot(15, 1));
  mapping.add(CtSlot(24, 5), CtSlot(15, 2));
  mapping.add(CtSlot(4, 6), CtSlot(15, 3));
  mapping.add(CtSlot(8, 5), CtSlot(15, 4));
  mapping.add(CtSlot(9, 0), CtSlot(15, 5));
  mapping.add(CtSlot(19, 7), CtSlot(15, 6));
  mapping.add(CtSlot(21, 0), CtSlot(15, 7));
  mapping.add(CtSlot(5, 7), CtSlot(16, 0));
  mapping.add(CtSlot(16, 5), CtSlot(16, 1));
  mapping.add(CtSlot(17, 4), CtSlot(16, 2));
  mapping.add(CtSlot(11, 3), CtSlot(16, 3));
  mapping.add(CtSlot(26, 0), CtSlot(16, 4));
  mapping.add(CtSlot(26, 0), CtSlot(16, 5));
  mapping.add(CtSlot(8, 1), CtSlot(16, 6));
  mapping.add(CtSlot(12, 0), CtSlot(16, 7));
  mapping.add(CtSlot(21, 7), CtSlot(17, 0));
  mapping.add(CtSlot(26, 0), CtSlot(17, 1));
  mapping.add(CtSlot(7, 1), CtSlot(17, 2));
  mapping.add(CtSlot(12, 7), CtSlot(17, 3));
  mapping.add(CtSlot(6, 0), CtSlot(17, 4));
  mapping.add(CtSlot(3, 2), CtSlot(17, 5));
  mapping.add(CtSlot(10, 3), CtSlot(17, 6));
  mapping.add(CtSlot(9, 4), CtSlot(17, 7));
  mapping.add(CtSlot(9, 4), CtSlot(18, 0));
  mapping.add(CtSlot(22, 3), CtSlot(18, 1));
  mapping.add(CtSlot(1, 4), CtSlot(18, 2));
  mapping.add(CtSlot(8, 6), CtSlot(18, 3));
  mapping.add(CtSlot(16, 1), CtSlot(18, 4));
  mapping.add(CtSlot(18, 6), CtSlot(18, 5));
  mapping.add(CtSlot(23, 3), CtSlot(18, 6));
  mapping.add(CtSlot(0, 2), CtSlot(18, 7));
  mapping.add(CtSlot(30, 6), CtSlot(19, 0));
  mapping.add(CtSlot(9, 3), CtSlot(19, 1));
  mapping.add(CtSlot(24, 2), CtSlot(19, 2));
  mapping.add(CtSlot(3, 1), CtSlot(19, 3));
  mapping.add(CtSlot(24, 2), CtSlot(19, 4));
  mapping.add(CtSlot(5, 5), CtSlot(19, 5));
  mapping.add(CtSlot(14, 4), CtSlot(19, 6));
  mapping.add(CtSlot(5, 7), CtSlot(19, 7));
  mapping.add(CtSlot(17, 0), CtSlot(20, 0));
  mapping.add(CtSlot(21, 5), CtSlot(20, 1));
  mapping.add(CtSlot(28, 5), CtSlot(20, 2));
  mapping.add(CtSlot(23, 1), CtSlot(20, 3));
  mapping.add(CtSlot(29, 1), CtSlot(20, 4));
  mapping.add(CtSlot(30, 4), CtSlot(20, 5));
  mapping.add(CtSlot(6, 2), CtSlot(20, 6));
  mapping.add(CtSlot(24, 3), CtSlot(20, 7));
  mapping.add(CtSlot(19, 2), CtSlot(21, 0));
  mapping.add(CtSlot(16, 5), CtSlot(21, 1));
  mapping.add(CtSlot(12, 0), CtSlot(21, 2));
  mapping.add(CtSlot(0, 4), CtSlot(21, 3));
  mapping.add(CtSlot(20, 1), CtSlot(21, 4));
  mapping.add(CtSlot(6, 7), CtSlot(21, 5));
  mapping.add(CtSlot(7, 2), CtSlot(21, 6));
  mapping.add(CtSlot(30, 3), CtSlot(21, 7));
  mapping.add(CtSlot(25, 7), CtSlot(22, 0));
  mapping.add(CtSlot(11, 1), CtSlot(22, 1));
  mapping.add(CtSlot(22, 6), CtSlot(22, 2));
  mapping.add(CtSlot(24, 4), CtSlot(22, 3));
  mapping.add(CtSlot(16, 3), CtSlot(22, 4));
  mapping.add(CtSlot(0, 0), CtSlot(22, 5));
  mapping.add(CtSlot(11, 7), CtSlot(22, 6));
  mapping.add(CtSlot(27, 0), CtSlot(22, 7));
  mapping.add(CtSlot(25, 1), CtSlot(23, 0));
  mapping.add(CtSlot(19, 2), CtSlot(23, 1));
  mapping.add(CtSlot(13, 0), CtSlot(23, 2));
  mapping.add(CtSlot(7, 0), CtSlot(23, 3));
  mapping.add(CtSlot(17, 2), CtSlot(23, 4));
  mapping.add(CtSlot(22, 1), CtSlot(23, 5));
  mapping.add(CtSlot(17, 2), CtSlot(23, 6));
  mapping.add(CtSlot(21, 7), CtSlot(23, 7));
  mapping.add(CtSlot(10, 2), CtSlot(24, 0));
  mapping.add(CtSlot(7, 7), CtSlot(24, 1));
  mapping.add(CtSlot(8, 2), CtSlot(24, 2));
  mapping.add(CtSlot(23, 0), CtSlot(24, 3));
  mapping.add(CtSlot(26, 7), CtSlot(24, 4));
  mapping.add(CtSlot(7, 5), CtSlot(24, 5));
  mapping.add(CtSlot(10, 2), CtSlot(24, 6));
  mapping.add(CtSlot(23, 6), CtSlot(24, 7));
  mapping.add(CtSlot(27, 0), CtSlot(25, 0));
  mapping.add(CtSlot(28, 1), CtSlot(25, 1));
  mapping.add(CtSlot(12, 3), CtSlot(25, 2));
  mapping.add(CtSlot(4, 5), CtSlot(25, 3));
  mapping.add(CtSlot(20, 4), CtSlot(25, 4));
  mapping.add(CtSlot(5, 7), CtSlot(25, 5));
  mapping.add(CtSlot(16, 4), CtSlot(25, 6));
  mapping.add(CtSlot(10, 6), CtSlot(25, 7));
  mapping.add(CtSlot(30, 3), CtSlot(26, 0));
  mapping.add(CtSlot(24, 7), CtSlot(26, 1));
  mapping.add(CtSlot(13, 3), CtSlot(26, 2));
  mapping.add(CtSlot(6, 2), CtSlot(26, 3));
  mapping.add(CtSlot(10, 6), CtSlot(26, 4));
  mapping.add(CtSlot(13, 5), CtSlot(26, 5));
  mapping.add(CtSlot(4, 0), CtSlot(26, 6));
  mapping.add(CtSlot(22, 1), CtSlot(26, 7));
  mapping.add(CtSlot(30, 1), CtSlot(27, 0));
  mapping.add(CtSlot(2, 5), CtSlot(27, 1));
  mapping.add(CtSlot(15, 7), CtSlot(27, 2));
  mapping.add(CtSlot(8, 4), CtSlot(27, 3));
  mapping.add(CtSlot(18, 5), CtSlot(27, 4));
  mapping.add(CtSlot(2, 7), CtSlot(27, 5));
  mapping.add(CtSlot(21, 2), CtSlot(27, 6));
  mapping.add(CtSlot(15, 0), CtSlot(27, 7));
  mapping.add(CtSlot(26, 0), CtSlot(28, 0));
  mapping.add(CtSlot(24, 7), CtSlot(28, 1));
  mapping.add(CtSlot(6, 0), CtSlot(28, 2));
  mapping.add(CtSlot(19, 5), CtSlot(28, 3));
  mapping.add(CtSlot(8, 4), CtSlot(28, 4));
  mapping.add(CtSlot(24, 0), CtSlot(28, 5));
  mapping.add(CtSlot(25, 1), CtSlot(28, 6));
  mapping.add(CtSlot(15, 1), CtSlot(28, 7));
  mapping.add(CtSlot(19, 0), CtSlot(29, 0));
  mapping.add(CtSlot(21, 1), CtSlot(29, 1));
  mapping.add(CtSlot(16, 3), CtSlot(29, 2));
  mapping.add(CtSlot(10, 7), CtSlot(29, 3));
  mapping.add(CtSlot(21, 1), CtSlot(29, 4));
  mapping.add(CtSlot(2, 0), CtSlot(29, 5));
  mapping.add(CtSlot(8, 1), CtSlot(29, 6));
  mapping.add(CtSlot(14, 1), CtSlot(29, 7));
  mapping.add(CtSlot(22, 4), CtSlot(30, 0));
  mapping.add(CtSlot(2, 6), CtSlot(30, 1));
  mapping.add(CtSlot(20, 2), CtSlot(30, 2));
  mapping.add(CtSlot(4, 4), CtSlot(30, 3));
  mapping.add(CtSlot(11, 1), CtSlot(30, 4));
  mapping.add(CtSlot(11, 0), CtSlot(30, 5));
  mapping.add(CtSlot(21, 0), CtSlot(30, 6));
  mapping.add(CtSlot(14, 7), CtSlot(30, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_18) {
  int64_t numCts = 31;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(9, 1), CtSlot(0, 0));
  mapping.add(CtSlot(22, 3), CtSlot(0, 1));
  mapping.add(CtSlot(3, 7), CtSlot(0, 2));
  mapping.add(CtSlot(26, 6), CtSlot(0, 3));
  mapping.add(CtSlot(21, 0), CtSlot(0, 4));
  mapping.add(CtSlot(27, 2), CtSlot(0, 5));
  mapping.add(CtSlot(0, 7), CtSlot(0, 6));
  mapping.add(CtSlot(15, 4), CtSlot(0, 7));
  mapping.add(CtSlot(12, 5), CtSlot(1, 0));
  mapping.add(CtSlot(13, 5), CtSlot(1, 1));
  mapping.add(CtSlot(9, 2), CtSlot(1, 2));
  mapping.add(CtSlot(13, 2), CtSlot(1, 3));
  mapping.add(CtSlot(2, 6), CtSlot(1, 4));
  mapping.add(CtSlot(12, 6), CtSlot(1, 5));
  mapping.add(CtSlot(17, 5), CtSlot(1, 6));
  mapping.add(CtSlot(20, 7), CtSlot(1, 7));
  mapping.add(CtSlot(0, 2), CtSlot(2, 0));
  mapping.add(CtSlot(7, 1), CtSlot(2, 1));
  mapping.add(CtSlot(3, 2), CtSlot(2, 2));
  mapping.add(CtSlot(5, 6), CtSlot(2, 3));
  mapping.add(CtSlot(2, 1), CtSlot(2, 4));
  mapping.add(CtSlot(23, 3), CtSlot(2, 5));
  mapping.add(CtSlot(14, 5), CtSlot(2, 6));
  mapping.add(CtSlot(11, 5), CtSlot(2, 7));
  mapping.add(CtSlot(18, 0), CtSlot(3, 0));
  mapping.add(CtSlot(26, 0), CtSlot(3, 1));
  mapping.add(CtSlot(3, 2), CtSlot(3, 2));
  mapping.add(CtSlot(7, 3), CtSlot(3, 3));
  mapping.add(CtSlot(21, 0), CtSlot(3, 4));
  mapping.add(CtSlot(6, 1), CtSlot(3, 5));
  mapping.add(CtSlot(2, 5), CtSlot(3, 6));
  mapping.add(CtSlot(25, 5), CtSlot(3, 7));
  mapping.add(CtSlot(8, 7), CtSlot(4, 0));
  mapping.add(CtSlot(8, 2), CtSlot(4, 1));
  mapping.add(CtSlot(3, 3), CtSlot(4, 2));
  mapping.add(CtSlot(23, 4), CtSlot(4, 3));
  mapping.add(CtSlot(1, 1), CtSlot(4, 4));
  mapping.add(CtSlot(17, 1), CtSlot(4, 5));
  mapping.add(CtSlot(27, 1), CtSlot(4, 6));
  mapping.add(CtSlot(2, 1), CtSlot(4, 7));
  mapping.add(CtSlot(16, 6), CtSlot(5, 0));
  mapping.add(CtSlot(16, 2), CtSlot(5, 1));
  mapping.add(CtSlot(19, 7), CtSlot(5, 2));
  mapping.add(CtSlot(11, 7), CtSlot(5, 3));
  mapping.add(CtSlot(16, 0), CtSlot(5, 4));
  mapping.add(CtSlot(18, 7), CtSlot(5, 5));
  mapping.add(CtSlot(7, 6), CtSlot(5, 6));
  mapping.add(CtSlot(2, 2), CtSlot(5, 7));
  mapping.add(CtSlot(15, 6), CtSlot(6, 0));
  mapping.add(CtSlot(23, 3), CtSlot(6, 1));
  mapping.add(CtSlot(24, 4), CtSlot(6, 2));
  mapping.add(CtSlot(5, 7), CtSlot(6, 3));
  mapping.add(CtSlot(12, 2), CtSlot(6, 4));
  mapping.add(CtSlot(19, 1), CtSlot(6, 5));
  mapping.add(CtSlot(11, 6), CtSlot(6, 6));
  mapping.add(CtSlot(18, 2), CtSlot(6, 7));
  mapping.add(CtSlot(29, 3), CtSlot(7, 0));
  mapping.add(CtSlot(19, 0), CtSlot(7, 1));
  mapping.add(CtSlot(24, 3), CtSlot(7, 2));
  mapping.add(CtSlot(26, 6), CtSlot(7, 3));
  mapping.add(CtSlot(1, 7), CtSlot(7, 4));
  mapping.add(CtSlot(13, 0), CtSlot(7, 5));
  mapping.add(CtSlot(5, 4), CtSlot(7, 6));
  mapping.add(CtSlot(5, 7), CtSlot(7, 7));
  mapping.add(CtSlot(8, 0), CtSlot(8, 0));
  mapping.add(CtSlot(13, 0), CtSlot(8, 1));
  mapping.add(CtSlot(8, 4), CtSlot(8, 2));
  mapping.add(CtSlot(9, 0), CtSlot(8, 3));
  mapping.add(CtSlot(18, 2), CtSlot(8, 4));
  mapping.add(CtSlot(29, 1), CtSlot(8, 5));
  mapping.add(CtSlot(22, 0), CtSlot(8, 6));
  mapping.add(CtSlot(3, 2), CtSlot(8, 7));
  mapping.add(CtSlot(19, 6), CtSlot(9, 0));
  mapping.add(CtSlot(25, 6), CtSlot(9, 1));
  mapping.add(CtSlot(0, 6), CtSlot(9, 2));
  mapping.add(CtSlot(30, 4), CtSlot(9, 3));
  mapping.add(CtSlot(17, 5), CtSlot(9, 4));
  mapping.add(CtSlot(19, 5), CtSlot(9, 5));
  mapping.add(CtSlot(4, 7), CtSlot(9, 6));
  mapping.add(CtSlot(29, 0), CtSlot(9, 7));
  mapping.add(CtSlot(20, 5), CtSlot(10, 0));
  mapping.add(CtSlot(26, 3), CtSlot(10, 1));
  mapping.add(CtSlot(8, 3), CtSlot(10, 2));
  mapping.add(CtSlot(1, 5), CtSlot(10, 3));
  mapping.add(CtSlot(21, 1), CtSlot(10, 4));
  mapping.add(CtSlot(25, 4), CtSlot(10, 5));
  mapping.add(CtSlot(4, 1), CtSlot(10, 6));
  mapping.add(CtSlot(6, 6), CtSlot(10, 7));
  mapping.add(CtSlot(4, 0), CtSlot(11, 0));
  mapping.add(CtSlot(12, 1), CtSlot(11, 1));
  mapping.add(CtSlot(30, 7), CtSlot(11, 2));
  mapping.add(CtSlot(27, 7), CtSlot(11, 3));
  mapping.add(CtSlot(6, 0), CtSlot(11, 4));
  mapping.add(CtSlot(3, 7), CtSlot(11, 5));
  mapping.add(CtSlot(10, 1), CtSlot(11, 6));
  mapping.add(CtSlot(17, 4), CtSlot(11, 7));
  mapping.add(CtSlot(19, 6), CtSlot(12, 0));
  mapping.add(CtSlot(2, 7), CtSlot(12, 1));
  mapping.add(CtSlot(22, 7), CtSlot(12, 2));
  mapping.add(CtSlot(14, 2), CtSlot(12, 3));
  mapping.add(CtSlot(27, 3), CtSlot(12, 4));
  mapping.add(CtSlot(15, 2), CtSlot(12, 5));
  mapping.add(CtSlot(10, 6), CtSlot(12, 6));
  mapping.add(CtSlot(27, 2), CtSlot(12, 7));
  mapping.add(CtSlot(2, 0), CtSlot(13, 0));
  mapping.add(CtSlot(30, 3), CtSlot(13, 1));
  mapping.add(CtSlot(2, 1), CtSlot(13, 2));
  mapping.add(CtSlot(18, 1), CtSlot(13, 3));
  mapping.add(CtSlot(14, 1), CtSlot(13, 4));
  mapping.add(CtSlot(0, 7), CtSlot(13, 5));
  mapping.add(CtSlot(11, 0), CtSlot(13, 6));
  mapping.add(CtSlot(28, 3), CtSlot(13, 7));
  mapping.add(CtSlot(14, 4), CtSlot(14, 0));
  mapping.add(CtSlot(26, 2), CtSlot(14, 1));
  mapping.add(CtSlot(5, 0), CtSlot(14, 2));
  mapping.add(CtSlot(7, 3), CtSlot(14, 3));
  mapping.add(CtSlot(6, 3), CtSlot(14, 4));
  mapping.add(CtSlot(12, 4), CtSlot(14, 5));
  mapping.add(CtSlot(28, 5), CtSlot(14, 6));
  mapping.add(CtSlot(13, 1), CtSlot(14, 7));
  mapping.add(CtSlot(26, 3), CtSlot(15, 0));
  mapping.add(CtSlot(16, 0), CtSlot(15, 1));
  mapping.add(CtSlot(24, 5), CtSlot(15, 2));
  mapping.add(CtSlot(4, 6), CtSlot(15, 3));
  mapping.add(CtSlot(8, 5), CtSlot(15, 4));
  mapping.add(CtSlot(9, 0), CtSlot(15, 5));
  mapping.add(CtSlot(19, 7), CtSlot(15, 6));
  mapping.add(CtSlot(21, 0), CtSlot(15, 7));
  mapping.add(CtSlot(5, 7), CtSlot(16, 0));
  mapping.add(CtSlot(16, 5), CtSlot(16, 1));
  mapping.add(CtSlot(17, 4), CtSlot(16, 2));
  mapping.add(CtSlot(11, 3), CtSlot(16, 3));
  mapping.add(CtSlot(26, 0), CtSlot(16, 4));
  mapping.add(CtSlot(26, 0), CtSlot(16, 5));
  mapping.add(CtSlot(8, 1), CtSlot(16, 6));
  mapping.add(CtSlot(12, 0), CtSlot(16, 7));
  mapping.add(CtSlot(21, 7), CtSlot(17, 0));
  mapping.add(CtSlot(26, 0), CtSlot(17, 1));
  mapping.add(CtSlot(7, 1), CtSlot(17, 2));
  mapping.add(CtSlot(12, 7), CtSlot(17, 3));
  mapping.add(CtSlot(6, 0), CtSlot(17, 4));
  mapping.add(CtSlot(3, 2), CtSlot(17, 5));
  mapping.add(CtSlot(10, 3), CtSlot(17, 6));
  mapping.add(CtSlot(9, 4), CtSlot(17, 7));
  mapping.add(CtSlot(9, 4), CtSlot(18, 0));
  mapping.add(CtSlot(22, 3), CtSlot(18, 1));
  mapping.add(CtSlot(1, 4), CtSlot(18, 2));
  mapping.add(CtSlot(8, 6), CtSlot(18, 3));
  mapping.add(CtSlot(16, 1), CtSlot(18, 4));
  mapping.add(CtSlot(18, 6), CtSlot(18, 5));
  mapping.add(CtSlot(23, 3), CtSlot(18, 6));
  mapping.add(CtSlot(0, 2), CtSlot(18, 7));
  mapping.add(CtSlot(30, 6), CtSlot(19, 0));
  mapping.add(CtSlot(9, 3), CtSlot(19, 1));
  mapping.add(CtSlot(24, 2), CtSlot(19, 2));
  mapping.add(CtSlot(3, 1), CtSlot(19, 3));
  mapping.add(CtSlot(24, 2), CtSlot(19, 4));
  mapping.add(CtSlot(5, 5), CtSlot(19, 5));
  mapping.add(CtSlot(14, 4), CtSlot(19, 6));
  mapping.add(CtSlot(5, 7), CtSlot(19, 7));
  mapping.add(CtSlot(17, 0), CtSlot(20, 0));
  mapping.add(CtSlot(21, 5), CtSlot(20, 1));
  mapping.add(CtSlot(28, 5), CtSlot(20, 2));
  mapping.add(CtSlot(23, 1), CtSlot(20, 3));
  mapping.add(CtSlot(29, 1), CtSlot(20, 4));
  mapping.add(CtSlot(30, 4), CtSlot(20, 5));
  mapping.add(CtSlot(6, 2), CtSlot(20, 6));
  mapping.add(CtSlot(24, 3), CtSlot(20, 7));
  mapping.add(CtSlot(19, 2), CtSlot(21, 0));
  mapping.add(CtSlot(16, 5), CtSlot(21, 1));
  mapping.add(CtSlot(12, 0), CtSlot(21, 2));
  mapping.add(CtSlot(0, 4), CtSlot(21, 3));
  mapping.add(CtSlot(20, 1), CtSlot(21, 4));
  mapping.add(CtSlot(6, 7), CtSlot(21, 5));
  mapping.add(CtSlot(7, 2), CtSlot(21, 6));
  mapping.add(CtSlot(30, 3), CtSlot(21, 7));
  mapping.add(CtSlot(25, 7), CtSlot(22, 0));
  mapping.add(CtSlot(11, 1), CtSlot(22, 1));
  mapping.add(CtSlot(22, 6), CtSlot(22, 2));
  mapping.add(CtSlot(24, 4), CtSlot(22, 3));
  mapping.add(CtSlot(16, 3), CtSlot(22, 4));
  mapping.add(CtSlot(0, 0), CtSlot(22, 5));
  mapping.add(CtSlot(11, 7), CtSlot(22, 6));
  mapping.add(CtSlot(27, 0), CtSlot(22, 7));
  mapping.add(CtSlot(25, 1), CtSlot(23, 0));
  mapping.add(CtSlot(19, 2), CtSlot(23, 1));
  mapping.add(CtSlot(13, 0), CtSlot(23, 2));
  mapping.add(CtSlot(7, 0), CtSlot(23, 3));
  mapping.add(CtSlot(17, 2), CtSlot(23, 4));
  mapping.add(CtSlot(22, 1), CtSlot(23, 5));
  mapping.add(CtSlot(17, 2), CtSlot(23, 6));
  mapping.add(CtSlot(21, 7), CtSlot(23, 7));
  mapping.add(CtSlot(10, 2), CtSlot(24, 0));
  mapping.add(CtSlot(7, 7), CtSlot(24, 1));
  mapping.add(CtSlot(8, 2), CtSlot(24, 2));
  mapping.add(CtSlot(23, 0), CtSlot(24, 3));
  mapping.add(CtSlot(26, 7), CtSlot(24, 4));
  mapping.add(CtSlot(7, 5), CtSlot(24, 5));
  mapping.add(CtSlot(10, 2), CtSlot(24, 6));
  mapping.add(CtSlot(23, 6), CtSlot(24, 7));
  mapping.add(CtSlot(27, 0), CtSlot(25, 0));
  mapping.add(CtSlot(28, 1), CtSlot(25, 1));
  mapping.add(CtSlot(12, 3), CtSlot(25, 2));
  mapping.add(CtSlot(4, 5), CtSlot(25, 3));
  mapping.add(CtSlot(20, 4), CtSlot(25, 4));
  mapping.add(CtSlot(5, 7), CtSlot(25, 5));
  mapping.add(CtSlot(16, 4), CtSlot(25, 6));
  mapping.add(CtSlot(10, 6), CtSlot(25, 7));
  mapping.add(CtSlot(30, 3), CtSlot(26, 0));
  mapping.add(CtSlot(24, 7), CtSlot(26, 1));
  mapping.add(CtSlot(13, 3), CtSlot(26, 2));
  mapping.add(CtSlot(6, 2), CtSlot(26, 3));
  mapping.add(CtSlot(10, 6), CtSlot(26, 4));
  mapping.add(CtSlot(13, 5), CtSlot(26, 5));
  mapping.add(CtSlot(4, 0), CtSlot(26, 6));
  mapping.add(CtSlot(22, 1), CtSlot(26, 7));
  mapping.add(CtSlot(30, 1), CtSlot(27, 0));
  mapping.add(CtSlot(2, 5), CtSlot(27, 1));
  mapping.add(CtSlot(15, 7), CtSlot(27, 2));
  mapping.add(CtSlot(8, 4), CtSlot(27, 3));
  mapping.add(CtSlot(18, 5), CtSlot(27, 4));
  mapping.add(CtSlot(2, 7), CtSlot(27, 5));
  mapping.add(CtSlot(21, 2), CtSlot(27, 6));
  mapping.add(CtSlot(15, 0), CtSlot(27, 7));
  mapping.add(CtSlot(26, 0), CtSlot(28, 0));
  mapping.add(CtSlot(24, 7), CtSlot(28, 1));
  mapping.add(CtSlot(6, 0), CtSlot(28, 2));
  mapping.add(CtSlot(19, 5), CtSlot(28, 3));
  mapping.add(CtSlot(8, 4), CtSlot(28, 4));
  mapping.add(CtSlot(24, 0), CtSlot(28, 5));
  mapping.add(CtSlot(25, 1), CtSlot(28, 6));
  mapping.add(CtSlot(15, 1), CtSlot(28, 7));
  mapping.add(CtSlot(19, 0), CtSlot(29, 0));
  mapping.add(CtSlot(21, 1), CtSlot(29, 1));
  mapping.add(CtSlot(16, 3), CtSlot(29, 2));
  mapping.add(CtSlot(10, 7), CtSlot(29, 3));
  mapping.add(CtSlot(21, 1), CtSlot(29, 4));
  mapping.add(CtSlot(2, 0), CtSlot(29, 5));
  mapping.add(CtSlot(8, 1), CtSlot(29, 6));
  mapping.add(CtSlot(14, 1), CtSlot(29, 7));
  mapping.add(CtSlot(22, 4), CtSlot(30, 0));
  mapping.add(CtSlot(2, 6), CtSlot(30, 1));
  mapping.add(CtSlot(20, 2), CtSlot(30, 2));
  mapping.add(CtSlot(4, 4), CtSlot(30, 3));
  mapping.add(CtSlot(11, 1), CtSlot(30, 4));
  mapping.add(CtSlot(11, 0), CtSlot(30, 5));
  mapping.add(CtSlot(21, 0), CtSlot(30, 6));
  mapping.add(CtSlot(14, 7), CtSlot(30, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_19) {
  int64_t numCts = 32;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(1, 2), CtSlot(0, 0));
  mapping.add(CtSlot(14, 2), CtSlot(0, 1));
  mapping.add(CtSlot(26, 5), CtSlot(0, 2));
  mapping.add(CtSlot(15, 7), CtSlot(0, 3));
  mapping.add(CtSlot(12, 4), CtSlot(0, 4));
  mapping.add(CtSlot(23, 4), CtSlot(0, 5));
  mapping.add(CtSlot(13, 1), CtSlot(0, 6));
  mapping.add(CtSlot(4, 0), CtSlot(0, 7));
  mapping.add(CtSlot(13, 4), CtSlot(1, 0));
  mapping.add(CtSlot(20, 3), CtSlot(1, 1));
  mapping.add(CtSlot(8, 4), CtSlot(1, 2));
  mapping.add(CtSlot(18, 5), CtSlot(1, 3));
  mapping.add(CtSlot(31, 0), CtSlot(1, 4));
  mapping.add(CtSlot(21, 4), CtSlot(1, 5));
  mapping.add(CtSlot(6, 3), CtSlot(1, 6));
  mapping.add(CtSlot(24, 7), CtSlot(1, 7));
  mapping.add(CtSlot(27, 7), CtSlot(2, 0));
  mapping.add(CtSlot(26, 7), CtSlot(2, 1));
  mapping.add(CtSlot(18, 5), CtSlot(2, 2));
  mapping.add(CtSlot(6, 3), CtSlot(2, 3));
  mapping.add(CtSlot(3, 5), CtSlot(2, 4));
  mapping.add(CtSlot(2, 1), CtSlot(2, 5));
  mapping.add(CtSlot(13, 6), CtSlot(2, 6));
  mapping.add(CtSlot(4, 0), CtSlot(2, 7));
  mapping.add(CtSlot(20, 5), CtSlot(3, 0));
  mapping.add(CtSlot(6, 3), CtSlot(3, 1));
  mapping.add(CtSlot(21, 0), CtSlot(3, 2));
  mapping.add(CtSlot(5, 0), CtSlot(3, 3));
  mapping.add(CtSlot(11, 1), CtSlot(3, 4));
  mapping.add(CtSlot(1, 4), CtSlot(3, 5));
  mapping.add(CtSlot(20, 6), CtSlot(3, 6));
  mapping.add(CtSlot(13, 3), CtSlot(3, 7));
  mapping.add(CtSlot(22, 7), CtSlot(4, 0));
  mapping.add(CtSlot(20, 7), CtSlot(4, 1));
  mapping.add(CtSlot(0, 1), CtSlot(4, 2));
  mapping.add(CtSlot(21, 5), CtSlot(4, 3));
  mapping.add(CtSlot(5, 6), CtSlot(4, 4));
  mapping.add(CtSlot(1, 1), CtSlot(4, 5));
  mapping.add(CtSlot(15, 1), CtSlot(4, 6));
  mapping.add(CtSlot(25, 3), CtSlot(4, 7));
  mapping.add(CtSlot(8, 3), CtSlot(5, 0));
  mapping.add(CtSlot(15, 6), CtSlot(5, 1));
  mapping.add(CtSlot(5, 0), CtSlot(5, 2));
  mapping.add(CtSlot(30, 2), CtSlot(5, 3));
  mapping.add(CtSlot(13, 5), CtSlot(5, 4));
  mapping.add(CtSlot(2, 3), CtSlot(5, 5));
  mapping.add(CtSlot(8, 2), CtSlot(5, 6));
  mapping.add(CtSlot(6, 6), CtSlot(5, 7));
  mapping.add(CtSlot(1, 4), CtSlot(6, 0));
  mapping.add(CtSlot(8, 5), CtSlot(6, 1));
  mapping.add(CtSlot(13, 0), CtSlot(6, 2));
  mapping.add(CtSlot(16, 7), CtSlot(6, 3));
  mapping.add(CtSlot(9, 3), CtSlot(6, 4));
  mapping.add(CtSlot(21, 2), CtSlot(6, 5));
  mapping.add(CtSlot(2, 1), CtSlot(6, 6));
  mapping.add(CtSlot(25, 7), CtSlot(6, 7));
  mapping.add(CtSlot(13, 3), CtSlot(7, 0));
  mapping.add(CtSlot(17, 3), CtSlot(7, 1));
  mapping.add(CtSlot(13, 6), CtSlot(7, 2));
  mapping.add(CtSlot(19, 7), CtSlot(7, 3));
  mapping.add(CtSlot(22, 0), CtSlot(7, 4));
  mapping.add(CtSlot(12, 0), CtSlot(7, 5));
  mapping.add(CtSlot(13, 7), CtSlot(7, 6));
  mapping.add(CtSlot(24, 4), CtSlot(7, 7));
  mapping.add(CtSlot(1, 1), CtSlot(8, 0));
  mapping.add(CtSlot(25, 7), CtSlot(8, 1));
  mapping.add(CtSlot(20, 3), CtSlot(8, 2));
  mapping.add(CtSlot(17, 4), CtSlot(8, 3));
  mapping.add(CtSlot(7, 6), CtSlot(8, 4));
  mapping.add(CtSlot(1, 1), CtSlot(8, 5));
  mapping.add(CtSlot(23, 6), CtSlot(8, 6));
  mapping.add(CtSlot(1, 5), CtSlot(8, 7));
  mapping.add(CtSlot(11, 1), CtSlot(9, 0));
  mapping.add(CtSlot(10, 5), CtSlot(9, 1));
  mapping.add(CtSlot(26, 2), CtSlot(9, 2));
  mapping.add(CtSlot(12, 5), CtSlot(9, 3));
  mapping.add(CtSlot(14, 3), CtSlot(9, 4));
  mapping.add(CtSlot(5, 6), CtSlot(9, 5));
  mapping.add(CtSlot(16, 7), CtSlot(9, 6));
  mapping.add(CtSlot(19, 7), CtSlot(9, 7));
  mapping.add(CtSlot(30, 4), CtSlot(10, 0));
  mapping.add(CtSlot(24, 7), CtSlot(10, 1));
  mapping.add(CtSlot(26, 0), CtSlot(10, 2));
  mapping.add(CtSlot(26, 1), CtSlot(10, 3));
  mapping.add(CtSlot(19, 2), CtSlot(10, 4));
  mapping.add(CtSlot(10, 6), CtSlot(10, 5));
  mapping.add(CtSlot(4, 3), CtSlot(10, 6));
  mapping.add(CtSlot(13, 0), CtSlot(10, 7));
  mapping.add(CtSlot(12, 1), CtSlot(11, 0));
  mapping.add(CtSlot(0, 2), CtSlot(11, 1));
  mapping.add(CtSlot(23, 3), CtSlot(11, 2));
  mapping.add(CtSlot(8, 7), CtSlot(11, 3));
  mapping.add(CtSlot(24, 7), CtSlot(11, 4));
  mapping.add(CtSlot(9, 1), CtSlot(11, 5));
  mapping.add(CtSlot(5, 1), CtSlot(11, 6));
  mapping.add(CtSlot(5, 3), CtSlot(11, 7));
  mapping.add(CtSlot(28, 3), CtSlot(12, 0));
  mapping.add(CtSlot(25, 6), CtSlot(12, 1));
  mapping.add(CtSlot(5, 5), CtSlot(12, 2));
  mapping.add(CtSlot(31, 6), CtSlot(12, 3));
  mapping.add(CtSlot(6, 3), CtSlot(12, 4));
  mapping.add(CtSlot(22, 6), CtSlot(12, 5));
  mapping.add(CtSlot(2, 4), CtSlot(12, 6));
  mapping.add(CtSlot(9, 4), CtSlot(12, 7));
  mapping.add(CtSlot(11, 6), CtSlot(13, 0));
  mapping.add(CtSlot(22, 2), CtSlot(13, 1));
  mapping.add(CtSlot(4, 6), CtSlot(13, 2));
  mapping.add(CtSlot(30, 3), CtSlot(13, 3));
  mapping.add(CtSlot(18, 4), CtSlot(13, 4));
  mapping.add(CtSlot(3, 7), CtSlot(13, 5));
  mapping.add(CtSlot(17, 4), CtSlot(13, 6));
  mapping.add(CtSlot(10, 0), CtSlot(13, 7));
  mapping.add(CtSlot(15, 4), CtSlot(14, 0));
  mapping.add(CtSlot(23, 3), CtSlot(14, 1));
  mapping.add(CtSlot(25, 7), CtSlot(14, 2));
  mapping.add(CtSlot(23, 4), CtSlot(14, 3));
  mapping.add(CtSlot(8, 3), CtSlot(14, 4));
  mapping.add(CtSlot(16, 7), CtSlot(14, 5));
  mapping.add(CtSlot(8, 5), CtSlot(14, 6));
  mapping.add(CtSlot(11, 7), CtSlot(14, 7));
  mapping.add(CtSlot(23, 3), CtSlot(15, 0));
  mapping.add(CtSlot(30, 1), CtSlot(15, 1));
  mapping.add(CtSlot(0, 6), CtSlot(15, 2));
  mapping.add(CtSlot(3, 4), CtSlot(15, 3));
  mapping.add(CtSlot(20, 6), CtSlot(15, 4));
  mapping.add(CtSlot(28, 3), CtSlot(15, 5));
  mapping.add(CtSlot(2, 4), CtSlot(15, 6));
  mapping.add(CtSlot(0, 7), CtSlot(15, 7));
  mapping.add(CtSlot(26, 5), CtSlot(16, 0));
  mapping.add(CtSlot(4, 2), CtSlot(16, 1));
  mapping.add(CtSlot(29, 5), CtSlot(16, 2));
  mapping.add(CtSlot(31, 0), CtSlot(16, 3));
  mapping.add(CtSlot(17, 7), CtSlot(16, 4));
  mapping.add(CtSlot(0, 1), CtSlot(16, 5));
  mapping.add(CtSlot(12, 0), CtSlot(16, 6));
  mapping.add(CtSlot(3, 4), CtSlot(16, 7));
  mapping.add(CtSlot(3, 1), CtSlot(17, 0));
  mapping.add(CtSlot(17, 0), CtSlot(17, 1));
  mapping.add(CtSlot(8, 5), CtSlot(17, 2));
  mapping.add(CtSlot(15, 5), CtSlot(17, 3));
  mapping.add(CtSlot(25, 7), CtSlot(17, 4));
  mapping.add(CtSlot(3, 5), CtSlot(17, 5));
  mapping.add(CtSlot(7, 6), CtSlot(17, 6));
  mapping.add(CtSlot(11, 4), CtSlot(17, 7));
  mapping.add(CtSlot(9, 6), CtSlot(18, 0));
  mapping.add(CtSlot(0, 4), CtSlot(18, 1));
  mapping.add(CtSlot(7, 4), CtSlot(18, 2));
  mapping.add(CtSlot(17, 3), CtSlot(18, 3));
  mapping.add(CtSlot(18, 2), CtSlot(18, 4));
  mapping.add(CtSlot(11, 1), CtSlot(18, 5));
  mapping.add(CtSlot(15, 1), CtSlot(18, 6));
  mapping.add(CtSlot(29, 3), CtSlot(18, 7));
  mapping.add(CtSlot(26, 2), CtSlot(19, 0));
  mapping.add(CtSlot(14, 6), CtSlot(19, 1));
  mapping.add(CtSlot(10, 7), CtSlot(19, 2));
  mapping.add(CtSlot(10, 6), CtSlot(19, 3));
  mapping.add(CtSlot(18, 7), CtSlot(19, 4));
  mapping.add(CtSlot(3, 3), CtSlot(19, 5));
  mapping.add(CtSlot(0, 5), CtSlot(19, 6));
  mapping.add(CtSlot(6, 4), CtSlot(19, 7));
  mapping.add(CtSlot(14, 0), CtSlot(20, 0));
  mapping.add(CtSlot(1, 0), CtSlot(20, 1));
  mapping.add(CtSlot(29, 7), CtSlot(20, 2));
  mapping.add(CtSlot(20, 7), CtSlot(20, 3));
  mapping.add(CtSlot(30, 3), CtSlot(20, 4));
  mapping.add(CtSlot(17, 2), CtSlot(20, 5));
  mapping.add(CtSlot(28, 7), CtSlot(20, 6));
  mapping.add(CtSlot(8, 5), CtSlot(20, 7));
  mapping.add(CtSlot(23, 5), CtSlot(21, 0));
  mapping.add(CtSlot(11, 2), CtSlot(21, 1));
  mapping.add(CtSlot(2, 7), CtSlot(21, 2));
  mapping.add(CtSlot(27, 5), CtSlot(21, 3));
  mapping.add(CtSlot(0, 5), CtSlot(21, 4));
  mapping.add(CtSlot(11, 0), CtSlot(21, 5));
  mapping.add(CtSlot(18, 7), CtSlot(21, 6));
  mapping.add(CtSlot(21, 6), CtSlot(21, 7));
  mapping.add(CtSlot(22, 6), CtSlot(22, 0));
  mapping.add(CtSlot(20, 6), CtSlot(22, 1));
  mapping.add(CtSlot(20, 5), CtSlot(22, 2));
  mapping.add(CtSlot(20, 2), CtSlot(22, 3));
  mapping.add(CtSlot(9, 6), CtSlot(22, 4));
  mapping.add(CtSlot(14, 2), CtSlot(22, 5));
  mapping.add(CtSlot(30, 1), CtSlot(22, 6));
  mapping.add(CtSlot(12, 7), CtSlot(22, 7));
  mapping.add(CtSlot(22, 6), CtSlot(23, 0));
  mapping.add(CtSlot(5, 3), CtSlot(23, 1));
  mapping.add(CtSlot(15, 2), CtSlot(23, 2));
  mapping.add(CtSlot(16, 7), CtSlot(23, 3));
  mapping.add(CtSlot(11, 4), CtSlot(23, 4));
  mapping.add(CtSlot(19, 1), CtSlot(23, 5));
  mapping.add(CtSlot(8, 2), CtSlot(23, 6));
  mapping.add(CtSlot(21, 5), CtSlot(23, 7));
  mapping.add(CtSlot(24, 2), CtSlot(24, 0));
  mapping.add(CtSlot(18, 5), CtSlot(24, 1));
  mapping.add(CtSlot(3, 4), CtSlot(24, 2));
  mapping.add(CtSlot(10, 4), CtSlot(24, 3));
  mapping.add(CtSlot(30, 7), CtSlot(24, 4));
  mapping.add(CtSlot(6, 5), CtSlot(24, 5));
  mapping.add(CtSlot(0, 6), CtSlot(24, 6));
  mapping.add(CtSlot(27, 2), CtSlot(24, 7));
  mapping.add(CtSlot(20, 0), CtSlot(25, 0));
  mapping.add(CtSlot(1, 0), CtSlot(25, 1));
  mapping.add(CtSlot(21, 3), CtSlot(25, 2));
  mapping.add(CtSlot(25, 6), CtSlot(25, 3));
  mapping.add(CtSlot(21, 6), CtSlot(25, 4));
  mapping.add(CtSlot(7, 3), CtSlot(25, 5));
  mapping.add(CtSlot(7, 5), CtSlot(25, 6));
  mapping.add(CtSlot(11, 3), CtSlot(25, 7));
  mapping.add(CtSlot(25, 4), CtSlot(26, 0));
  mapping.add(CtSlot(6, 7), CtSlot(26, 1));
  mapping.add(CtSlot(17, 3), CtSlot(26, 2));
  mapping.add(CtSlot(2, 3), CtSlot(26, 3));
  mapping.add(CtSlot(13, 5), CtSlot(26, 4));
  mapping.add(CtSlot(1, 6), CtSlot(26, 5));
  mapping.add(CtSlot(9, 1), CtSlot(26, 6));
  mapping.add(CtSlot(3, 3), CtSlot(26, 7));
  mapping.add(CtSlot(8, 6), CtSlot(27, 0));
  mapping.add(CtSlot(13, 3), CtSlot(27, 1));
  mapping.add(CtSlot(16, 4), CtSlot(27, 2));
  mapping.add(CtSlot(16, 4), CtSlot(27, 3));
  mapping.add(CtSlot(29, 3), CtSlot(27, 4));
  mapping.add(CtSlot(15, 7), CtSlot(27, 5));
  mapping.add(CtSlot(31, 3), CtSlot(27, 6));
  mapping.add(CtSlot(13, 0), CtSlot(27, 7));
  mapping.add(CtSlot(28, 7), CtSlot(28, 0));
  mapping.add(CtSlot(12, 2), CtSlot(28, 1));
  mapping.add(CtSlot(7, 5), CtSlot(28, 2));
  mapping.add(CtSlot(2, 1), CtSlot(28, 3));
  mapping.add(CtSlot(14, 5), CtSlot(28, 4));
  mapping.add(CtSlot(16, 1), CtSlot(28, 5));
  mapping.add(CtSlot(19, 6), CtSlot(28, 6));
  mapping.add(CtSlot(3, 2), CtSlot(28, 7));
  mapping.add(CtSlot(17, 5), CtSlot(29, 0));
  mapping.add(CtSlot(10, 1), CtSlot(29, 1));
  mapping.add(CtSlot(1, 3), CtSlot(29, 2));
  mapping.add(CtSlot(16, 4), CtSlot(29, 3));
  mapping.add(CtSlot(27, 5), CtSlot(29, 4));
  mapping.add(CtSlot(10, 5), CtSlot(29, 5));
  mapping.add(CtSlot(30, 6), CtSlot(29, 6));
  mapping.add(CtSlot(15, 5), CtSlot(29, 7));
  mapping.add(CtSlot(25, 7), CtSlot(30, 0));
  mapping.add(CtSlot(23, 0), CtSlot(30, 1));
  mapping.add(CtSlot(26, 5), CtSlot(30, 2));
  mapping.add(CtSlot(1, 1), CtSlot(30, 3));
  mapping.add(CtSlot(0, 1), CtSlot(30, 4));
  mapping.add(CtSlot(31, 2), CtSlot(30, 5));
  mapping.add(CtSlot(29, 6), CtSlot(30, 6));
  mapping.add(CtSlot(12, 0), CtSlot(30, 7));
  mapping.add(CtSlot(5, 5), CtSlot(31, 0));
  mapping.add(CtSlot(30, 6), CtSlot(31, 1));
  mapping.add(CtSlot(22, 3), CtSlot(31, 2));
  mapping.add(CtSlot(16, 2), CtSlot(31, 3));
  mapping.add(CtSlot(25, 4), CtSlot(31, 4));
  mapping.add(CtSlot(17, 6), CtSlot(31, 5));
  mapping.add(CtSlot(30, 0), CtSlot(31, 6));
  mapping.add(CtSlot(28, 2), CtSlot(31, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_20) {
  int64_t numCts = 32;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(1, 2), CtSlot(0, 0));
  mapping.add(CtSlot(14, 2), CtSlot(0, 1));
  mapping.add(CtSlot(26, 5), CtSlot(0, 2));
  mapping.add(CtSlot(15, 7), CtSlot(0, 3));
  mapping.add(CtSlot(12, 4), CtSlot(0, 4));
  mapping.add(CtSlot(23, 4), CtSlot(0, 5));
  mapping.add(CtSlot(13, 1), CtSlot(0, 6));
  mapping.add(CtSlot(4, 0), CtSlot(0, 7));
  mapping.add(CtSlot(13, 4), CtSlot(1, 0));
  mapping.add(CtSlot(20, 3), CtSlot(1, 1));
  mapping.add(CtSlot(8, 4), CtSlot(1, 2));
  mapping.add(CtSlot(18, 5), CtSlot(1, 3));
  mapping.add(CtSlot(31, 0), CtSlot(1, 4));
  mapping.add(CtSlot(21, 4), CtSlot(1, 5));
  mapping.add(CtSlot(6, 3), CtSlot(1, 6));
  mapping.add(CtSlot(24, 7), CtSlot(1, 7));
  mapping.add(CtSlot(27, 7), CtSlot(2, 0));
  mapping.add(CtSlot(26, 7), CtSlot(2, 1));
  mapping.add(CtSlot(18, 5), CtSlot(2, 2));
  mapping.add(CtSlot(6, 3), CtSlot(2, 3));
  mapping.add(CtSlot(3, 5), CtSlot(2, 4));
  mapping.add(CtSlot(2, 1), CtSlot(2, 5));
  mapping.add(CtSlot(13, 6), CtSlot(2, 6));
  mapping.add(CtSlot(4, 0), CtSlot(2, 7));
  mapping.add(CtSlot(20, 5), CtSlot(3, 0));
  mapping.add(CtSlot(6, 3), CtSlot(3, 1));
  mapping.add(CtSlot(21, 0), CtSlot(3, 2));
  mapping.add(CtSlot(5, 0), CtSlot(3, 3));
  mapping.add(CtSlot(11, 1), CtSlot(3, 4));
  mapping.add(CtSlot(1, 4), CtSlot(3, 5));
  mapping.add(CtSlot(20, 6), CtSlot(3, 6));
  mapping.add(CtSlot(13, 3), CtSlot(3, 7));
  mapping.add(CtSlot(22, 7), CtSlot(4, 0));
  mapping.add(CtSlot(20, 7), CtSlot(4, 1));
  mapping.add(CtSlot(0, 1), CtSlot(4, 2));
  mapping.add(CtSlot(21, 5), CtSlot(4, 3));
  mapping.add(CtSlot(5, 6), CtSlot(4, 4));
  mapping.add(CtSlot(1, 1), CtSlot(4, 5));
  mapping.add(CtSlot(15, 1), CtSlot(4, 6));
  mapping.add(CtSlot(25, 3), CtSlot(4, 7));
  mapping.add(CtSlot(8, 3), CtSlot(5, 0));
  mapping.add(CtSlot(15, 6), CtSlot(5, 1));
  mapping.add(CtSlot(5, 0), CtSlot(5, 2));
  mapping.add(CtSlot(30, 2), CtSlot(5, 3));
  mapping.add(CtSlot(13, 5), CtSlot(5, 4));
  mapping.add(CtSlot(2, 3), CtSlot(5, 5));
  mapping.add(CtSlot(8, 2), CtSlot(5, 6));
  mapping.add(CtSlot(6, 6), CtSlot(5, 7));
  mapping.add(CtSlot(1, 4), CtSlot(6, 0));
  mapping.add(CtSlot(8, 5), CtSlot(6, 1));
  mapping.add(CtSlot(13, 0), CtSlot(6, 2));
  mapping.add(CtSlot(16, 7), CtSlot(6, 3));
  mapping.add(CtSlot(9, 3), CtSlot(6, 4));
  mapping.add(CtSlot(21, 2), CtSlot(6, 5));
  mapping.add(CtSlot(2, 1), CtSlot(6, 6));
  mapping.add(CtSlot(25, 7), CtSlot(6, 7));
  mapping.add(CtSlot(13, 3), CtSlot(7, 0));
  mapping.add(CtSlot(17, 3), CtSlot(7, 1));
  mapping.add(CtSlot(13, 6), CtSlot(7, 2));
  mapping.add(CtSlot(19, 7), CtSlot(7, 3));
  mapping.add(CtSlot(22, 0), CtSlot(7, 4));
  mapping.add(CtSlot(12, 0), CtSlot(7, 5));
  mapping.add(CtSlot(13, 7), CtSlot(7, 6));
  mapping.add(CtSlot(24, 4), CtSlot(7, 7));
  mapping.add(CtSlot(1, 1), CtSlot(8, 0));
  mapping.add(CtSlot(25, 7), CtSlot(8, 1));
  mapping.add(CtSlot(20, 3), CtSlot(8, 2));
  mapping.add(CtSlot(17, 4), CtSlot(8, 3));
  mapping.add(CtSlot(7, 6), CtSlot(8, 4));
  mapping.add(CtSlot(1, 1), CtSlot(8, 5));
  mapping.add(CtSlot(23, 6), CtSlot(8, 6));
  mapping.add(CtSlot(1, 5), CtSlot(8, 7));
  mapping.add(CtSlot(11, 1), CtSlot(9, 0));
  mapping.add(CtSlot(10, 5), CtSlot(9, 1));
  mapping.add(CtSlot(26, 2), CtSlot(9, 2));
  mapping.add(CtSlot(12, 5), CtSlot(9, 3));
  mapping.add(CtSlot(14, 3), CtSlot(9, 4));
  mapping.add(CtSlot(5, 6), CtSlot(9, 5));
  mapping.add(CtSlot(16, 7), CtSlot(9, 6));
  mapping.add(CtSlot(19, 7), CtSlot(9, 7));
  mapping.add(CtSlot(30, 4), CtSlot(10, 0));
  mapping.add(CtSlot(24, 7), CtSlot(10, 1));
  mapping.add(CtSlot(26, 0), CtSlot(10, 2));
  mapping.add(CtSlot(26, 1), CtSlot(10, 3));
  mapping.add(CtSlot(19, 2), CtSlot(10, 4));
  mapping.add(CtSlot(10, 6), CtSlot(10, 5));
  mapping.add(CtSlot(4, 3), CtSlot(10, 6));
  mapping.add(CtSlot(13, 0), CtSlot(10, 7));
  mapping.add(CtSlot(12, 1), CtSlot(11, 0));
  mapping.add(CtSlot(0, 2), CtSlot(11, 1));
  mapping.add(CtSlot(23, 3), CtSlot(11, 2));
  mapping.add(CtSlot(8, 7), CtSlot(11, 3));
  mapping.add(CtSlot(24, 7), CtSlot(11, 4));
  mapping.add(CtSlot(9, 1), CtSlot(11, 5));
  mapping.add(CtSlot(5, 1), CtSlot(11, 6));
  mapping.add(CtSlot(5, 3), CtSlot(11, 7));
  mapping.add(CtSlot(28, 3), CtSlot(12, 0));
  mapping.add(CtSlot(25, 6), CtSlot(12, 1));
  mapping.add(CtSlot(5, 5), CtSlot(12, 2));
  mapping.add(CtSlot(31, 6), CtSlot(12, 3));
  mapping.add(CtSlot(6, 3), CtSlot(12, 4));
  mapping.add(CtSlot(22, 6), CtSlot(12, 5));
  mapping.add(CtSlot(2, 4), CtSlot(12, 6));
  mapping.add(CtSlot(9, 4), CtSlot(12, 7));
  mapping.add(CtSlot(11, 6), CtSlot(13, 0));
  mapping.add(CtSlot(22, 2), CtSlot(13, 1));
  mapping.add(CtSlot(4, 6), CtSlot(13, 2));
  mapping.add(CtSlot(30, 3), CtSlot(13, 3));
  mapping.add(CtSlot(18, 4), CtSlot(13, 4));
  mapping.add(CtSlot(3, 7), CtSlot(13, 5));
  mapping.add(CtSlot(17, 4), CtSlot(13, 6));
  mapping.add(CtSlot(10, 0), CtSlot(13, 7));
  mapping.add(CtSlot(15, 4), CtSlot(14, 0));
  mapping.add(CtSlot(23, 3), CtSlot(14, 1));
  mapping.add(CtSlot(25, 7), CtSlot(14, 2));
  mapping.add(CtSlot(23, 4), CtSlot(14, 3));
  mapping.add(CtSlot(8, 3), CtSlot(14, 4));
  mapping.add(CtSlot(16, 7), CtSlot(14, 5));
  mapping.add(CtSlot(8, 5), CtSlot(14, 6));
  mapping.add(CtSlot(11, 7), CtSlot(14, 7));
  mapping.add(CtSlot(23, 3), CtSlot(15, 0));
  mapping.add(CtSlot(30, 1), CtSlot(15, 1));
  mapping.add(CtSlot(0, 6), CtSlot(15, 2));
  mapping.add(CtSlot(3, 4), CtSlot(15, 3));
  mapping.add(CtSlot(20, 6), CtSlot(15, 4));
  mapping.add(CtSlot(28, 3), CtSlot(15, 5));
  mapping.add(CtSlot(2, 4), CtSlot(15, 6));
  mapping.add(CtSlot(0, 7), CtSlot(15, 7));
  mapping.add(CtSlot(26, 5), CtSlot(16, 0));
  mapping.add(CtSlot(4, 2), CtSlot(16, 1));
  mapping.add(CtSlot(29, 5), CtSlot(16, 2));
  mapping.add(CtSlot(31, 0), CtSlot(16, 3));
  mapping.add(CtSlot(17, 7), CtSlot(16, 4));
  mapping.add(CtSlot(0, 1), CtSlot(16, 5));
  mapping.add(CtSlot(12, 0), CtSlot(16, 6));
  mapping.add(CtSlot(3, 4), CtSlot(16, 7));
  mapping.add(CtSlot(3, 1), CtSlot(17, 0));
  mapping.add(CtSlot(17, 0), CtSlot(17, 1));
  mapping.add(CtSlot(8, 5), CtSlot(17, 2));
  mapping.add(CtSlot(15, 5), CtSlot(17, 3));
  mapping.add(CtSlot(25, 7), CtSlot(17, 4));
  mapping.add(CtSlot(3, 5), CtSlot(17, 5));
  mapping.add(CtSlot(7, 6), CtSlot(17, 6));
  mapping.add(CtSlot(11, 4), CtSlot(17, 7));
  mapping.add(CtSlot(9, 6), CtSlot(18, 0));
  mapping.add(CtSlot(0, 4), CtSlot(18, 1));
  mapping.add(CtSlot(7, 4), CtSlot(18, 2));
  mapping.add(CtSlot(17, 3), CtSlot(18, 3));
  mapping.add(CtSlot(18, 2), CtSlot(18, 4));
  mapping.add(CtSlot(11, 1), CtSlot(18, 5));
  mapping.add(CtSlot(15, 1), CtSlot(18, 6));
  mapping.add(CtSlot(29, 3), CtSlot(18, 7));
  mapping.add(CtSlot(26, 2), CtSlot(19, 0));
  mapping.add(CtSlot(14, 6), CtSlot(19, 1));
  mapping.add(CtSlot(10, 7), CtSlot(19, 2));
  mapping.add(CtSlot(10, 6), CtSlot(19, 3));
  mapping.add(CtSlot(18, 7), CtSlot(19, 4));
  mapping.add(CtSlot(3, 3), CtSlot(19, 5));
  mapping.add(CtSlot(0, 5), CtSlot(19, 6));
  mapping.add(CtSlot(6, 4), CtSlot(19, 7));
  mapping.add(CtSlot(14, 0), CtSlot(20, 0));
  mapping.add(CtSlot(1, 0), CtSlot(20, 1));
  mapping.add(CtSlot(29, 7), CtSlot(20, 2));
  mapping.add(CtSlot(20, 7), CtSlot(20, 3));
  mapping.add(CtSlot(30, 3), CtSlot(20, 4));
  mapping.add(CtSlot(17, 2), CtSlot(20, 5));
  mapping.add(CtSlot(28, 7), CtSlot(20, 6));
  mapping.add(CtSlot(8, 5), CtSlot(20, 7));
  mapping.add(CtSlot(23, 5), CtSlot(21, 0));
  mapping.add(CtSlot(11, 2), CtSlot(21, 1));
  mapping.add(CtSlot(2, 7), CtSlot(21, 2));
  mapping.add(CtSlot(27, 5), CtSlot(21, 3));
  mapping.add(CtSlot(0, 5), CtSlot(21, 4));
  mapping.add(CtSlot(11, 0), CtSlot(21, 5));
  mapping.add(CtSlot(18, 7), CtSlot(21, 6));
  mapping.add(CtSlot(21, 6), CtSlot(21, 7));
  mapping.add(CtSlot(22, 6), CtSlot(22, 0));
  mapping.add(CtSlot(20, 6), CtSlot(22, 1));
  mapping.add(CtSlot(20, 5), CtSlot(22, 2));
  mapping.add(CtSlot(20, 2), CtSlot(22, 3));
  mapping.add(CtSlot(9, 6), CtSlot(22, 4));
  mapping.add(CtSlot(14, 2), CtSlot(22, 5));
  mapping.add(CtSlot(30, 1), CtSlot(22, 6));
  mapping.add(CtSlot(12, 7), CtSlot(22, 7));
  mapping.add(CtSlot(22, 6), CtSlot(23, 0));
  mapping.add(CtSlot(5, 3), CtSlot(23, 1));
  mapping.add(CtSlot(15, 2), CtSlot(23, 2));
  mapping.add(CtSlot(16, 7), CtSlot(23, 3));
  mapping.add(CtSlot(11, 4), CtSlot(23, 4));
  mapping.add(CtSlot(19, 1), CtSlot(23, 5));
  mapping.add(CtSlot(8, 2), CtSlot(23, 6));
  mapping.add(CtSlot(21, 5), CtSlot(23, 7));
  mapping.add(CtSlot(24, 2), CtSlot(24, 0));
  mapping.add(CtSlot(18, 5), CtSlot(24, 1));
  mapping.add(CtSlot(3, 4), CtSlot(24, 2));
  mapping.add(CtSlot(10, 4), CtSlot(24, 3));
  mapping.add(CtSlot(30, 7), CtSlot(24, 4));
  mapping.add(CtSlot(6, 5), CtSlot(24, 5));
  mapping.add(CtSlot(0, 6), CtSlot(24, 6));
  mapping.add(CtSlot(27, 2), CtSlot(24, 7));
  mapping.add(CtSlot(20, 0), CtSlot(25, 0));
  mapping.add(CtSlot(1, 0), CtSlot(25, 1));
  mapping.add(CtSlot(21, 3), CtSlot(25, 2));
  mapping.add(CtSlot(25, 6), CtSlot(25, 3));
  mapping.add(CtSlot(21, 6), CtSlot(25, 4));
  mapping.add(CtSlot(7, 3), CtSlot(25, 5));
  mapping.add(CtSlot(7, 5), CtSlot(25, 6));
  mapping.add(CtSlot(11, 3), CtSlot(25, 7));
  mapping.add(CtSlot(25, 4), CtSlot(26, 0));
  mapping.add(CtSlot(6, 7), CtSlot(26, 1));
  mapping.add(CtSlot(17, 3), CtSlot(26, 2));
  mapping.add(CtSlot(2, 3), CtSlot(26, 3));
  mapping.add(CtSlot(4, 5), CtSlot(26, 4));
  mapping.add(CtSlot(1, 6), CtSlot(26, 5));
  mapping.add(CtSlot(9, 1), CtSlot(26, 6));
  mapping.add(CtSlot(3, 3), CtSlot(26, 7));
  mapping.add(CtSlot(8, 6), CtSlot(27, 0));
  mapping.add(CtSlot(13, 3), CtSlot(27, 1));
  mapping.add(CtSlot(16, 4), CtSlot(27, 2));
  mapping.add(CtSlot(16, 4), CtSlot(27, 3));
  mapping.add(CtSlot(29, 3), CtSlot(27, 4));
  mapping.add(CtSlot(15, 7), CtSlot(27, 5));
  mapping.add(CtSlot(31, 3), CtSlot(27, 6));
  mapping.add(CtSlot(13, 0), CtSlot(27, 7));
  mapping.add(CtSlot(28, 7), CtSlot(28, 0));
  mapping.add(CtSlot(12, 2), CtSlot(28, 1));
  mapping.add(CtSlot(7, 5), CtSlot(28, 2));
  mapping.add(CtSlot(2, 1), CtSlot(28, 3));
  mapping.add(CtSlot(14, 5), CtSlot(28, 4));
  mapping.add(CtSlot(16, 1), CtSlot(28, 5));
  mapping.add(CtSlot(19, 6), CtSlot(28, 6));
  mapping.add(CtSlot(3, 2), CtSlot(28, 7));
  mapping.add(CtSlot(17, 5), CtSlot(29, 0));
  mapping.add(CtSlot(10, 1), CtSlot(29, 1));
  mapping.add(CtSlot(1, 3), CtSlot(29, 2));
  mapping.add(CtSlot(16, 4), CtSlot(29, 3));
  mapping.add(CtSlot(27, 5), CtSlot(29, 4));
  mapping.add(CtSlot(10, 5), CtSlot(29, 5));
  mapping.add(CtSlot(30, 6), CtSlot(29, 6));
  mapping.add(CtSlot(15, 5), CtSlot(29, 7));
  mapping.add(CtSlot(25, 7), CtSlot(30, 0));
  mapping.add(CtSlot(23, 0), CtSlot(30, 1));
  mapping.add(CtSlot(26, 5), CtSlot(30, 2));
  mapping.add(CtSlot(1, 1), CtSlot(30, 3));
  mapping.add(CtSlot(0, 1), CtSlot(30, 4));
  mapping.add(CtSlot(31, 2), CtSlot(30, 5));
  mapping.add(CtSlot(29, 6), CtSlot(30, 6));
  mapping.add(CtSlot(12, 0), CtSlot(30, 7));
  mapping.add(CtSlot(5, 5), CtSlot(31, 0));
  mapping.add(CtSlot(30, 6), CtSlot(31, 1));
  mapping.add(CtSlot(22, 3), CtSlot(31, 2));
  mapping.add(CtSlot(16, 2), CtSlot(31, 3));
  mapping.add(CtSlot(25, 4), CtSlot(31, 4));
  mapping.add(CtSlot(17, 6), CtSlot(31, 5));
  mapping.add(CtSlot(30, 0), CtSlot(31, 6));
  mapping.add(CtSlot(28, 2), CtSlot(31, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_21) {
  int64_t numCts = 32;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(1, 2), CtSlot(0, 0));
  mapping.add(CtSlot(14, 2), CtSlot(0, 1));
  mapping.add(CtSlot(26, 5), CtSlot(0, 2));
  mapping.add(CtSlot(15, 7), CtSlot(0, 3));
  mapping.add(CtSlot(12, 4), CtSlot(0, 4));
  mapping.add(CtSlot(23, 4), CtSlot(0, 5));
  mapping.add(CtSlot(13, 1), CtSlot(0, 6));
  mapping.add(CtSlot(4, 0), CtSlot(0, 7));
  mapping.add(CtSlot(13, 4), CtSlot(1, 0));
  mapping.add(CtSlot(20, 3), CtSlot(1, 1));
  mapping.add(CtSlot(8, 4), CtSlot(1, 2));
  mapping.add(CtSlot(18, 5), CtSlot(1, 3));
  mapping.add(CtSlot(31, 0), CtSlot(1, 4));
  mapping.add(CtSlot(21, 4), CtSlot(1, 5));
  mapping.add(CtSlot(6, 3), CtSlot(1, 6));
  mapping.add(CtSlot(24, 7), CtSlot(1, 7));
  mapping.add(CtSlot(27, 7), CtSlot(2, 0));
  mapping.add(CtSlot(26, 7), CtSlot(2, 1));
  mapping.add(CtSlot(18, 5), CtSlot(2, 2));
  mapping.add(CtSlot(6, 3), CtSlot(2, 3));
  mapping.add(CtSlot(3, 5), CtSlot(2, 4));
  mapping.add(CtSlot(2, 1), CtSlot(2, 5));
  mapping.add(CtSlot(13, 6), CtSlot(2, 6));
  mapping.add(CtSlot(4, 0), CtSlot(2, 7));
  mapping.add(CtSlot(20, 5), CtSlot(3, 0));
  mapping.add(CtSlot(6, 3), CtSlot(3, 1));
  mapping.add(CtSlot(21, 0), CtSlot(3, 2));
  mapping.add(CtSlot(5, 0), CtSlot(3, 3));
  mapping.add(CtSlot(11, 1), CtSlot(3, 4));
  mapping.add(CtSlot(1, 4), CtSlot(3, 5));
  mapping.add(CtSlot(20, 6), CtSlot(3, 6));
  mapping.add(CtSlot(13, 3), CtSlot(3, 7));
  mapping.add(CtSlot(22, 7), CtSlot(4, 0));
  mapping.add(CtSlot(20, 7), CtSlot(4, 1));
  mapping.add(CtSlot(0, 1), CtSlot(4, 2));
  mapping.add(CtSlot(21, 5), CtSlot(4, 3));
  mapping.add(CtSlot(5, 6), CtSlot(4, 4));
  mapping.add(CtSlot(1, 1), CtSlot(4, 5));
  mapping.add(CtSlot(15, 1), CtSlot(4, 6));
  mapping.add(CtSlot(25, 3), CtSlot(4, 7));
  mapping.add(CtSlot(8, 3), CtSlot(5, 0));
  mapping.add(CtSlot(15, 6), CtSlot(5, 1));
  mapping.add(CtSlot(5, 0), CtSlot(5, 2));
  mapping.add(CtSlot(30, 2), CtSlot(5, 3));
  mapping.add(CtSlot(13, 5), CtSlot(5, 4));
  mapping.add(CtSlot(2, 3), CtSlot(5, 5));
  mapping.add(CtSlot(8, 2), CtSlot(5, 6));
  mapping.add(CtSlot(6, 6), CtSlot(5, 7));
  mapping.add(CtSlot(1, 4), CtSlot(6, 0));
  mapping.add(CtSlot(8, 5), CtSlot(6, 1));
  mapping.add(CtSlot(13, 0), CtSlot(6, 2));
  mapping.add(CtSlot(16, 7), CtSlot(6, 3));
  mapping.add(CtSlot(9, 3), CtSlot(6, 4));
  mapping.add(CtSlot(21, 2), CtSlot(6, 5));
  mapping.add(CtSlot(2, 1), CtSlot(6, 6));
  mapping.add(CtSlot(25, 7), CtSlot(6, 7));
  mapping.add(CtSlot(13, 3), CtSlot(7, 0));
  mapping.add(CtSlot(17, 3), CtSlot(7, 1));
  mapping.add(CtSlot(13, 6), CtSlot(7, 2));
  mapping.add(CtSlot(19, 7), CtSlot(7, 3));
  mapping.add(CtSlot(22, 0), CtSlot(7, 4));
  mapping.add(CtSlot(12, 0), CtSlot(7, 5));
  mapping.add(CtSlot(13, 7), CtSlot(7, 6));
  mapping.add(CtSlot(24, 4), CtSlot(7, 7));
  mapping.add(CtSlot(1, 1), CtSlot(8, 0));
  mapping.add(CtSlot(25, 7), CtSlot(8, 1));
  mapping.add(CtSlot(20, 3), CtSlot(8, 2));
  mapping.add(CtSlot(17, 4), CtSlot(8, 3));
  mapping.add(CtSlot(7, 6), CtSlot(8, 4));
  mapping.add(CtSlot(1, 1), CtSlot(8, 5));
  mapping.add(CtSlot(23, 6), CtSlot(8, 6));
  mapping.add(CtSlot(1, 5), CtSlot(8, 7));
  mapping.add(CtSlot(11, 1), CtSlot(9, 0));
  mapping.add(CtSlot(10, 5), CtSlot(9, 1));
  mapping.add(CtSlot(26, 2), CtSlot(9, 2));
  mapping.add(CtSlot(12, 5), CtSlot(9, 3));
  mapping.add(CtSlot(14, 3), CtSlot(9, 4));
  mapping.add(CtSlot(5, 6), CtSlot(9, 5));
  mapping.add(CtSlot(16, 7), CtSlot(9, 6));
  mapping.add(CtSlot(19, 7), CtSlot(9, 7));
  mapping.add(CtSlot(30, 4), CtSlot(10, 0));
  mapping.add(CtSlot(24, 7), CtSlot(10, 1));
  mapping.add(CtSlot(26, 0), CtSlot(10, 2));
  mapping.add(CtSlot(26, 1), CtSlot(10, 3));
  mapping.add(CtSlot(19, 2), CtSlot(10, 4));
  mapping.add(CtSlot(10, 6), CtSlot(10, 5));
  mapping.add(CtSlot(4, 3), CtSlot(10, 6));
  mapping.add(CtSlot(13, 0), CtSlot(10, 7));
  mapping.add(CtSlot(12, 1), CtSlot(11, 0));
  mapping.add(CtSlot(0, 2), CtSlot(11, 1));
  mapping.add(CtSlot(23, 3), CtSlot(11, 2));
  mapping.add(CtSlot(8, 7), CtSlot(11, 3));
  mapping.add(CtSlot(24, 7), CtSlot(11, 4));
  mapping.add(CtSlot(9, 1), CtSlot(11, 5));
  mapping.add(CtSlot(5, 1), CtSlot(11, 6));
  mapping.add(CtSlot(5, 3), CtSlot(11, 7));
  mapping.add(CtSlot(28, 3), CtSlot(12, 0));
  mapping.add(CtSlot(25, 6), CtSlot(12, 1));
  mapping.add(CtSlot(5, 5), CtSlot(12, 2));
  mapping.add(CtSlot(31, 6), CtSlot(12, 3));
  mapping.add(CtSlot(6, 3), CtSlot(12, 4));
  mapping.add(CtSlot(22, 6), CtSlot(12, 5));
  mapping.add(CtSlot(2, 4), CtSlot(12, 6));
  mapping.add(CtSlot(9, 4), CtSlot(12, 7));
  mapping.add(CtSlot(11, 6), CtSlot(13, 0));
  mapping.add(CtSlot(22, 2), CtSlot(13, 1));
  mapping.add(CtSlot(4, 6), CtSlot(13, 2));
  mapping.add(CtSlot(30, 3), CtSlot(13, 3));
  mapping.add(CtSlot(18, 4), CtSlot(13, 4));
  mapping.add(CtSlot(3, 7), CtSlot(13, 5));
  mapping.add(CtSlot(17, 4), CtSlot(13, 6));
  mapping.add(CtSlot(10, 0), CtSlot(13, 7));
  mapping.add(CtSlot(15, 4), CtSlot(14, 0));
  mapping.add(CtSlot(23, 3), CtSlot(14, 1));
  mapping.add(CtSlot(25, 7), CtSlot(14, 2));
  mapping.add(CtSlot(23, 4), CtSlot(14, 3));
  mapping.add(CtSlot(8, 3), CtSlot(14, 4));
  mapping.add(CtSlot(16, 7), CtSlot(14, 5));
  mapping.add(CtSlot(8, 5), CtSlot(14, 6));
  mapping.add(CtSlot(11, 7), CtSlot(14, 7));
  mapping.add(CtSlot(23, 3), CtSlot(15, 0));
  mapping.add(CtSlot(30, 1), CtSlot(15, 1));
  mapping.add(CtSlot(0, 6), CtSlot(15, 2));
  mapping.add(CtSlot(3, 4), CtSlot(15, 3));
  mapping.add(CtSlot(20, 6), CtSlot(15, 4));
  mapping.add(CtSlot(28, 3), CtSlot(15, 5));
  mapping.add(CtSlot(2, 4), CtSlot(15, 6));
  mapping.add(CtSlot(0, 7), CtSlot(15, 7));
  mapping.add(CtSlot(26, 5), CtSlot(16, 0));
  mapping.add(CtSlot(4, 2), CtSlot(16, 1));
  mapping.add(CtSlot(29, 5), CtSlot(16, 2));
  mapping.add(CtSlot(31, 0), CtSlot(16, 3));
  mapping.add(CtSlot(17, 7), CtSlot(16, 4));
  mapping.add(CtSlot(0, 1), CtSlot(16, 5));
  mapping.add(CtSlot(12, 0), CtSlot(16, 6));
  mapping.add(CtSlot(3, 4), CtSlot(16, 7));
  mapping.add(CtSlot(3, 1), CtSlot(17, 0));
  mapping.add(CtSlot(17, 0), CtSlot(17, 1));
  mapping.add(CtSlot(8, 5), CtSlot(17, 2));
  mapping.add(CtSlot(15, 5), CtSlot(17, 3));
  mapping.add(CtSlot(25, 7), CtSlot(17, 4));
  mapping.add(CtSlot(3, 5), CtSlot(17, 5));
  mapping.add(CtSlot(7, 6), CtSlot(17, 6));
  mapping.add(CtSlot(11, 4), CtSlot(17, 7));
  mapping.add(CtSlot(9, 6), CtSlot(18, 0));
  mapping.add(CtSlot(0, 4), CtSlot(18, 1));
  mapping.add(CtSlot(7, 4), CtSlot(18, 2));
  mapping.add(CtSlot(7, 3), CtSlot(18, 3));
  mapping.add(CtSlot(18, 2), CtSlot(18, 4));
  mapping.add(CtSlot(11, 1), CtSlot(18, 5));
  mapping.add(CtSlot(15, 1), CtSlot(18, 6));
  mapping.add(CtSlot(29, 3), CtSlot(18, 7));
  mapping.add(CtSlot(26, 2), CtSlot(19, 0));
  mapping.add(CtSlot(14, 6), CtSlot(19, 1));
  mapping.add(CtSlot(10, 7), CtSlot(19, 2));
  mapping.add(CtSlot(10, 6), CtSlot(19, 3));
  mapping.add(CtSlot(18, 7), CtSlot(19, 4));
  mapping.add(CtSlot(3, 3), CtSlot(19, 5));
  mapping.add(CtSlot(0, 5), CtSlot(19, 6));
  mapping.add(CtSlot(6, 4), CtSlot(19, 7));
  mapping.add(CtSlot(14, 0), CtSlot(20, 0));
  mapping.add(CtSlot(1, 0), CtSlot(20, 1));
  mapping.add(CtSlot(29, 7), CtSlot(20, 2));
  mapping.add(CtSlot(20, 7), CtSlot(20, 3));
  mapping.add(CtSlot(30, 3), CtSlot(20, 4));
  mapping.add(CtSlot(17, 2), CtSlot(20, 5));
  mapping.add(CtSlot(28, 7), CtSlot(20, 6));
  mapping.add(CtSlot(8, 5), CtSlot(20, 7));
  mapping.add(CtSlot(23, 5), CtSlot(21, 0));
  mapping.add(CtSlot(11, 2), CtSlot(21, 1));
  mapping.add(CtSlot(2, 7), CtSlot(21, 2));
  mapping.add(CtSlot(27, 5), CtSlot(21, 3));
  mapping.add(CtSlot(0, 5), CtSlot(21, 4));
  mapping.add(CtSlot(11, 0), CtSlot(21, 5));
  mapping.add(CtSlot(18, 7), CtSlot(21, 6));
  mapping.add(CtSlot(21, 6), CtSlot(21, 7));
  mapping.add(CtSlot(22, 6), CtSlot(22, 0));
  mapping.add(CtSlot(20, 6), CtSlot(22, 1));
  mapping.add(CtSlot(20, 5), CtSlot(22, 2));
  mapping.add(CtSlot(20, 2), CtSlot(22, 3));
  mapping.add(CtSlot(9, 6), CtSlot(22, 4));
  mapping.add(CtSlot(14, 2), CtSlot(22, 5));
  mapping.add(CtSlot(30, 1), CtSlot(22, 6));
  mapping.add(CtSlot(12, 7), CtSlot(22, 7));
  mapping.add(CtSlot(22, 6), CtSlot(23, 0));
  mapping.add(CtSlot(5, 3), CtSlot(23, 1));
  mapping.add(CtSlot(15, 2), CtSlot(23, 2));
  mapping.add(CtSlot(16, 7), CtSlot(23, 3));
  mapping.add(CtSlot(11, 4), CtSlot(23, 4));
  mapping.add(CtSlot(19, 1), CtSlot(23, 5));
  mapping.add(CtSlot(8, 2), CtSlot(23, 6));
  mapping.add(CtSlot(21, 5), CtSlot(23, 7));
  mapping.add(CtSlot(24, 2), CtSlot(24, 0));
  mapping.add(CtSlot(18, 5), CtSlot(24, 1));
  mapping.add(CtSlot(3, 4), CtSlot(24, 2));
  mapping.add(CtSlot(10, 4), CtSlot(24, 3));
  mapping.add(CtSlot(30, 7), CtSlot(24, 4));
  mapping.add(CtSlot(6, 5), CtSlot(24, 5));
  mapping.add(CtSlot(0, 6), CtSlot(24, 6));
  mapping.add(CtSlot(27, 2), CtSlot(24, 7));
  mapping.add(CtSlot(20, 0), CtSlot(25, 0));
  mapping.add(CtSlot(1, 0), CtSlot(25, 1));
  mapping.add(CtSlot(21, 3), CtSlot(25, 2));
  mapping.add(CtSlot(25, 6), CtSlot(25, 3));
  mapping.add(CtSlot(21, 6), CtSlot(25, 4));
  mapping.add(CtSlot(7, 3), CtSlot(25, 5));
  mapping.add(CtSlot(7, 5), CtSlot(25, 6));
  mapping.add(CtSlot(11, 3), CtSlot(25, 7));
  mapping.add(CtSlot(25, 4), CtSlot(26, 0));
  mapping.add(CtSlot(6, 7), CtSlot(26, 1));
  mapping.add(CtSlot(17, 3), CtSlot(26, 2));
  mapping.add(CtSlot(2, 3), CtSlot(26, 3));
  mapping.add(CtSlot(4, 5), CtSlot(26, 4));
  mapping.add(CtSlot(1, 6), CtSlot(26, 5));
  mapping.add(CtSlot(9, 1), CtSlot(26, 6));
  mapping.add(CtSlot(3, 3), CtSlot(26, 7));
  mapping.add(CtSlot(8, 6), CtSlot(27, 0));
  mapping.add(CtSlot(13, 3), CtSlot(27, 1));
  mapping.add(CtSlot(16, 4), CtSlot(27, 2));
  mapping.add(CtSlot(16, 4), CtSlot(27, 3));
  mapping.add(CtSlot(29, 3), CtSlot(27, 4));
  mapping.add(CtSlot(15, 7), CtSlot(27, 5));
  mapping.add(CtSlot(31, 3), CtSlot(27, 6));
  mapping.add(CtSlot(13, 0), CtSlot(27, 7));
  mapping.add(CtSlot(28, 7), CtSlot(28, 0));
  mapping.add(CtSlot(12, 2), CtSlot(28, 1));
  mapping.add(CtSlot(7, 5), CtSlot(28, 2));
  mapping.add(CtSlot(2, 1), CtSlot(28, 3));
  mapping.add(CtSlot(14, 5), CtSlot(28, 4));
  mapping.add(CtSlot(16, 1), CtSlot(28, 5));
  mapping.add(CtSlot(19, 6), CtSlot(28, 6));
  mapping.add(CtSlot(3, 2), CtSlot(28, 7));
  mapping.add(CtSlot(17, 5), CtSlot(29, 0));
  mapping.add(CtSlot(10, 1), CtSlot(29, 1));
  mapping.add(CtSlot(1, 3), CtSlot(29, 2));
  mapping.add(CtSlot(16, 4), CtSlot(29, 3));
  mapping.add(CtSlot(27, 5), CtSlot(29, 4));
  mapping.add(CtSlot(10, 5), CtSlot(29, 5));
  mapping.add(CtSlot(30, 6), CtSlot(29, 6));
  mapping.add(CtSlot(15, 5), CtSlot(29, 7));
  mapping.add(CtSlot(25, 7), CtSlot(30, 0));
  mapping.add(CtSlot(23, 0), CtSlot(30, 1));
  mapping.add(CtSlot(26, 5), CtSlot(30, 2));
  mapping.add(CtSlot(1, 1), CtSlot(30, 3));
  mapping.add(CtSlot(0, 1), CtSlot(30, 4));
  mapping.add(CtSlot(31, 2), CtSlot(30, 5));
  mapping.add(CtSlot(29, 6), CtSlot(30, 6));
  mapping.add(CtSlot(12, 0), CtSlot(30, 7));
  mapping.add(CtSlot(5, 5), CtSlot(31, 0));
  mapping.add(CtSlot(30, 6), CtSlot(31, 1));
  mapping.add(CtSlot(22, 3), CtSlot(31, 2));
  mapping.add(CtSlot(16, 2), CtSlot(31, 3));
  mapping.add(CtSlot(25, 4), CtSlot(31, 4));
  mapping.add(CtSlot(17, 6), CtSlot(31, 5));
  mapping.add(CtSlot(30, 0), CtSlot(31, 6));
  mapping.add(CtSlot(28, 2), CtSlot(31, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_22) {
  int64_t numCts = 32;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(1, 2), CtSlot(0, 0));
  mapping.add(CtSlot(14, 2), CtSlot(0, 1));
  mapping.add(CtSlot(26, 5), CtSlot(0, 2));
  mapping.add(CtSlot(15, 7), CtSlot(0, 3));
  mapping.add(CtSlot(12, 4), CtSlot(0, 4));
  mapping.add(CtSlot(23, 4), CtSlot(0, 5));
  mapping.add(CtSlot(13, 1), CtSlot(0, 6));
  mapping.add(CtSlot(4, 0), CtSlot(0, 7));
  mapping.add(CtSlot(13, 4), CtSlot(1, 0));
  mapping.add(CtSlot(20, 3), CtSlot(1, 1));
  mapping.add(CtSlot(8, 4), CtSlot(1, 2));
  mapping.add(CtSlot(18, 5), CtSlot(1, 3));
  mapping.add(CtSlot(31, 0), CtSlot(1, 4));
  mapping.add(CtSlot(21, 4), CtSlot(1, 5));
  mapping.add(CtSlot(6, 3), CtSlot(1, 6));
  mapping.add(CtSlot(24, 7), CtSlot(1, 7));
  mapping.add(CtSlot(27, 7), CtSlot(2, 0));
  mapping.add(CtSlot(26, 7), CtSlot(2, 1));
  mapping.add(CtSlot(18, 5), CtSlot(2, 2));
  mapping.add(CtSlot(6, 3), CtSlot(2, 3));
  mapping.add(CtSlot(3, 5), CtSlot(2, 4));
  mapping.add(CtSlot(2, 1), CtSlot(2, 5));
  mapping.add(CtSlot(13, 6), CtSlot(2, 6));
  mapping.add(CtSlot(4, 0), CtSlot(2, 7));
  mapping.add(CtSlot(20, 5), CtSlot(3, 0));
  mapping.add(CtSlot(6, 3), CtSlot(3, 1));
  mapping.add(CtSlot(21, 0), CtSlot(3, 2));
  mapping.add(CtSlot(5, 0), CtSlot(3, 3));
  mapping.add(CtSlot(11, 1), CtSlot(3, 4));
  mapping.add(CtSlot(1, 4), CtSlot(3, 5));
  mapping.add(CtSlot(20, 6), CtSlot(3, 6));
  mapping.add(CtSlot(13, 3), CtSlot(3, 7));
  mapping.add(CtSlot(22, 7), CtSlot(4, 0));
  mapping.add(CtSlot(20, 7), CtSlot(4, 1));
  mapping.add(CtSlot(0, 1), CtSlot(4, 2));
  mapping.add(CtSlot(21, 5), CtSlot(4, 3));
  mapping.add(CtSlot(5, 6), CtSlot(4, 4));
  mapping.add(CtSlot(1, 1), CtSlot(4, 5));
  mapping.add(CtSlot(15, 1), CtSlot(4, 6));
  mapping.add(CtSlot(25, 3), CtSlot(4, 7));
  mapping.add(CtSlot(8, 3), CtSlot(5, 0));
  mapping.add(CtSlot(15, 6), CtSlot(5, 1));
  mapping.add(CtSlot(5, 0), CtSlot(5, 2));
  mapping.add(CtSlot(30, 2), CtSlot(5, 3));
  mapping.add(CtSlot(13, 5), CtSlot(5, 4));
  mapping.add(CtSlot(2, 3), CtSlot(5, 5));
  mapping.add(CtSlot(8, 2), CtSlot(5, 6));
  mapping.add(CtSlot(6, 6), CtSlot(5, 7));
  mapping.add(CtSlot(1, 4), CtSlot(6, 0));
  mapping.add(CtSlot(8, 5), CtSlot(6, 1));
  mapping.add(CtSlot(13, 0), CtSlot(6, 2));
  mapping.add(CtSlot(16, 7), CtSlot(6, 3));
  mapping.add(CtSlot(9, 3), CtSlot(6, 4));
  mapping.add(CtSlot(21, 2), CtSlot(6, 5));
  mapping.add(CtSlot(2, 1), CtSlot(6, 6));
  mapping.add(CtSlot(25, 7), CtSlot(6, 7));
  mapping.add(CtSlot(13, 3), CtSlot(7, 0));
  mapping.add(CtSlot(17, 3), CtSlot(7, 1));
  mapping.add(CtSlot(13, 6), CtSlot(7, 2));
  mapping.add(CtSlot(19, 7), CtSlot(7, 3));
  mapping.add(CtSlot(22, 0), CtSlot(7, 4));
  mapping.add(CtSlot(12, 0), CtSlot(7, 5));
  mapping.add(CtSlot(13, 7), CtSlot(7, 6));
  mapping.add(CtSlot(24, 4), CtSlot(7, 7));
  mapping.add(CtSlot(1, 1), CtSlot(8, 0));
  mapping.add(CtSlot(25, 7), CtSlot(8, 1));
  mapping.add(CtSlot(20, 3), CtSlot(8, 2));
  mapping.add(CtSlot(17, 4), CtSlot(8, 3));
  mapping.add(CtSlot(7, 6), CtSlot(8, 4));
  mapping.add(CtSlot(1, 1), CtSlot(8, 5));
  mapping.add(CtSlot(23, 6), CtSlot(8, 6));
  mapping.add(CtSlot(1, 5), CtSlot(8, 7));
  mapping.add(CtSlot(11, 1), CtSlot(9, 0));
  mapping.add(CtSlot(10, 5), CtSlot(9, 1));
  mapping.add(CtSlot(26, 2), CtSlot(9, 2));
  mapping.add(CtSlot(12, 5), CtSlot(9, 3));
  mapping.add(CtSlot(14, 3), CtSlot(9, 4));
  mapping.add(CtSlot(5, 6), CtSlot(9, 5));
  mapping.add(CtSlot(16, 7), CtSlot(9, 6));
  mapping.add(CtSlot(19, 7), CtSlot(9, 7));
  mapping.add(CtSlot(30, 4), CtSlot(10, 0));
  mapping.add(CtSlot(24, 7), CtSlot(10, 1));
  mapping.add(CtSlot(26, 0), CtSlot(10, 2));
  mapping.add(CtSlot(26, 1), CtSlot(10, 3));
  mapping.add(CtSlot(19, 2), CtSlot(10, 4));
  mapping.add(CtSlot(10, 6), CtSlot(10, 5));
  mapping.add(CtSlot(4, 3), CtSlot(10, 6));
  mapping.add(CtSlot(13, 0), CtSlot(10, 7));
  mapping.add(CtSlot(12, 1), CtSlot(11, 0));
  mapping.add(CtSlot(0, 2), CtSlot(11, 1));
  mapping.add(CtSlot(23, 3), CtSlot(11, 2));
  mapping.add(CtSlot(8, 7), CtSlot(11, 3));
  mapping.add(CtSlot(24, 7), CtSlot(11, 4));
  mapping.add(CtSlot(9, 1), CtSlot(11, 5));
  mapping.add(CtSlot(5, 1), CtSlot(11, 6));
  mapping.add(CtSlot(5, 3), CtSlot(11, 7));
  mapping.add(CtSlot(28, 3), CtSlot(12, 0));
  mapping.add(CtSlot(25, 6), CtSlot(12, 1));
  mapping.add(CtSlot(5, 5), CtSlot(12, 2));
  mapping.add(CtSlot(31, 6), CtSlot(12, 3));
  mapping.add(CtSlot(6, 3), CtSlot(12, 4));
  mapping.add(CtSlot(22, 6), CtSlot(12, 5));
  mapping.add(CtSlot(2, 4), CtSlot(12, 6));
  mapping.add(CtSlot(9, 4), CtSlot(12, 7));
  mapping.add(CtSlot(11, 6), CtSlot(13, 0));
  mapping.add(CtSlot(22, 2), CtSlot(13, 1));
  mapping.add(CtSlot(4, 6), CtSlot(13, 2));
  mapping.add(CtSlot(30, 3), CtSlot(13, 3));
  mapping.add(CtSlot(18, 4), CtSlot(13, 4));
  mapping.add(CtSlot(3, 7), CtSlot(13, 5));
  mapping.add(CtSlot(17, 4), CtSlot(13, 6));
  mapping.add(CtSlot(10, 0), CtSlot(13, 7));
  mapping.add(CtSlot(15, 4), CtSlot(14, 0));
  mapping.add(CtSlot(23, 3), CtSlot(14, 1));
  mapping.add(CtSlot(25, 7), CtSlot(14, 2));
  mapping.add(CtSlot(23, 4), CtSlot(14, 3));
  mapping.add(CtSlot(8, 3), CtSlot(14, 4));
  mapping.add(CtSlot(16, 7), CtSlot(14, 5));
  mapping.add(CtSlot(8, 5), CtSlot(14, 6));
  mapping.add(CtSlot(11, 7), CtSlot(14, 7));
  mapping.add(CtSlot(23, 3), CtSlot(15, 0));
  mapping.add(CtSlot(30, 1), CtSlot(15, 1));
  mapping.add(CtSlot(0, 6), CtSlot(15, 2));
  mapping.add(CtSlot(3, 4), CtSlot(15, 3));
  mapping.add(CtSlot(20, 6), CtSlot(15, 4));
  mapping.add(CtSlot(28, 3), CtSlot(15, 5));
  mapping.add(CtSlot(2, 4), CtSlot(15, 6));
  mapping.add(CtSlot(0, 7), CtSlot(15, 7));
  mapping.add(CtSlot(26, 5), CtSlot(16, 0));
  mapping.add(CtSlot(4, 2), CtSlot(16, 1));
  mapping.add(CtSlot(29, 5), CtSlot(16, 2));
  mapping.add(CtSlot(31, 0), CtSlot(16, 3));
  mapping.add(CtSlot(17, 7), CtSlot(16, 4));
  mapping.add(CtSlot(0, 1), CtSlot(16, 5));
  mapping.add(CtSlot(12, 0), CtSlot(16, 6));
  mapping.add(CtSlot(3, 4), CtSlot(16, 7));
  mapping.add(CtSlot(3, 1), CtSlot(17, 0));
  mapping.add(CtSlot(17, 0), CtSlot(17, 1));
  mapping.add(CtSlot(8, 5), CtSlot(17, 2));
  mapping.add(CtSlot(15, 5), CtSlot(17, 3));
  mapping.add(CtSlot(25, 7), CtSlot(17, 4));
  mapping.add(CtSlot(3, 5), CtSlot(17, 5));
  mapping.add(CtSlot(7, 6), CtSlot(17, 6));
  mapping.add(CtSlot(11, 4), CtSlot(17, 7));
  mapping.add(CtSlot(9, 6), CtSlot(18, 0));
  mapping.add(CtSlot(0, 4), CtSlot(18, 1));
  mapping.add(CtSlot(7, 4), CtSlot(18, 2));
  mapping.add(CtSlot(7, 3), CtSlot(18, 3));
  mapping.add(CtSlot(18, 2), CtSlot(18, 4));
  mapping.add(CtSlot(11, 1), CtSlot(18, 5));
  mapping.add(CtSlot(15, 1), CtSlot(18, 6));
  mapping.add(CtSlot(29, 3), CtSlot(18, 7));
  mapping.add(CtSlot(26, 2), CtSlot(19, 0));
  mapping.add(CtSlot(14, 6), CtSlot(19, 1));
  mapping.add(CtSlot(10, 7), CtSlot(19, 2));
  mapping.add(CtSlot(10, 6), CtSlot(19, 3));
  mapping.add(CtSlot(15, 7), CtSlot(19, 4));
  mapping.add(CtSlot(3, 3), CtSlot(19, 5));
  mapping.add(CtSlot(0, 5), CtSlot(19, 6));
  mapping.add(CtSlot(6, 4), CtSlot(19, 7));
  mapping.add(CtSlot(14, 0), CtSlot(20, 0));
  mapping.add(CtSlot(1, 0), CtSlot(20, 1));
  mapping.add(CtSlot(29, 7), CtSlot(20, 2));
  mapping.add(CtSlot(20, 7), CtSlot(20, 3));
  mapping.add(CtSlot(30, 3), CtSlot(20, 4));
  mapping.add(CtSlot(17, 2), CtSlot(20, 5));
  mapping.add(CtSlot(28, 7), CtSlot(20, 6));
  mapping.add(CtSlot(8, 5), CtSlot(20, 7));
  mapping.add(CtSlot(23, 5), CtSlot(21, 0));
  mapping.add(CtSlot(11, 2), CtSlot(21, 1));
  mapping.add(CtSlot(2, 7), CtSlot(21, 2));
  mapping.add(CtSlot(27, 5), CtSlot(21, 3));
  mapping.add(CtSlot(0, 5), CtSlot(21, 4));
  mapping.add(CtSlot(11, 0), CtSlot(21, 5));
  mapping.add(CtSlot(18, 7), CtSlot(21, 6));
  mapping.add(CtSlot(21, 6), CtSlot(21, 7));
  mapping.add(CtSlot(22, 6), CtSlot(22, 0));
  mapping.add(CtSlot(20, 6), CtSlot(22, 1));
  mapping.add(CtSlot(20, 5), CtSlot(22, 2));
  mapping.add(CtSlot(20, 2), CtSlot(22, 3));
  mapping.add(CtSlot(9, 6), CtSlot(22, 4));
  mapping.add(CtSlot(14, 2), CtSlot(22, 5));
  mapping.add(CtSlot(30, 1), CtSlot(22, 6));
  mapping.add(CtSlot(12, 7), CtSlot(22, 7));
  mapping.add(CtSlot(22, 6), CtSlot(23, 0));
  mapping.add(CtSlot(5, 3), CtSlot(23, 1));
  mapping.add(CtSlot(15, 2), CtSlot(23, 2));
  mapping.add(CtSlot(16, 7), CtSlot(23, 3));
  mapping.add(CtSlot(11, 4), CtSlot(23, 4));
  mapping.add(CtSlot(19, 1), CtSlot(23, 5));
  mapping.add(CtSlot(8, 2), CtSlot(23, 6));
  mapping.add(CtSlot(21, 5), CtSlot(23, 7));
  mapping.add(CtSlot(24, 2), CtSlot(24, 0));
  mapping.add(CtSlot(18, 5), CtSlot(24, 1));
  mapping.add(CtSlot(3, 4), CtSlot(24, 2));
  mapping.add(CtSlot(10, 4), CtSlot(24, 3));
  mapping.add(CtSlot(30, 7), CtSlot(24, 4));
  mapping.add(CtSlot(6, 5), CtSlot(24, 5));
  mapping.add(CtSlot(0, 6), CtSlot(24, 6));
  mapping.add(CtSlot(27, 2), CtSlot(24, 7));
  mapping.add(CtSlot(20, 0), CtSlot(25, 0));
  mapping.add(CtSlot(1, 0), CtSlot(25, 1));
  mapping.add(CtSlot(21, 3), CtSlot(25, 2));
  mapping.add(CtSlot(25, 6), CtSlot(25, 3));
  mapping.add(CtSlot(21, 6), CtSlot(25, 4));
  mapping.add(CtSlot(7, 3), CtSlot(25, 5));
  mapping.add(CtSlot(7, 5), CtSlot(25, 6));
  mapping.add(CtSlot(11, 3), CtSlot(25, 7));
  mapping.add(CtSlot(25, 4), CtSlot(26, 0));
  mapping.add(CtSlot(6, 7), CtSlot(26, 1));
  mapping.add(CtSlot(17, 3), CtSlot(26, 2));
  mapping.add(CtSlot(2, 3), CtSlot(26, 3));
  mapping.add(CtSlot(4, 5), CtSlot(26, 4));
  mapping.add(CtSlot(1, 6), CtSlot(26, 5));
  mapping.add(CtSlot(9, 1), CtSlot(26, 6));
  mapping.add(CtSlot(3, 3), CtSlot(26, 7));
  mapping.add(CtSlot(8, 6), CtSlot(27, 0));
  mapping.add(CtSlot(13, 3), CtSlot(27, 1));
  mapping.add(CtSlot(16, 4), CtSlot(27, 2));
  mapping.add(CtSlot(16, 4), CtSlot(27, 3));
  mapping.add(CtSlot(29, 3), CtSlot(27, 4));
  mapping.add(CtSlot(15, 7), CtSlot(27, 5));
  mapping.add(CtSlot(31, 3), CtSlot(27, 6));
  mapping.add(CtSlot(13, 0), CtSlot(27, 7));
  mapping.add(CtSlot(28, 7), CtSlot(28, 0));
  mapping.add(CtSlot(12, 2), CtSlot(28, 1));
  mapping.add(CtSlot(7, 5), CtSlot(28, 2));
  mapping.add(CtSlot(2, 1), CtSlot(28, 3));
  mapping.add(CtSlot(14, 5), CtSlot(28, 4));
  mapping.add(CtSlot(16, 1), CtSlot(28, 5));
  mapping.add(CtSlot(19, 6), CtSlot(28, 6));
  mapping.add(CtSlot(3, 2), CtSlot(28, 7));
  mapping.add(CtSlot(17, 5), CtSlot(29, 0));
  mapping.add(CtSlot(10, 1), CtSlot(29, 1));
  mapping.add(CtSlot(1, 3), CtSlot(29, 2));
  mapping.add(CtSlot(16, 4), CtSlot(29, 3));
  mapping.add(CtSlot(27, 5), CtSlot(29, 4));
  mapping.add(CtSlot(10, 5), CtSlot(29, 5));
  mapping.add(CtSlot(30, 6), CtSlot(29, 6));
  mapping.add(CtSlot(15, 5), CtSlot(29, 7));
  mapping.add(CtSlot(25, 7), CtSlot(30, 0));
  mapping.add(CtSlot(23, 0), CtSlot(30, 1));
  mapping.add(CtSlot(26, 5), CtSlot(30, 2));
  mapping.add(CtSlot(1, 1), CtSlot(30, 3));
  mapping.add(CtSlot(0, 1), CtSlot(30, 4));
  mapping.add(CtSlot(31, 2), CtSlot(30, 5));
  mapping.add(CtSlot(29, 6), CtSlot(30, 6));
  mapping.add(CtSlot(12, 0), CtSlot(30, 7));
  mapping.add(CtSlot(5, 5), CtSlot(31, 0));
  mapping.add(CtSlot(30, 6), CtSlot(31, 1));
  mapping.add(CtSlot(22, 3), CtSlot(31, 2));
  mapping.add(CtSlot(16, 2), CtSlot(31, 3));
  mapping.add(CtSlot(25, 4), CtSlot(31, 4));
  mapping.add(CtSlot(17, 6), CtSlot(31, 5));
  mapping.add(CtSlot(30, 0), CtSlot(31, 6));
  mapping.add(CtSlot(28, 2), CtSlot(31, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_23) {
  int64_t numCts = 32;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(1, 2), CtSlot(0, 0));
  mapping.add(CtSlot(14, 2), CtSlot(0, 1));
  mapping.add(CtSlot(26, 5), CtSlot(0, 2));
  mapping.add(CtSlot(15, 7), CtSlot(0, 3));
  mapping.add(CtSlot(12, 4), CtSlot(0, 4));
  mapping.add(CtSlot(23, 4), CtSlot(0, 5));
  mapping.add(CtSlot(13, 1), CtSlot(0, 6));
  mapping.add(CtSlot(4, 0), CtSlot(0, 7));
  mapping.add(CtSlot(13, 4), CtSlot(1, 0));
  mapping.add(CtSlot(20, 3), CtSlot(1, 1));
  mapping.add(CtSlot(8, 4), CtSlot(1, 2));
  mapping.add(CtSlot(18, 5), CtSlot(1, 3));
  mapping.add(CtSlot(31, 0), CtSlot(1, 4));
  mapping.add(CtSlot(21, 4), CtSlot(1, 5));
  mapping.add(CtSlot(6, 3), CtSlot(1, 6));
  mapping.add(CtSlot(24, 7), CtSlot(1, 7));
  mapping.add(CtSlot(27, 7), CtSlot(2, 0));
  mapping.add(CtSlot(26, 7), CtSlot(2, 1));
  mapping.add(CtSlot(18, 5), CtSlot(2, 2));
  mapping.add(CtSlot(6, 3), CtSlot(2, 3));
  mapping.add(CtSlot(3, 5), CtSlot(2, 4));
  mapping.add(CtSlot(2, 1), CtSlot(2, 5));
  mapping.add(CtSlot(13, 6), CtSlot(2, 6));
  mapping.add(CtSlot(4, 0), CtSlot(2, 7));
  mapping.add(CtSlot(20, 5), CtSlot(3, 0));
  mapping.add(CtSlot(6, 3), CtSlot(3, 1));
  mapping.add(CtSlot(21, 0), CtSlot(3, 2));
  mapping.add(CtSlot(5, 0), CtSlot(3, 3));
  mapping.add(CtSlot(11, 1), CtSlot(3, 4));
  mapping.add(CtSlot(1, 4), CtSlot(3, 5));
  mapping.add(CtSlot(20, 6), CtSlot(3, 6));
  mapping.add(CtSlot(13, 3), CtSlot(3, 7));
  mapping.add(CtSlot(22, 7), CtSlot(4, 0));
  mapping.add(CtSlot(20, 7), CtSlot(4, 1));
  mapping.add(CtSlot(0, 1), CtSlot(4, 2));
  mapping.add(CtSlot(21, 5), CtSlot(4, 3));
  mapping.add(CtSlot(5, 6), CtSlot(4, 4));
  mapping.add(CtSlot(1, 1), CtSlot(4, 5));
  mapping.add(CtSlot(15, 1), CtSlot(4, 6));
  mapping.add(CtSlot(25, 3), CtSlot(4, 7));
  mapping.add(CtSlot(8, 3), CtSlot(5, 0));
  mapping.add(CtSlot(15, 6), CtSlot(5, 1));
  mapping.add(CtSlot(5, 0), CtSlot(5, 2));
  mapping.add(CtSlot(30, 2), CtSlot(5, 3));
  mapping.add(CtSlot(13, 5), CtSlot(5, 4));
  mapping.add(CtSlot(2, 3), CtSlot(5, 5));
  mapping.add(CtSlot(8, 2), CtSlot(5, 6));
  mapping.add(CtSlot(6, 6), CtSlot(5, 7));
  mapping.add(CtSlot(1, 4), CtSlot(6, 0));
  mapping.add(CtSlot(8, 5), CtSlot(6, 1));
  mapping.add(CtSlot(13, 0), CtSlot(6, 2));
  mapping.add(CtSlot(16, 7), CtSlot(6, 3));
  mapping.add(CtSlot(9, 3), CtSlot(6, 4));
  mapping.add(CtSlot(21, 2), CtSlot(6, 5));
  mapping.add(CtSlot(2, 1), CtSlot(6, 6));
  mapping.add(CtSlot(25, 7), CtSlot(6, 7));
  mapping.add(CtSlot(13, 3), CtSlot(7, 0));
  mapping.add(CtSlot(17, 3), CtSlot(7, 1));
  mapping.add(CtSlot(13, 6), CtSlot(7, 2));
  mapping.add(CtSlot(19, 7), CtSlot(7, 3));
  mapping.add(CtSlot(22, 0), CtSlot(7, 4));
  mapping.add(CtSlot(12, 0), CtSlot(7, 5));
  mapping.add(CtSlot(13, 7), CtSlot(7, 6));
  mapping.add(CtSlot(24, 4), CtSlot(7, 7));
  mapping.add(CtSlot(1, 1), CtSlot(8, 0));
  mapping.add(CtSlot(25, 7), CtSlot(8, 1));
  mapping.add(CtSlot(20, 3), CtSlot(8, 2));
  mapping.add(CtSlot(17, 4), CtSlot(8, 3));
  mapping.add(CtSlot(7, 6), CtSlot(8, 4));
  mapping.add(CtSlot(1, 1), CtSlot(8, 5));
  mapping.add(CtSlot(23, 6), CtSlot(8, 6));
  mapping.add(CtSlot(1, 5), CtSlot(8, 7));
  mapping.add(CtSlot(11, 1), CtSlot(9, 0));
  mapping.add(CtSlot(10, 5), CtSlot(9, 1));
  mapping.add(CtSlot(26, 2), CtSlot(9, 2));
  mapping.add(CtSlot(12, 5), CtSlot(9, 3));
  mapping.add(CtSlot(14, 3), CtSlot(9, 4));
  mapping.add(CtSlot(5, 6), CtSlot(9, 5));
  mapping.add(CtSlot(16, 7), CtSlot(9, 6));
  mapping.add(CtSlot(19, 7), CtSlot(9, 7));
  mapping.add(CtSlot(30, 4), CtSlot(10, 0));
  mapping.add(CtSlot(24, 7), CtSlot(10, 1));
  mapping.add(CtSlot(26, 0), CtSlot(10, 2));
  mapping.add(CtSlot(26, 1), CtSlot(10, 3));
  mapping.add(CtSlot(19, 2), CtSlot(10, 4));
  mapping.add(CtSlot(10, 6), CtSlot(10, 5));
  mapping.add(CtSlot(4, 3), CtSlot(10, 6));
  mapping.add(CtSlot(13, 0), CtSlot(10, 7));
  mapping.add(CtSlot(12, 1), CtSlot(11, 0));
  mapping.add(CtSlot(0, 2), CtSlot(11, 1));
  mapping.add(CtSlot(23, 3), CtSlot(11, 2));
  mapping.add(CtSlot(8, 7), CtSlot(11, 3));
  mapping.add(CtSlot(24, 7), CtSlot(11, 4));
  mapping.add(CtSlot(9, 1), CtSlot(11, 5));
  mapping.add(CtSlot(5, 1), CtSlot(11, 6));
  mapping.add(CtSlot(5, 3), CtSlot(11, 7));
  mapping.add(CtSlot(28, 3), CtSlot(12, 0));
  mapping.add(CtSlot(25, 6), CtSlot(12, 1));
  mapping.add(CtSlot(5, 5), CtSlot(12, 2));
  mapping.add(CtSlot(31, 6), CtSlot(12, 3));
  mapping.add(CtSlot(6, 3), CtSlot(12, 4));
  mapping.add(CtSlot(22, 6), CtSlot(12, 5));
  mapping.add(CtSlot(2, 4), CtSlot(12, 6));
  mapping.add(CtSlot(9, 4), CtSlot(12, 7));
  mapping.add(CtSlot(11, 6), CtSlot(13, 0));
  mapping.add(CtSlot(22, 2), CtSlot(13, 1));
  mapping.add(CtSlot(4, 6), CtSlot(13, 2));
  mapping.add(CtSlot(30, 3), CtSlot(13, 3));
  mapping.add(CtSlot(18, 4), CtSlot(13, 4));
  mapping.add(CtSlot(3, 7), CtSlot(13, 5));
  mapping.add(CtSlot(17, 4), CtSlot(13, 6));
  mapping.add(CtSlot(10, 0), CtSlot(13, 7));
  mapping.add(CtSlot(15, 4), CtSlot(14, 0));
  mapping.add(CtSlot(23, 3), CtSlot(14, 1));
  mapping.add(CtSlot(25, 7), CtSlot(14, 2));
  mapping.add(CtSlot(23, 4), CtSlot(14, 3));
  mapping.add(CtSlot(8, 3), CtSlot(14, 4));
  mapping.add(CtSlot(16, 7), CtSlot(14, 5));
  mapping.add(CtSlot(8, 5), CtSlot(14, 6));
  mapping.add(CtSlot(11, 7), CtSlot(14, 7));
  mapping.add(CtSlot(23, 3), CtSlot(15, 0));
  mapping.add(CtSlot(30, 4), CtSlot(15, 1));
  mapping.add(CtSlot(0, 6), CtSlot(15, 2));
  mapping.add(CtSlot(3, 4), CtSlot(15, 3));
  mapping.add(CtSlot(20, 6), CtSlot(15, 4));
  mapping.add(CtSlot(28, 3), CtSlot(15, 5));
  mapping.add(CtSlot(2, 4), CtSlot(15, 6));
  mapping.add(CtSlot(0, 7), CtSlot(15, 7));
  mapping.add(CtSlot(26, 5), CtSlot(16, 0));
  mapping.add(CtSlot(4, 2), CtSlot(16, 1));
  mapping.add(CtSlot(29, 5), CtSlot(16, 2));
  mapping.add(CtSlot(31, 0), CtSlot(16, 3));
  mapping.add(CtSlot(17, 7), CtSlot(16, 4));
  mapping.add(CtSlot(0, 1), CtSlot(16, 5));
  mapping.add(CtSlot(12, 0), CtSlot(16, 6));
  mapping.add(CtSlot(3, 4), CtSlot(16, 7));
  mapping.add(CtSlot(3, 1), CtSlot(17, 0));
  mapping.add(CtSlot(17, 0), CtSlot(17, 1));
  mapping.add(CtSlot(8, 5), CtSlot(17, 2));
  mapping.add(CtSlot(15, 5), CtSlot(17, 3));
  mapping.add(CtSlot(25, 7), CtSlot(17, 4));
  mapping.add(CtSlot(3, 5), CtSlot(17, 5));
  mapping.add(CtSlot(7, 6), CtSlot(17, 6));
  mapping.add(CtSlot(11, 4), CtSlot(17, 7));
  mapping.add(CtSlot(9, 6), CtSlot(18, 0));
  mapping.add(CtSlot(0, 4), CtSlot(18, 1));
  mapping.add(CtSlot(7, 4), CtSlot(18, 2));
  mapping.add(CtSlot(7, 3), CtSlot(18, 3));
  mapping.add(CtSlot(18, 2), CtSlot(18, 4));
  mapping.add(CtSlot(11, 1), CtSlot(18, 5));
  mapping.add(CtSlot(15, 1), CtSlot(18, 6));
  mapping.add(CtSlot(29, 3), CtSlot(18, 7));
  mapping.add(CtSlot(26, 2), CtSlot(19, 0));
  mapping.add(CtSlot(14, 6), CtSlot(19, 1));
  mapping.add(CtSlot(10, 7), CtSlot(19, 2));
  mapping.add(CtSlot(10, 6), CtSlot(19, 3));
  mapping.add(CtSlot(15, 7), CtSlot(19, 4));
  mapping.add(CtSlot(3, 3), CtSlot(19, 5));
  mapping.add(CtSlot(0, 5), CtSlot(19, 6));
  mapping.add(CtSlot(6, 4), CtSlot(19, 7));
  mapping.add(CtSlot(14, 0), CtSlot(20, 0));
  mapping.add(CtSlot(1, 0), CtSlot(20, 1));
  mapping.add(CtSlot(29, 7), CtSlot(20, 2));
  mapping.add(CtSlot(20, 7), CtSlot(20, 3));
  mapping.add(CtSlot(30, 3), CtSlot(20, 4));
  mapping.add(CtSlot(17, 2), CtSlot(20, 5));
  mapping.add(CtSlot(28, 7), CtSlot(20, 6));
  mapping.add(CtSlot(8, 5), CtSlot(20, 7));
  mapping.add(CtSlot(23, 5), CtSlot(21, 0));
  mapping.add(CtSlot(11, 2), CtSlot(21, 1));
  mapping.add(CtSlot(2, 7), CtSlot(21, 2));
  mapping.add(CtSlot(27, 5), CtSlot(21, 3));
  mapping.add(CtSlot(0, 5), CtSlot(21, 4));
  mapping.add(CtSlot(11, 0), CtSlot(21, 5));
  mapping.add(CtSlot(18, 7), CtSlot(21, 6));
  mapping.add(CtSlot(21, 6), CtSlot(21, 7));
  mapping.add(CtSlot(22, 6), CtSlot(22, 0));
  mapping.add(CtSlot(20, 6), CtSlot(22, 1));
  mapping.add(CtSlot(20, 5), CtSlot(22, 2));
  mapping.add(CtSlot(20, 2), CtSlot(22, 3));
  mapping.add(CtSlot(9, 6), CtSlot(22, 4));
  mapping.add(CtSlot(14, 2), CtSlot(22, 5));
  mapping.add(CtSlot(30, 1), CtSlot(22, 6));
  mapping.add(CtSlot(12, 7), CtSlot(22, 7));
  mapping.add(CtSlot(22, 6), CtSlot(23, 0));
  mapping.add(CtSlot(5, 3), CtSlot(23, 1));
  mapping.add(CtSlot(15, 2), CtSlot(23, 2));
  mapping.add(CtSlot(16, 7), CtSlot(23, 3));
  mapping.add(CtSlot(11, 4), CtSlot(23, 4));
  mapping.add(CtSlot(19, 1), CtSlot(23, 5));
  mapping.add(CtSlot(8, 2), CtSlot(23, 6));
  mapping.add(CtSlot(21, 5), CtSlot(23, 7));
  mapping.add(CtSlot(24, 2), CtSlot(24, 0));
  mapping.add(CtSlot(18, 5), CtSlot(24, 1));
  mapping.add(CtSlot(3, 4), CtSlot(24, 2));
  mapping.add(CtSlot(10, 4), CtSlot(24, 3));
  mapping.add(CtSlot(30, 7), CtSlot(24, 4));
  mapping.add(CtSlot(6, 5), CtSlot(24, 5));
  mapping.add(CtSlot(0, 6), CtSlot(24, 6));
  mapping.add(CtSlot(27, 2), CtSlot(24, 7));
  mapping.add(CtSlot(20, 0), CtSlot(25, 0));
  mapping.add(CtSlot(1, 0), CtSlot(25, 1));
  mapping.add(CtSlot(21, 3), CtSlot(25, 2));
  mapping.add(CtSlot(25, 6), CtSlot(25, 3));
  mapping.add(CtSlot(21, 6), CtSlot(25, 4));
  mapping.add(CtSlot(7, 3), CtSlot(25, 5));
  mapping.add(CtSlot(7, 5), CtSlot(25, 6));
  mapping.add(CtSlot(11, 3), CtSlot(25, 7));
  mapping.add(CtSlot(25, 4), CtSlot(26, 0));
  mapping.add(CtSlot(6, 7), CtSlot(26, 1));
  mapping.add(CtSlot(17, 3), CtSlot(26, 2));
  mapping.add(CtSlot(2, 3), CtSlot(26, 3));
  mapping.add(CtSlot(4, 5), CtSlot(26, 4));
  mapping.add(CtSlot(1, 6), CtSlot(26, 5));
  mapping.add(CtSlot(9, 1), CtSlot(26, 6));
  mapping.add(CtSlot(3, 3), CtSlot(26, 7));
  mapping.add(CtSlot(8, 6), CtSlot(27, 0));
  mapping.add(CtSlot(13, 3), CtSlot(27, 1));
  mapping.add(CtSlot(16, 4), CtSlot(27, 2));
  mapping.add(CtSlot(16, 4), CtSlot(27, 3));
  mapping.add(CtSlot(29, 3), CtSlot(27, 4));
  mapping.add(CtSlot(15, 7), CtSlot(27, 5));
  mapping.add(CtSlot(31, 3), CtSlot(27, 6));
  mapping.add(CtSlot(13, 0), CtSlot(27, 7));
  mapping.add(CtSlot(28, 7), CtSlot(28, 0));
  mapping.add(CtSlot(12, 2), CtSlot(28, 1));
  mapping.add(CtSlot(7, 5), CtSlot(28, 2));
  mapping.add(CtSlot(2, 1), CtSlot(28, 3));
  mapping.add(CtSlot(14, 5), CtSlot(28, 4));
  mapping.add(CtSlot(16, 1), CtSlot(28, 5));
  mapping.add(CtSlot(19, 6), CtSlot(28, 6));
  mapping.add(CtSlot(3, 2), CtSlot(28, 7));
  mapping.add(CtSlot(17, 5), CtSlot(29, 0));
  mapping.add(CtSlot(10, 1), CtSlot(29, 1));
  mapping.add(CtSlot(1, 3), CtSlot(29, 2));
  mapping.add(CtSlot(16, 4), CtSlot(29, 3));
  mapping.add(CtSlot(27, 5), CtSlot(29, 4));
  mapping.add(CtSlot(10, 5), CtSlot(29, 5));
  mapping.add(CtSlot(30, 6), CtSlot(29, 6));
  mapping.add(CtSlot(15, 5), CtSlot(29, 7));
  mapping.add(CtSlot(25, 7), CtSlot(30, 0));
  mapping.add(CtSlot(23, 0), CtSlot(30, 1));
  mapping.add(CtSlot(26, 5), CtSlot(30, 2));
  mapping.add(CtSlot(1, 1), CtSlot(30, 3));
  mapping.add(CtSlot(0, 1), CtSlot(30, 4));
  mapping.add(CtSlot(31, 2), CtSlot(30, 5));
  mapping.add(CtSlot(29, 6), CtSlot(30, 6));
  mapping.add(CtSlot(12, 0), CtSlot(30, 7));
  mapping.add(CtSlot(5, 5), CtSlot(31, 0));
  mapping.add(CtSlot(30, 6), CtSlot(31, 1));
  mapping.add(CtSlot(22, 3), CtSlot(31, 2));
  mapping.add(CtSlot(16, 2), CtSlot(31, 3));
  mapping.add(CtSlot(25, 4), CtSlot(31, 4));
  mapping.add(CtSlot(17, 6), CtSlot(31, 5));
  mapping.add(CtSlot(30, 0), CtSlot(31, 6));
  mapping.add(CtSlot(28, 2), CtSlot(31, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_24) {
  int64_t numCts = 32;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(1, 2), CtSlot(0, 0));
  mapping.add(CtSlot(14, 2), CtSlot(0, 1));
  mapping.add(CtSlot(26, 5), CtSlot(0, 2));
  mapping.add(CtSlot(15, 7), CtSlot(0, 3));
  mapping.add(CtSlot(12, 4), CtSlot(0, 4));
  mapping.add(CtSlot(23, 4), CtSlot(0, 5));
  mapping.add(CtSlot(13, 1), CtSlot(0, 6));
  mapping.add(CtSlot(4, 0), CtSlot(0, 7));
  mapping.add(CtSlot(13, 4), CtSlot(1, 0));
  mapping.add(CtSlot(20, 3), CtSlot(1, 1));
  mapping.add(CtSlot(8, 4), CtSlot(1, 2));
  mapping.add(CtSlot(18, 5), CtSlot(1, 3));
  mapping.add(CtSlot(31, 0), CtSlot(1, 4));
  mapping.add(CtSlot(21, 4), CtSlot(1, 5));
  mapping.add(CtSlot(6, 3), CtSlot(1, 6));
  mapping.add(CtSlot(24, 7), CtSlot(1, 7));
  mapping.add(CtSlot(27, 7), CtSlot(2, 0));
  mapping.add(CtSlot(26, 7), CtSlot(2, 1));
  mapping.add(CtSlot(18, 5), CtSlot(2, 2));
  mapping.add(CtSlot(6, 3), CtSlot(2, 3));
  mapping.add(CtSlot(3, 5), CtSlot(2, 4));
  mapping.add(CtSlot(2, 1), CtSlot(2, 5));
  mapping.add(CtSlot(13, 6), CtSlot(2, 6));
  mapping.add(CtSlot(4, 0), CtSlot(2, 7));
  mapping.add(CtSlot(20, 5), CtSlot(3, 0));
  mapping.add(CtSlot(6, 3), CtSlot(3, 1));
  mapping.add(CtSlot(21, 0), CtSlot(3, 2));
  mapping.add(CtSlot(5, 0), CtSlot(3, 3));
  mapping.add(CtSlot(11, 1), CtSlot(3, 4));
  mapping.add(CtSlot(1, 4), CtSlot(3, 5));
  mapping.add(CtSlot(20, 6), CtSlot(3, 6));
  mapping.add(CtSlot(13, 3), CtSlot(3, 7));
  mapping.add(CtSlot(22, 7), CtSlot(4, 0));
  mapping.add(CtSlot(20, 7), CtSlot(4, 1));
  mapping.add(CtSlot(0, 1), CtSlot(4, 2));
  mapping.add(CtSlot(21, 5), CtSlot(4, 3));
  mapping.add(CtSlot(5, 6), CtSlot(4, 4));
  mapping.add(CtSlot(1, 1), CtSlot(4, 5));
  mapping.add(CtSlot(15, 1), CtSlot(4, 6));
  mapping.add(CtSlot(25, 3), CtSlot(4, 7));
  mapping.add(CtSlot(8, 3), CtSlot(5, 0));
  mapping.add(CtSlot(15, 6), CtSlot(5, 1));
  mapping.add(CtSlot(5, 0), CtSlot(5, 2));
  mapping.add(CtSlot(30, 2), CtSlot(5, 3));
  mapping.add(CtSlot(13, 5), CtSlot(5, 4));
  mapping.add(CtSlot(2, 3), CtSlot(5, 5));
  mapping.add(CtSlot(8, 2), CtSlot(5, 6));
  mapping.add(CtSlot(6, 6), CtSlot(5, 7));
  mapping.add(CtSlot(1, 4), CtSlot(6, 0));
  mapping.add(CtSlot(8, 5), CtSlot(6, 1));
  mapping.add(CtSlot(13, 0), CtSlot(6, 2));
  mapping.add(CtSlot(16, 7), CtSlot(6, 3));
  mapping.add(CtSlot(9, 3), CtSlot(6, 4));
  mapping.add(CtSlot(21, 2), CtSlot(6, 5));
  mapping.add(CtSlot(2, 1), CtSlot(6, 6));
  mapping.add(CtSlot(25, 7), CtSlot(6, 7));
  mapping.add(CtSlot(13, 3), CtSlot(7, 0));
  mapping.add(CtSlot(17, 3), CtSlot(7, 1));
  mapping.add(CtSlot(13, 6), CtSlot(7, 2));
  mapping.add(CtSlot(19, 7), CtSlot(7, 3));
  mapping.add(CtSlot(22, 0), CtSlot(7, 4));
  mapping.add(CtSlot(12, 0), CtSlot(7, 5));
  mapping.add(CtSlot(13, 7), CtSlot(7, 6));
  mapping.add(CtSlot(24, 4), CtSlot(7, 7));
  mapping.add(CtSlot(1, 1), CtSlot(8, 0));
  mapping.add(CtSlot(25, 7), CtSlot(8, 1));
  mapping.add(CtSlot(20, 3), CtSlot(8, 2));
  mapping.add(CtSlot(17, 4), CtSlot(8, 3));
  mapping.add(CtSlot(7, 6), CtSlot(8, 4));
  mapping.add(CtSlot(1, 1), CtSlot(8, 5));
  mapping.add(CtSlot(23, 6), CtSlot(8, 6));
  mapping.add(CtSlot(1, 5), CtSlot(8, 7));
  mapping.add(CtSlot(11, 1), CtSlot(9, 0));
  mapping.add(CtSlot(10, 5), CtSlot(9, 1));
  mapping.add(CtSlot(26, 2), CtSlot(9, 2));
  mapping.add(CtSlot(12, 5), CtSlot(9, 3));
  mapping.add(CtSlot(14, 3), CtSlot(9, 4));
  mapping.add(CtSlot(5, 6), CtSlot(9, 5));
  mapping.add(CtSlot(16, 7), CtSlot(9, 6));
  mapping.add(CtSlot(19, 7), CtSlot(9, 7));
  mapping.add(CtSlot(30, 4), CtSlot(10, 0));
  mapping.add(CtSlot(24, 7), CtSlot(10, 1));
  mapping.add(CtSlot(26, 0), CtSlot(10, 2));
  mapping.add(CtSlot(26, 1), CtSlot(10, 3));
  mapping.add(CtSlot(19, 2), CtSlot(10, 4));
  mapping.add(CtSlot(10, 6), CtSlot(10, 5));
  mapping.add(CtSlot(4, 3), CtSlot(10, 6));
  mapping.add(CtSlot(13, 0), CtSlot(10, 7));
  mapping.add(CtSlot(12, 1), CtSlot(11, 0));
  mapping.add(CtSlot(0, 2), CtSlot(11, 1));
  mapping.add(CtSlot(23, 3), CtSlot(11, 2));
  mapping.add(CtSlot(8, 7), CtSlot(11, 3));
  mapping.add(CtSlot(24, 7), CtSlot(11, 4));
  mapping.add(CtSlot(9, 1), CtSlot(11, 5));
  mapping.add(CtSlot(5, 1), CtSlot(11, 6));
  mapping.add(CtSlot(5, 3), CtSlot(11, 7));
  mapping.add(CtSlot(28, 3), CtSlot(12, 0));
  mapping.add(CtSlot(25, 6), CtSlot(12, 1));
  mapping.add(CtSlot(5, 5), CtSlot(12, 2));
  mapping.add(CtSlot(31, 6), CtSlot(12, 3));
  mapping.add(CtSlot(6, 3), CtSlot(12, 4));
  mapping.add(CtSlot(22, 6), CtSlot(12, 5));
  mapping.add(CtSlot(2, 4), CtSlot(12, 6));
  mapping.add(CtSlot(9, 4), CtSlot(12, 7));
  mapping.add(CtSlot(11, 6), CtSlot(13, 0));
  mapping.add(CtSlot(22, 2), CtSlot(13, 1));
  mapping.add(CtSlot(4, 6), CtSlot(13, 2));
  mapping.add(CtSlot(30, 3), CtSlot(13, 3));
  mapping.add(CtSlot(18, 4), CtSlot(13, 4));
  mapping.add(CtSlot(3, 7), CtSlot(13, 5));
  mapping.add(CtSlot(17, 4), CtSlot(13, 6));
  mapping.add(CtSlot(10, 0), CtSlot(13, 7));
  mapping.add(CtSlot(15, 4), CtSlot(14, 0));
  mapping.add(CtSlot(23, 3), CtSlot(14, 1));
  mapping.add(CtSlot(25, 7), CtSlot(14, 2));
  mapping.add(CtSlot(23, 4), CtSlot(14, 3));
  mapping.add(CtSlot(8, 3), CtSlot(14, 4));
  mapping.add(CtSlot(16, 7), CtSlot(14, 5));
  mapping.add(CtSlot(8, 5), CtSlot(14, 6));
  mapping.add(CtSlot(11, 7), CtSlot(14, 7));
  mapping.add(CtSlot(23, 3), CtSlot(15, 0));
  mapping.add(CtSlot(30, 4), CtSlot(15, 1));
  mapping.add(CtSlot(0, 6), CtSlot(15, 2));
  mapping.add(CtSlot(3, 4), CtSlot(15, 3));
  mapping.add(CtSlot(20, 6), CtSlot(15, 4));
  mapping.add(CtSlot(28, 3), CtSlot(15, 5));
  mapping.add(CtSlot(2, 4), CtSlot(15, 6));
  mapping.add(CtSlot(0, 7), CtSlot(15, 7));
  mapping.add(CtSlot(26, 5), CtSlot(16, 0));
  mapping.add(CtSlot(4, 2), CtSlot(16, 1));
  mapping.add(CtSlot(29, 5), CtSlot(16, 2));
  mapping.add(CtSlot(31, 0), CtSlot(16, 3));
  mapping.add(CtSlot(17, 7), CtSlot(16, 4));
  mapping.add(CtSlot(0, 1), CtSlot(16, 5));
  mapping.add(CtSlot(12, 0), CtSlot(16, 6));
  mapping.add(CtSlot(3, 4), CtSlot(16, 7));
  mapping.add(CtSlot(3, 1), CtSlot(17, 0));
  mapping.add(CtSlot(17, 0), CtSlot(17, 1));
  mapping.add(CtSlot(8, 5), CtSlot(17, 2));
  mapping.add(CtSlot(15, 5), CtSlot(17, 3));
  mapping.add(CtSlot(25, 7), CtSlot(17, 4));
  mapping.add(CtSlot(3, 5), CtSlot(17, 5));
  mapping.add(CtSlot(7, 6), CtSlot(17, 6));
  mapping.add(CtSlot(11, 4), CtSlot(17, 7));
  mapping.add(CtSlot(9, 6), CtSlot(18, 0));
  mapping.add(CtSlot(0, 4), CtSlot(18, 1));
  mapping.add(CtSlot(7, 4), CtSlot(18, 2));
  mapping.add(CtSlot(7, 3), CtSlot(18, 3));
  mapping.add(CtSlot(18, 2), CtSlot(18, 4));
  mapping.add(CtSlot(11, 1), CtSlot(18, 5));
  mapping.add(CtSlot(15, 1), CtSlot(18, 6));
  mapping.add(CtSlot(29, 3), CtSlot(18, 7));
  mapping.add(CtSlot(26, 2), CtSlot(19, 0));
  mapping.add(CtSlot(14, 6), CtSlot(19, 1));
  mapping.add(CtSlot(10, 7), CtSlot(19, 2));
  mapping.add(CtSlot(10, 6), CtSlot(19, 3));
  mapping.add(CtSlot(15, 7), CtSlot(19, 4));
  mapping.add(CtSlot(3, 3), CtSlot(19, 5));
  mapping.add(CtSlot(0, 5), CtSlot(19, 6));
  mapping.add(CtSlot(6, 4), CtSlot(19, 7));
  mapping.add(CtSlot(14, 0), CtSlot(20, 0));
  mapping.add(CtSlot(1, 0), CtSlot(20, 1));
  mapping.add(CtSlot(29, 7), CtSlot(20, 2));
  mapping.add(CtSlot(20, 7), CtSlot(20, 3));
  mapping.add(CtSlot(30, 3), CtSlot(20, 4));
  mapping.add(CtSlot(17, 2), CtSlot(20, 5));
  mapping.add(CtSlot(28, 7), CtSlot(20, 6));
  mapping.add(CtSlot(8, 5), CtSlot(20, 7));
  mapping.add(CtSlot(23, 5), CtSlot(21, 0));
  mapping.add(CtSlot(11, 2), CtSlot(21, 1));
  mapping.add(CtSlot(2, 7), CtSlot(21, 2));
  mapping.add(CtSlot(27, 5), CtSlot(21, 3));
  mapping.add(CtSlot(0, 5), CtSlot(21, 4));
  mapping.add(CtSlot(11, 0), CtSlot(21, 5));
  mapping.add(CtSlot(18, 7), CtSlot(21, 6));
  mapping.add(CtSlot(21, 6), CtSlot(21, 7));
  mapping.add(CtSlot(22, 6), CtSlot(22, 0));
  mapping.add(CtSlot(20, 6), CtSlot(22, 1));
  mapping.add(CtSlot(20, 0), CtSlot(22, 2));
  mapping.add(CtSlot(20, 2), CtSlot(22, 3));
  mapping.add(CtSlot(9, 6), CtSlot(22, 4));
  mapping.add(CtSlot(14, 2), CtSlot(22, 5));
  mapping.add(CtSlot(30, 1), CtSlot(22, 6));
  mapping.add(CtSlot(12, 7), CtSlot(22, 7));
  mapping.add(CtSlot(22, 6), CtSlot(23, 0));
  mapping.add(CtSlot(5, 3), CtSlot(23, 1));
  mapping.add(CtSlot(15, 2), CtSlot(23, 2));
  mapping.add(CtSlot(16, 7), CtSlot(23, 3));
  mapping.add(CtSlot(11, 4), CtSlot(23, 4));
  mapping.add(CtSlot(19, 1), CtSlot(23, 5));
  mapping.add(CtSlot(8, 2), CtSlot(23, 6));
  mapping.add(CtSlot(21, 5), CtSlot(23, 7));
  mapping.add(CtSlot(24, 2), CtSlot(24, 0));
  mapping.add(CtSlot(18, 5), CtSlot(24, 1));
  mapping.add(CtSlot(3, 4), CtSlot(24, 2));
  mapping.add(CtSlot(10, 4), CtSlot(24, 3));
  mapping.add(CtSlot(30, 7), CtSlot(24, 4));
  mapping.add(CtSlot(6, 5), CtSlot(24, 5));
  mapping.add(CtSlot(0, 6), CtSlot(24, 6));
  mapping.add(CtSlot(27, 2), CtSlot(24, 7));
  mapping.add(CtSlot(20, 0), CtSlot(25, 0));
  mapping.add(CtSlot(1, 0), CtSlot(25, 1));
  mapping.add(CtSlot(21, 3), CtSlot(25, 2));
  mapping.add(CtSlot(25, 6), CtSlot(25, 3));
  mapping.add(CtSlot(21, 6), CtSlot(25, 4));
  mapping.add(CtSlot(7, 3), CtSlot(25, 5));
  mapping.add(CtSlot(7, 5), CtSlot(25, 6));
  mapping.add(CtSlot(11, 3), CtSlot(25, 7));
  mapping.add(CtSlot(25, 4), CtSlot(26, 0));
  mapping.add(CtSlot(6, 7), CtSlot(26, 1));
  mapping.add(CtSlot(17, 3), CtSlot(26, 2));
  mapping.add(CtSlot(2, 3), CtSlot(26, 3));
  mapping.add(CtSlot(4, 5), CtSlot(26, 4));
  mapping.add(CtSlot(1, 6), CtSlot(26, 5));
  mapping.add(CtSlot(9, 1), CtSlot(26, 6));
  mapping.add(CtSlot(3, 3), CtSlot(26, 7));
  mapping.add(CtSlot(8, 6), CtSlot(27, 0));
  mapping.add(CtSlot(13, 3), CtSlot(27, 1));
  mapping.add(CtSlot(16, 4), CtSlot(27, 2));
  mapping.add(CtSlot(16, 4), CtSlot(27, 3));
  mapping.add(CtSlot(29, 3), CtSlot(27, 4));
  mapping.add(CtSlot(15, 7), CtSlot(27, 5));
  mapping.add(CtSlot(31, 3), CtSlot(27, 6));
  mapping.add(CtSlot(13, 0), CtSlot(27, 7));
  mapping.add(CtSlot(28, 7), CtSlot(28, 0));
  mapping.add(CtSlot(12, 2), CtSlot(28, 1));
  mapping.add(CtSlot(7, 5), CtSlot(28, 2));
  mapping.add(CtSlot(2, 1), CtSlot(28, 3));
  mapping.add(CtSlot(14, 5), CtSlot(28, 4));
  mapping.add(CtSlot(16, 1), CtSlot(28, 5));
  mapping.add(CtSlot(19, 6), CtSlot(28, 6));
  mapping.add(CtSlot(3, 2), CtSlot(28, 7));
  mapping.add(CtSlot(17, 5), CtSlot(29, 0));
  mapping.add(CtSlot(10, 1), CtSlot(29, 1));
  mapping.add(CtSlot(1, 3), CtSlot(29, 2));
  mapping.add(CtSlot(16, 4), CtSlot(29, 3));
  mapping.add(CtSlot(27, 5), CtSlot(29, 4));
  mapping.add(CtSlot(10, 5), CtSlot(29, 5));
  mapping.add(CtSlot(30, 6), CtSlot(29, 6));
  mapping.add(CtSlot(15, 5), CtSlot(29, 7));
  mapping.add(CtSlot(25, 7), CtSlot(30, 0));
  mapping.add(CtSlot(23, 0), CtSlot(30, 1));
  mapping.add(CtSlot(26, 5), CtSlot(30, 2));
  mapping.add(CtSlot(1, 1), CtSlot(30, 3));
  mapping.add(CtSlot(0, 1), CtSlot(30, 4));
  mapping.add(CtSlot(31, 2), CtSlot(30, 5));
  mapping.add(CtSlot(29, 6), CtSlot(30, 6));
  mapping.add(CtSlot(12, 0), CtSlot(30, 7));
  mapping.add(CtSlot(5, 5), CtSlot(31, 0));
  mapping.add(CtSlot(30, 6), CtSlot(31, 1));
  mapping.add(CtSlot(22, 3), CtSlot(31, 2));
  mapping.add(CtSlot(16, 2), CtSlot(31, 3));
  mapping.add(CtSlot(25, 4), CtSlot(31, 4));
  mapping.add(CtSlot(17, 6), CtSlot(31, 5));
  mapping.add(CtSlot(30, 0), CtSlot(31, 6));
  mapping.add(CtSlot(28, 2), CtSlot(31, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_25) {
  int64_t numCts = 32;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(1, 2), CtSlot(0, 0));
  mapping.add(CtSlot(14, 2), CtSlot(0, 1));
  mapping.add(CtSlot(26, 5), CtSlot(0, 2));
  mapping.add(CtSlot(15, 7), CtSlot(0, 3));
  mapping.add(CtSlot(12, 4), CtSlot(0, 4));
  mapping.add(CtSlot(23, 4), CtSlot(0, 5));
  mapping.add(CtSlot(13, 1), CtSlot(0, 6));
  mapping.add(CtSlot(4, 0), CtSlot(0, 7));
  mapping.add(CtSlot(13, 4), CtSlot(1, 0));
  mapping.add(CtSlot(20, 3), CtSlot(1, 1));
  mapping.add(CtSlot(8, 4), CtSlot(1, 2));
  mapping.add(CtSlot(18, 5), CtSlot(1, 3));
  mapping.add(CtSlot(31, 0), CtSlot(1, 4));
  mapping.add(CtSlot(21, 4), CtSlot(1, 5));
  mapping.add(CtSlot(6, 3), CtSlot(1, 6));
  mapping.add(CtSlot(24, 7), CtSlot(1, 7));
  mapping.add(CtSlot(27, 7), CtSlot(2, 0));
  mapping.add(CtSlot(26, 7), CtSlot(2, 1));
  mapping.add(CtSlot(18, 5), CtSlot(2, 2));
  mapping.add(CtSlot(6, 3), CtSlot(2, 3));
  mapping.add(CtSlot(3, 5), CtSlot(2, 4));
  mapping.add(CtSlot(2, 1), CtSlot(2, 5));
  mapping.add(CtSlot(13, 6), CtSlot(2, 6));
  mapping.add(CtSlot(4, 0), CtSlot(2, 7));
  mapping.add(CtSlot(20, 5), CtSlot(3, 0));
  mapping.add(CtSlot(6, 3), CtSlot(3, 1));
  mapping.add(CtSlot(21, 0), CtSlot(3, 2));
  mapping.add(CtSlot(5, 0), CtSlot(3, 3));
  mapping.add(CtSlot(11, 1), CtSlot(3, 4));
  mapping.add(CtSlot(1, 4), CtSlot(3, 5));
  mapping.add(CtSlot(20, 6), CtSlot(3, 6));
  mapping.add(CtSlot(13, 3), CtSlot(3, 7));
  mapping.add(CtSlot(22, 7), CtSlot(4, 0));
  mapping.add(CtSlot(20, 7), CtSlot(4, 1));
  mapping.add(CtSlot(0, 1), CtSlot(4, 2));
  mapping.add(CtSlot(21, 5), CtSlot(4, 3));
  mapping.add(CtSlot(5, 6), CtSlot(4, 4));
  mapping.add(CtSlot(1, 1), CtSlot(4, 5));
  mapping.add(CtSlot(15, 1), CtSlot(4, 6));
  mapping.add(CtSlot(25, 3), CtSlot(4, 7));
  mapping.add(CtSlot(8, 3), CtSlot(5, 0));
  mapping.add(CtSlot(15, 6), CtSlot(5, 1));
  mapping.add(CtSlot(5, 0), CtSlot(5, 2));
  mapping.add(CtSlot(30, 2), CtSlot(5, 3));
  mapping.add(CtSlot(13, 5), CtSlot(5, 4));
  mapping.add(CtSlot(2, 3), CtSlot(5, 5));
  mapping.add(CtSlot(8, 2), CtSlot(5, 6));
  mapping.add(CtSlot(6, 6), CtSlot(5, 7));
  mapping.add(CtSlot(1, 4), CtSlot(6, 0));
  mapping.add(CtSlot(8, 5), CtSlot(6, 1));
  mapping.add(CtSlot(13, 0), CtSlot(6, 2));
  mapping.add(CtSlot(16, 7), CtSlot(6, 3));
  mapping.add(CtSlot(9, 3), CtSlot(6, 4));
  mapping.add(CtSlot(21, 2), CtSlot(6, 5));
  mapping.add(CtSlot(2, 1), CtSlot(6, 6));
  mapping.add(CtSlot(25, 7), CtSlot(6, 7));
  mapping.add(CtSlot(13, 3), CtSlot(7, 0));
  mapping.add(CtSlot(17, 3), CtSlot(7, 1));
  mapping.add(CtSlot(13, 6), CtSlot(7, 2));
  mapping.add(CtSlot(19, 7), CtSlot(7, 3));
  mapping.add(CtSlot(22, 0), CtSlot(7, 4));
  mapping.add(CtSlot(12, 0), CtSlot(7, 5));
  mapping.add(CtSlot(13, 7), CtSlot(7, 6));
  mapping.add(CtSlot(24, 4), CtSlot(7, 7));
  mapping.add(CtSlot(1, 1), CtSlot(8, 0));
  mapping.add(CtSlot(25, 7), CtSlot(8, 1));
  mapping.add(CtSlot(20, 3), CtSlot(8, 2));
  mapping.add(CtSlot(17, 4), CtSlot(8, 3));
  mapping.add(CtSlot(7, 6), CtSlot(8, 4));
  mapping.add(CtSlot(1, 1), CtSlot(8, 5));
  mapping.add(CtSlot(23, 6), CtSlot(8, 6));
  mapping.add(CtSlot(1, 5), CtSlot(8, 7));
  mapping.add(CtSlot(11, 1), CtSlot(9, 0));
  mapping.add(CtSlot(10, 5), CtSlot(9, 1));
  mapping.add(CtSlot(26, 2), CtSlot(9, 2));
  mapping.add(CtSlot(12, 5), CtSlot(9, 3));
  mapping.add(CtSlot(14, 3), CtSlot(9, 4));
  mapping.add(CtSlot(5, 6), CtSlot(9, 5));
  mapping.add(CtSlot(16, 7), CtSlot(9, 6));
  mapping.add(CtSlot(19, 7), CtSlot(9, 7));
  mapping.add(CtSlot(30, 4), CtSlot(10, 0));
  mapping.add(CtSlot(24, 7), CtSlot(10, 1));
  mapping.add(CtSlot(26, 0), CtSlot(10, 2));
  mapping.add(CtSlot(26, 1), CtSlot(10, 3));
  mapping.add(CtSlot(19, 2), CtSlot(10, 4));
  mapping.add(CtSlot(10, 6), CtSlot(10, 5));
  mapping.add(CtSlot(4, 3), CtSlot(10, 6));
  mapping.add(CtSlot(13, 0), CtSlot(10, 7));
  mapping.add(CtSlot(12, 1), CtSlot(11, 0));
  mapping.add(CtSlot(0, 2), CtSlot(11, 1));
  mapping.add(CtSlot(23, 3), CtSlot(11, 2));
  mapping.add(CtSlot(8, 7), CtSlot(11, 3));
  mapping.add(CtSlot(24, 7), CtSlot(11, 4));
  mapping.add(CtSlot(9, 1), CtSlot(11, 5));
  mapping.add(CtSlot(5, 1), CtSlot(11, 6));
  mapping.add(CtSlot(5, 3), CtSlot(11, 7));
  mapping.add(CtSlot(28, 3), CtSlot(12, 0));
  mapping.add(CtSlot(25, 6), CtSlot(12, 1));
  mapping.add(CtSlot(5, 5), CtSlot(12, 2));
  mapping.add(CtSlot(31, 6), CtSlot(12, 3));
  mapping.add(CtSlot(6, 3), CtSlot(12, 4));
  mapping.add(CtSlot(22, 6), CtSlot(12, 5));
  mapping.add(CtSlot(2, 4), CtSlot(12, 6));
  mapping.add(CtSlot(9, 4), CtSlot(12, 7));
  mapping.add(CtSlot(11, 6), CtSlot(13, 0));
  mapping.add(CtSlot(22, 2), CtSlot(13, 1));
  mapping.add(CtSlot(4, 6), CtSlot(13, 2));
  mapping.add(CtSlot(30, 3), CtSlot(13, 3));
  mapping.add(CtSlot(18, 4), CtSlot(13, 4));
  mapping.add(CtSlot(3, 7), CtSlot(13, 5));
  mapping.add(CtSlot(17, 4), CtSlot(13, 6));
  mapping.add(CtSlot(10, 0), CtSlot(13, 7));
  mapping.add(CtSlot(15, 4), CtSlot(14, 0));
  mapping.add(CtSlot(23, 3), CtSlot(14, 1));
  mapping.add(CtSlot(25, 7), CtSlot(14, 2));
  mapping.add(CtSlot(23, 4), CtSlot(14, 3));
  mapping.add(CtSlot(8, 3), CtSlot(14, 4));
  mapping.add(CtSlot(16, 7), CtSlot(14, 5));
  mapping.add(CtSlot(8, 5), CtSlot(14, 6));
  mapping.add(CtSlot(11, 7), CtSlot(14, 7));
  mapping.add(CtSlot(23, 3), CtSlot(15, 0));
  mapping.add(CtSlot(30, 4), CtSlot(15, 1));
  mapping.add(CtSlot(0, 6), CtSlot(15, 2));
  mapping.add(CtSlot(3, 4), CtSlot(15, 3));
  mapping.add(CtSlot(20, 6), CtSlot(15, 4));
  mapping.add(CtSlot(28, 3), CtSlot(15, 5));
  mapping.add(CtSlot(2, 4), CtSlot(15, 6));
  mapping.add(CtSlot(0, 7), CtSlot(15, 7));
  mapping.add(CtSlot(26, 5), CtSlot(16, 0));
  mapping.add(CtSlot(4, 2), CtSlot(16, 1));
  mapping.add(CtSlot(29, 5), CtSlot(16, 2));
  mapping.add(CtSlot(31, 0), CtSlot(16, 3));
  mapping.add(CtSlot(17, 7), CtSlot(16, 4));
  mapping.add(CtSlot(0, 1), CtSlot(16, 5));
  mapping.add(CtSlot(12, 0), CtSlot(16, 6));
  mapping.add(CtSlot(3, 4), CtSlot(16, 7));
  mapping.add(CtSlot(3, 1), CtSlot(17, 0));
  mapping.add(CtSlot(17, 0), CtSlot(17, 1));
  mapping.add(CtSlot(8, 5), CtSlot(17, 2));
  mapping.add(CtSlot(15, 5), CtSlot(17, 3));
  mapping.add(CtSlot(25, 7), CtSlot(17, 4));
  mapping.add(CtSlot(3, 5), CtSlot(17, 5));
  mapping.add(CtSlot(7, 6), CtSlot(17, 6));
  mapping.add(CtSlot(11, 4), CtSlot(17, 7));
  mapping.add(CtSlot(9, 6), CtSlot(18, 0));
  mapping.add(CtSlot(0, 4), CtSlot(18, 1));
  mapping.add(CtSlot(7, 4), CtSlot(18, 2));
  mapping.add(CtSlot(7, 3), CtSlot(18, 3));
  mapping.add(CtSlot(18, 2), CtSlot(18, 4));
  mapping.add(CtSlot(11, 1), CtSlot(18, 5));
  mapping.add(CtSlot(15, 1), CtSlot(18, 6));
  mapping.add(CtSlot(29, 3), CtSlot(18, 7));
  mapping.add(CtSlot(26, 2), CtSlot(19, 0));
  mapping.add(CtSlot(14, 6), CtSlot(19, 1));
  mapping.add(CtSlot(10, 7), CtSlot(19, 2));
  mapping.add(CtSlot(10, 6), CtSlot(19, 3));
  mapping.add(CtSlot(15, 7), CtSlot(19, 4));
  mapping.add(CtSlot(3, 3), CtSlot(19, 5));
  mapping.add(CtSlot(0, 5), CtSlot(19, 6));
  mapping.add(CtSlot(6, 4), CtSlot(19, 7));
  mapping.add(CtSlot(14, 0), CtSlot(20, 0));
  mapping.add(CtSlot(1, 0), CtSlot(20, 1));
  mapping.add(CtSlot(29, 7), CtSlot(20, 2));
  mapping.add(CtSlot(20, 7), CtSlot(20, 3));
  mapping.add(CtSlot(30, 3), CtSlot(20, 4));
  mapping.add(CtSlot(17, 2), CtSlot(20, 5));
  mapping.add(CtSlot(28, 7), CtSlot(20, 6));
  mapping.add(CtSlot(8, 5), CtSlot(20, 7));
  mapping.add(CtSlot(23, 5), CtSlot(21, 0));
  mapping.add(CtSlot(11, 2), CtSlot(21, 1));
  mapping.add(CtSlot(2, 7), CtSlot(21, 2));
  mapping.add(CtSlot(27, 5), CtSlot(21, 3));
  mapping.add(CtSlot(0, 5), CtSlot(21, 4));
  mapping.add(CtSlot(11, 0), CtSlot(21, 5));
  mapping.add(CtSlot(18, 7), CtSlot(21, 6));
  mapping.add(CtSlot(21, 6), CtSlot(21, 7));
  mapping.add(CtSlot(3, 6), CtSlot(22, 0));
  mapping.add(CtSlot(20, 6), CtSlot(22, 1));
  mapping.add(CtSlot(20, 0), CtSlot(22, 2));
  mapping.add(CtSlot(20, 2), CtSlot(22, 3));
  mapping.add(CtSlot(9, 6), CtSlot(22, 4));
  mapping.add(CtSlot(14, 2), CtSlot(22, 5));
  mapping.add(CtSlot(30, 1), CtSlot(22, 6));
  mapping.add(CtSlot(12, 7), CtSlot(22, 7));
  mapping.add(CtSlot(22, 6), CtSlot(23, 0));
  mapping.add(CtSlot(5, 3), CtSlot(23, 1));
  mapping.add(CtSlot(15, 2), CtSlot(23, 2));
  mapping.add(CtSlot(16, 7), CtSlot(23, 3));
  mapping.add(CtSlot(11, 4), CtSlot(23, 4));
  mapping.add(CtSlot(19, 1), CtSlot(23, 5));
  mapping.add(CtSlot(8, 2), CtSlot(23, 6));
  mapping.add(CtSlot(21, 5), CtSlot(23, 7));
  mapping.add(CtSlot(24, 2), CtSlot(24, 0));
  mapping.add(CtSlot(18, 5), CtSlot(24, 1));
  mapping.add(CtSlot(3, 4), CtSlot(24, 2));
  mapping.add(CtSlot(10, 4), CtSlot(24, 3));
  mapping.add(CtSlot(30, 7), CtSlot(24, 4));
  mapping.add(CtSlot(6, 5), CtSlot(24, 5));
  mapping.add(CtSlot(0, 6), CtSlot(24, 6));
  mapping.add(CtSlot(27, 2), CtSlot(24, 7));
  mapping.add(CtSlot(20, 0), CtSlot(25, 0));
  mapping.add(CtSlot(1, 0), CtSlot(25, 1));
  mapping.add(CtSlot(21, 3), CtSlot(25, 2));
  mapping.add(CtSlot(25, 6), CtSlot(25, 3));
  mapping.add(CtSlot(21, 6), CtSlot(25, 4));
  mapping.add(CtSlot(7, 3), CtSlot(25, 5));
  mapping.add(CtSlot(7, 5), CtSlot(25, 6));
  mapping.add(CtSlot(11, 3), CtSlot(25, 7));
  mapping.add(CtSlot(25, 4), CtSlot(26, 0));
  mapping.add(CtSlot(6, 7), CtSlot(26, 1));
  mapping.add(CtSlot(17, 3), CtSlot(26, 2));
  mapping.add(CtSlot(2, 3), CtSlot(26, 3));
  mapping.add(CtSlot(4, 5), CtSlot(26, 4));
  mapping.add(CtSlot(1, 6), CtSlot(26, 5));
  mapping.add(CtSlot(9, 1), CtSlot(26, 6));
  mapping.add(CtSlot(3, 3), CtSlot(26, 7));
  mapping.add(CtSlot(8, 6), CtSlot(27, 0));
  mapping.add(CtSlot(13, 3), CtSlot(27, 1));
  mapping.add(CtSlot(16, 4), CtSlot(27, 2));
  mapping.add(CtSlot(16, 4), CtSlot(27, 3));
  mapping.add(CtSlot(29, 3), CtSlot(27, 4));
  mapping.add(CtSlot(15, 7), CtSlot(27, 5));
  mapping.add(CtSlot(31, 3), CtSlot(27, 6));
  mapping.add(CtSlot(13, 0), CtSlot(27, 7));
  mapping.add(CtSlot(28, 7), CtSlot(28, 0));
  mapping.add(CtSlot(12, 2), CtSlot(28, 1));
  mapping.add(CtSlot(7, 5), CtSlot(28, 2));
  mapping.add(CtSlot(2, 1), CtSlot(28, 3));
  mapping.add(CtSlot(14, 5), CtSlot(28, 4));
  mapping.add(CtSlot(16, 1), CtSlot(28, 5));
  mapping.add(CtSlot(19, 6), CtSlot(28, 6));
  mapping.add(CtSlot(3, 2), CtSlot(28, 7));
  mapping.add(CtSlot(17, 5), CtSlot(29, 0));
  mapping.add(CtSlot(10, 1), CtSlot(29, 1));
  mapping.add(CtSlot(1, 3), CtSlot(29, 2));
  mapping.add(CtSlot(16, 4), CtSlot(29, 3));
  mapping.add(CtSlot(27, 5), CtSlot(29, 4));
  mapping.add(CtSlot(10, 5), CtSlot(29, 5));
  mapping.add(CtSlot(30, 6), CtSlot(29, 6));
  mapping.add(CtSlot(15, 5), CtSlot(29, 7));
  mapping.add(CtSlot(25, 7), CtSlot(30, 0));
  mapping.add(CtSlot(23, 0), CtSlot(30, 1));
  mapping.add(CtSlot(26, 5), CtSlot(30, 2));
  mapping.add(CtSlot(1, 1), CtSlot(30, 3));
  mapping.add(CtSlot(0, 1), CtSlot(30, 4));
  mapping.add(CtSlot(31, 2), CtSlot(30, 5));
  mapping.add(CtSlot(29, 6), CtSlot(30, 6));
  mapping.add(CtSlot(12, 0), CtSlot(30, 7));
  mapping.add(CtSlot(5, 5), CtSlot(31, 0));
  mapping.add(CtSlot(30, 6), CtSlot(31, 1));
  mapping.add(CtSlot(22, 3), CtSlot(31, 2));
  mapping.add(CtSlot(16, 2), CtSlot(31, 3));
  mapping.add(CtSlot(25, 4), CtSlot(31, 4));
  mapping.add(CtSlot(17, 6), CtSlot(31, 5));
  mapping.add(CtSlot(30, 0), CtSlot(31, 6));
  mapping.add(CtSlot(28, 2), CtSlot(31, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_26) {
  int64_t numCts = 32;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(16, 0), CtSlot(0, 0));
  mapping.add(CtSlot(0, 1), CtSlot(0, 1));
  mapping.add(CtSlot(26, 4), CtSlot(0, 2));
  mapping.add(CtSlot(13, 1), CtSlot(0, 3));
  mapping.add(CtSlot(24, 2), CtSlot(0, 4));
  mapping.add(CtSlot(2, 5), CtSlot(0, 5));
  mapping.add(CtSlot(18, 6), CtSlot(0, 6));
  mapping.add(CtSlot(16, 0), CtSlot(0, 7));
  mapping.add(CtSlot(10, 3), CtSlot(1, 0));
  mapping.add(CtSlot(25, 4), CtSlot(1, 1));
  mapping.add(CtSlot(1, 5), CtSlot(1, 2));
  mapping.add(CtSlot(28, 1), CtSlot(1, 3));
  mapping.add(CtSlot(7, 6), CtSlot(1, 4));
  mapping.add(CtSlot(14, 7), CtSlot(1, 5));
  mapping.add(CtSlot(30, 1), CtSlot(1, 6));
  mapping.add(CtSlot(14, 0), CtSlot(1, 7));
  mapping.add(CtSlot(1, 5), CtSlot(2, 0));
  mapping.add(CtSlot(24, 2), CtSlot(2, 1));
  mapping.add(CtSlot(18, 0), CtSlot(2, 2));
  mapping.add(CtSlot(20, 1), CtSlot(2, 3));
  mapping.add(CtSlot(3, 5), CtSlot(2, 4));
  mapping.add(CtSlot(30, 6), CtSlot(2, 5));
  mapping.add(CtSlot(19, 2), CtSlot(2, 6));
  mapping.add(CtSlot(26, 5), CtSlot(2, 7));
  mapping.add(CtSlot(9, 3), CtSlot(3, 0));
  mapping.add(CtSlot(3, 2), CtSlot(3, 1));
  mapping.add(CtSlot(25, 5), CtSlot(3, 2));
  mapping.add(CtSlot(6, 0), CtSlot(3, 3));
  mapping.add(CtSlot(17, 4), CtSlot(3, 4));
  mapping.add(CtSlot(6, 1), CtSlot(3, 5));
  mapping.add(CtSlot(10, 4), CtSlot(3, 6));
  mapping.add(CtSlot(5, 0), CtSlot(3, 7));
  mapping.add(CtSlot(31, 5), CtSlot(4, 0));
  mapping.add(CtSlot(2, 6), CtSlot(4, 1));
  mapping.add(CtSlot(14, 0), CtSlot(4, 2));
  mapping.add(CtSlot(14, 5), CtSlot(4, 3));
  mapping.add(CtSlot(20, 2), CtSlot(4, 4));
  mapping.add(CtSlot(10, 3), CtSlot(4, 5));
  mapping.add(CtSlot(30, 6), CtSlot(4, 6));
  mapping.add(CtSlot(17, 1), CtSlot(4, 7));
  mapping.add(CtSlot(8, 4), CtSlot(5, 0));
  mapping.add(CtSlot(2, 7), CtSlot(5, 1));
  mapping.add(CtSlot(19, 0), CtSlot(5, 2));
  mapping.add(CtSlot(23, 5), CtSlot(5, 3));
  mapping.add(CtSlot(0, 5), CtSlot(5, 4));
  mapping.add(CtSlot(3, 1), CtSlot(5, 5));
  mapping.add(CtSlot(14, 5), CtSlot(5, 6));
  mapping.add(CtSlot(7, 5), CtSlot(5, 7));
  mapping.add(CtSlot(20, 1), CtSlot(6, 0));
  mapping.add(CtSlot(6, 2), CtSlot(6, 1));
  mapping.add(CtSlot(28, 0), CtSlot(6, 2));
  mapping.add(CtSlot(15, 4), CtSlot(6, 3));
  mapping.add(CtSlot(3, 3), CtSlot(6, 4));
  mapping.add(CtSlot(25, 3), CtSlot(6, 5));
  mapping.add(CtSlot(6, 2), CtSlot(6, 6));
  mapping.add(CtSlot(23, 1), CtSlot(6, 7));
  mapping.add(CtSlot(29, 1), CtSlot(7, 0));
  mapping.add(CtSlot(2, 0), CtSlot(7, 1));
  mapping.add(CtSlot(20, 5), CtSlot(7, 2));
  mapping.add(CtSlot(28, 5), CtSlot(7, 3));
  mapping.add(CtSlot(6, 4), CtSlot(7, 4));
  mapping.add(CtSlot(15, 1), CtSlot(7, 5));
  mapping.add(CtSlot(22, 4), CtSlot(7, 6));
  mapping.add(CtSlot(15, 6), CtSlot(7, 7));
  mapping.add(CtSlot(7, 1), CtSlot(8, 0));
  mapping.add(CtSlot(3, 5), CtSlot(8, 1));
  mapping.add(CtSlot(6, 3), CtSlot(8, 2));
  mapping.add(CtSlot(9, 6), CtSlot(8, 3));
  mapping.add(CtSlot(17, 6), CtSlot(8, 4));
  mapping.add(CtSlot(28, 6), CtSlot(8, 5));
  mapping.add(CtSlot(13, 7), CtSlot(8, 6));
  mapping.add(CtSlot(29, 2), CtSlot(8, 7));
  mapping.add(CtSlot(21, 0), CtSlot(9, 0));
  mapping.add(CtSlot(27, 7), CtSlot(9, 1));
  mapping.add(CtSlot(15, 2), CtSlot(9, 2));
  mapping.add(CtSlot(12, 1), CtSlot(9, 3));
  mapping.add(CtSlot(30, 5), CtSlot(9, 4));
  mapping.add(CtSlot(15, 7), CtSlot(9, 5));
  mapping.add(CtSlot(27, 3), CtSlot(9, 6));
  mapping.add(CtSlot(12, 1), CtSlot(9, 7));
  mapping.add(CtSlot(29, 6), CtSlot(10, 0));
  mapping.add(CtSlot(31, 2), CtSlot(10, 1));
  mapping.add(CtSlot(17, 7), CtSlot(10, 2));
  mapping.add(CtSlot(15, 7), CtSlot(10, 3));
  mapping.add(CtSlot(18, 3), CtSlot(10, 4));
  mapping.add(CtSlot(17, 5), CtSlot(10, 5));
  mapping.add(CtSlot(27, 1), CtSlot(10, 6));
  mapping.add(CtSlot(11, 2), CtSlot(10, 7));
  mapping.add(CtSlot(24, 2), CtSlot(11, 0));
  mapping.add(CtSlot(6, 0), CtSlot(11, 1));
  mapping.add(CtSlot(20, 1), CtSlot(11, 2));
  mapping.add(CtSlot(28, 2), CtSlot(11, 3));
  mapping.add(CtSlot(15, 7), CtSlot(11, 4));
  mapping.add(CtSlot(25, 6), CtSlot(11, 5));
  mapping.add(CtSlot(17, 3), CtSlot(11, 6));
  mapping.add(CtSlot(22, 6), CtSlot(11, 7));
  mapping.add(CtSlot(18, 2), CtSlot(12, 0));
  mapping.add(CtSlot(22, 2), CtSlot(12, 1));
  mapping.add(CtSlot(14, 0), CtSlot(12, 2));
  mapping.add(CtSlot(28, 5), CtSlot(12, 3));
  mapping.add(CtSlot(11, 3), CtSlot(12, 4));
  mapping.add(CtSlot(16, 3), CtSlot(12, 5));
  mapping.add(CtSlot(9, 1), CtSlot(12, 6));
  mapping.add(CtSlot(6, 7), CtSlot(12, 7));
  mapping.add(CtSlot(10, 5), CtSlot(13, 0));
  mapping.add(CtSlot(27, 7), CtSlot(13, 1));
  mapping.add(CtSlot(24, 0), CtSlot(13, 2));
  mapping.add(CtSlot(26, 6), CtSlot(13, 3));
  mapping.add(CtSlot(19, 6), CtSlot(13, 4));
  mapping.add(CtSlot(24, 7), CtSlot(13, 5));
  mapping.add(CtSlot(18, 3), CtSlot(13, 6));
  mapping.add(CtSlot(19, 0), CtSlot(13, 7));
  mapping.add(CtSlot(25, 4), CtSlot(14, 0));
  mapping.add(CtSlot(3, 7), CtSlot(14, 1));
  mapping.add(CtSlot(26, 0), CtSlot(14, 2));
  mapping.add(CtSlot(6, 2), CtSlot(14, 3));
  mapping.add(CtSlot(25, 2), CtSlot(14, 4));
  mapping.add(CtSlot(13, 3), CtSlot(14, 5));
  mapping.add(CtSlot(12, 4), CtSlot(14, 6));
  mapping.add(CtSlot(20, 5), CtSlot(14, 7));
  mapping.add(CtSlot(8, 5), CtSlot(15, 0));
  mapping.add(CtSlot(4, 1), CtSlot(15, 1));
  mapping.add(CtSlot(0, 5), CtSlot(15, 2));
  mapping.add(CtSlot(20, 0), CtSlot(15, 3));
  mapping.add(CtSlot(18, 7), CtSlot(15, 4));
  mapping.add(CtSlot(26, 4), CtSlot(15, 5));
  mapping.add(CtSlot(6, 4), CtSlot(15, 6));
  mapping.add(CtSlot(15, 3), CtSlot(15, 7));
  mapping.add(CtSlot(4, 4), CtSlot(16, 0));
  mapping.add(CtSlot(22, 5), CtSlot(16, 1));
  mapping.add(CtSlot(0, 0), CtSlot(16, 2));
  mapping.add(CtSlot(1, 2), CtSlot(16, 3));
  mapping.add(CtSlot(12, 7), CtSlot(16, 4));
  mapping.add(CtSlot(19, 5), CtSlot(16, 5));
  mapping.add(CtSlot(14, 0), CtSlot(16, 6));
  mapping.add(CtSlot(22, 3), CtSlot(16, 7));
  mapping.add(CtSlot(10, 0), CtSlot(17, 0));
  mapping.add(CtSlot(14, 7), CtSlot(17, 1));
  mapping.add(CtSlot(12, 5), CtSlot(17, 2));
  mapping.add(CtSlot(22, 1), CtSlot(17, 3));
  mapping.add(CtSlot(18, 0), CtSlot(17, 4));
  mapping.add(CtSlot(14, 5), CtSlot(17, 5));
  mapping.add(CtSlot(3, 0), CtSlot(17, 6));
  mapping.add(CtSlot(10, 5), CtSlot(17, 7));
  mapping.add(CtSlot(2, 1), CtSlot(18, 0));
  mapping.add(CtSlot(28, 4), CtSlot(18, 1));
  mapping.add(CtSlot(20, 1), CtSlot(18, 2));
  mapping.add(CtSlot(14, 5), CtSlot(18, 3));
  mapping.add(CtSlot(15, 6), CtSlot(18, 4));
  mapping.add(CtSlot(15, 5), CtSlot(18, 5));
  mapping.add(CtSlot(16, 1), CtSlot(18, 6));
  mapping.add(CtSlot(0, 7), CtSlot(18, 7));
  mapping.add(CtSlot(16, 5), CtSlot(19, 0));
  mapping.add(CtSlot(1, 6), CtSlot(19, 1));
  mapping.add(CtSlot(15, 5), CtSlot(19, 2));
  mapping.add(CtSlot(18, 6), CtSlot(19, 3));
  mapping.add(CtSlot(6, 0), CtSlot(19, 4));
  mapping.add(CtSlot(30, 6), CtSlot(19, 5));
  mapping.add(CtSlot(5, 7), CtSlot(19, 6));
  mapping.add(CtSlot(9, 2), CtSlot(19, 7));
  mapping.add(CtSlot(11, 0), CtSlot(20, 0));
  mapping.add(CtSlot(31, 6), CtSlot(20, 1));
  mapping.add(CtSlot(12, 2), CtSlot(20, 2));
  mapping.add(CtSlot(25, 7), CtSlot(20, 3));
  mapping.add(CtSlot(12, 3), CtSlot(20, 4));
  mapping.add(CtSlot(21, 3), CtSlot(20, 5));
  mapping.add(CtSlot(13, 2), CtSlot(20, 6));
  mapping.add(CtSlot(3, 7), CtSlot(20, 7));
  mapping.add(CtSlot(29, 5), CtSlot(21, 0));
  mapping.add(CtSlot(18, 7), CtSlot(21, 1));
  mapping.add(CtSlot(0, 5), CtSlot(21, 2));
  mapping.add(CtSlot(17, 1), CtSlot(21, 3));
  mapping.add(CtSlot(17, 0), CtSlot(21, 4));
  mapping.add(CtSlot(19, 0), CtSlot(21, 5));
  mapping.add(CtSlot(25, 0), CtSlot(21, 6));
  mapping.add(CtSlot(29, 0), CtSlot(21, 7));
  mapping.add(CtSlot(18, 3), CtSlot(22, 0));
  mapping.add(CtSlot(19, 4), CtSlot(22, 1));
  mapping.add(CtSlot(6, 0), CtSlot(22, 2));
  mapping.add(CtSlot(5, 1), CtSlot(22, 3));
  mapping.add(CtSlot(10, 2), CtSlot(22, 4));
  mapping.add(CtSlot(30, 4), CtSlot(22, 5));
  mapping.add(CtSlot(30, 7), CtSlot(22, 6));
  mapping.add(CtSlot(20, 3), CtSlot(22, 7));
  mapping.add(CtSlot(15, 1), CtSlot(23, 0));
  mapping.add(CtSlot(5, 1), CtSlot(23, 1));
  mapping.add(CtSlot(11, 1), CtSlot(23, 2));
  mapping.add(CtSlot(30, 0), CtSlot(23, 3));
  mapping.add(CtSlot(27, 3), CtSlot(23, 4));
  mapping.add(CtSlot(2, 3), CtSlot(23, 5));
  mapping.add(CtSlot(19, 1), CtSlot(23, 6));
  mapping.add(CtSlot(16, 0), CtSlot(23, 7));
  mapping.add(CtSlot(27, 6), CtSlot(24, 0));
  mapping.add(CtSlot(13, 7), CtSlot(24, 1));
  mapping.add(CtSlot(11, 7), CtSlot(24, 2));
  mapping.add(CtSlot(30, 1), CtSlot(24, 3));
  mapping.add(CtSlot(22, 7), CtSlot(24, 4));
  mapping.add(CtSlot(3, 5), CtSlot(24, 5));
  mapping.add(CtSlot(2, 4), CtSlot(24, 6));
  mapping.add(CtSlot(1, 7), CtSlot(24, 7));
  mapping.add(CtSlot(10, 5), CtSlot(25, 0));
  mapping.add(CtSlot(6, 3), CtSlot(25, 1));
  mapping.add(CtSlot(25, 5), CtSlot(25, 2));
  mapping.add(CtSlot(2, 2), CtSlot(25, 3));
  mapping.add(CtSlot(23, 2), CtSlot(25, 4));
  mapping.add(CtSlot(0, 6), CtSlot(25, 5));
  mapping.add(CtSlot(17, 1), CtSlot(25, 6));
  mapping.add(CtSlot(22, 3), CtSlot(25, 7));
  mapping.add(CtSlot(10, 4), CtSlot(26, 0));
  mapping.add(CtSlot(9, 0), CtSlot(26, 1));
  mapping.add(CtSlot(25, 7), CtSlot(26, 2));
  mapping.add(CtSlot(9, 0), CtSlot(26, 3));
  mapping.add(CtSlot(16, 0), CtSlot(26, 4));
  mapping.add(CtSlot(18, 4), CtSlot(26, 5));
  mapping.add(CtSlot(19, 5), CtSlot(26, 6));
  mapping.add(CtSlot(20, 6), CtSlot(26, 7));
  mapping.add(CtSlot(19, 7), CtSlot(27, 0));
  mapping.add(CtSlot(22, 2), CtSlot(27, 1));
  mapping.add(CtSlot(11, 0), CtSlot(27, 2));
  mapping.add(CtSlot(6, 4), CtSlot(27, 3));
  mapping.add(CtSlot(8, 7), CtSlot(27, 4));
  mapping.add(CtSlot(23, 0), CtSlot(27, 5));
  mapping.add(CtSlot(13, 4), CtSlot(27, 6));
  mapping.add(CtSlot(24, 4), CtSlot(27, 7));
  mapping.add(CtSlot(29, 3), CtSlot(28, 0));
  mapping.add(CtSlot(26, 3), CtSlot(28, 1));
  mapping.add(CtSlot(23, 1), CtSlot(28, 2));
  mapping.add(CtSlot(6, 3), CtSlot(28, 3));
  mapping.add(CtSlot(9, 2), CtSlot(28, 4));
  mapping.add(CtSlot(13, 0), CtSlot(28, 5));
  mapping.add(CtSlot(13, 6), CtSlot(28, 6));
  mapping.add(CtSlot(18, 6), CtSlot(28, 7));
  mapping.add(CtSlot(4, 4), CtSlot(29, 0));
  mapping.add(CtSlot(20, 4), CtSlot(29, 1));
  mapping.add(CtSlot(31, 0), CtSlot(29, 2));
  mapping.add(CtSlot(16, 2), CtSlot(29, 3));
  mapping.add(CtSlot(24, 0), CtSlot(29, 4));
  mapping.add(CtSlot(6, 3), CtSlot(29, 5));
  mapping.add(CtSlot(11, 0), CtSlot(29, 6));
  mapping.add(CtSlot(31, 3), CtSlot(29, 7));
  mapping.add(CtSlot(18, 1), CtSlot(30, 0));
  mapping.add(CtSlot(21, 6), CtSlot(30, 1));
  mapping.add(CtSlot(26, 0), CtSlot(30, 2));
  mapping.add(CtSlot(4, 2), CtSlot(30, 3));
  mapping.add(CtSlot(2, 4), CtSlot(30, 4));
  mapping.add(CtSlot(11, 2), CtSlot(30, 5));
  mapping.add(CtSlot(28, 4), CtSlot(30, 6));
  mapping.add(CtSlot(24, 5), CtSlot(30, 7));
  mapping.add(CtSlot(25, 2), CtSlot(31, 0));
  mapping.add(CtSlot(30, 1), CtSlot(31, 1));
  mapping.add(CtSlot(7, 4), CtSlot(31, 2));
  mapping.add(CtSlot(12, 1), CtSlot(31, 3));
  mapping.add(CtSlot(16, 7), CtSlot(31, 4));
  mapping.add(CtSlot(14, 5), CtSlot(31, 5));
  mapping.add(CtSlot(15, 0), CtSlot(31, 6));
  mapping.add(CtSlot(27, 6), CtSlot(31, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_27) {
  int64_t numCts = 32;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(16, 0), CtSlot(0, 0));
  mapping.add(CtSlot(0, 1), CtSlot(0, 1));
  mapping.add(CtSlot(26, 4), CtSlot(0, 2));
  mapping.add(CtSlot(13, 1), CtSlot(0, 3));
  mapping.add(CtSlot(24, 2), CtSlot(0, 4));
  mapping.add(CtSlot(2, 5), CtSlot(0, 5));
  mapping.add(CtSlot(18, 6), CtSlot(0, 6));
  mapping.add(CtSlot(16, 0), CtSlot(0, 7));
  mapping.add(CtSlot(10, 3), CtSlot(1, 0));
  mapping.add(CtSlot(25, 4), CtSlot(1, 1));
  mapping.add(CtSlot(1, 5), CtSlot(1, 2));
  mapping.add(CtSlot(28, 1), CtSlot(1, 3));
  mapping.add(CtSlot(7, 1), CtSlot(1, 4));
  mapping.add(CtSlot(14, 7), CtSlot(1, 5));
  mapping.add(CtSlot(30, 1), CtSlot(1, 6));
  mapping.add(CtSlot(14, 0), CtSlot(1, 7));
  mapping.add(CtSlot(1, 5), CtSlot(2, 0));
  mapping.add(CtSlot(24, 2), CtSlot(2, 1));
  mapping.add(CtSlot(18, 0), CtSlot(2, 2));
  mapping.add(CtSlot(20, 1), CtSlot(2, 3));
  mapping.add(CtSlot(3, 5), CtSlot(2, 4));
  mapping.add(CtSlot(30, 6), CtSlot(2, 5));
  mapping.add(CtSlot(19, 2), CtSlot(2, 6));
  mapping.add(CtSlot(26, 5), CtSlot(2, 7));
  mapping.add(CtSlot(9, 3), CtSlot(3, 0));
  mapping.add(CtSlot(3, 2), CtSlot(3, 1));
  mapping.add(CtSlot(25, 5), CtSlot(3, 2));
  mapping.add(CtSlot(6, 0), CtSlot(3, 3));
  mapping.add(CtSlot(17, 4), CtSlot(3, 4));
  mapping.add(CtSlot(6, 1), CtSlot(3, 5));
  mapping.add(CtSlot(10, 4), CtSlot(3, 6));
  mapping.add(CtSlot(5, 0), CtSlot(3, 7));
  mapping.add(CtSlot(31, 5), CtSlot(4, 0));
  mapping.add(CtSlot(2, 6), CtSlot(4, 1));
  mapping.add(CtSlot(14, 0), CtSlot(4, 2));
  mapping.add(CtSlot(14, 5), CtSlot(4, 3));
  mapping.add(CtSlot(20, 2), CtSlot(4, 4));
  mapping.add(CtSlot(10, 3), CtSlot(4, 5));
  mapping.add(CtSlot(30, 6), CtSlot(4, 6));
  mapping.add(CtSlot(17, 1), CtSlot(4, 7));
  mapping.add(CtSlot(8, 4), CtSlot(5, 0));
  mapping.add(CtSlot(2, 7), CtSlot(5, 1));
  mapping.add(CtSlot(19, 0), CtSlot(5, 2));
  mapping.add(CtSlot(23, 5), CtSlot(5, 3));
  mapping.add(CtSlot(0, 5), CtSlot(5, 4));
  mapping.add(CtSlot(3, 1), CtSlot(5, 5));
  mapping.add(CtSlot(14, 5), CtSlot(5, 6));
  mapping.add(CtSlot(7, 5), CtSlot(5, 7));
  mapping.add(CtSlot(20, 1), CtSlot(6, 0));
  mapping.add(CtSlot(6, 2), CtSlot(6, 1));
  mapping.add(CtSlot(28, 0), CtSlot(6, 2));
  mapping.add(CtSlot(15, 4), CtSlot(6, 3));
  mapping.add(CtSlot(3, 3), CtSlot(6, 4));
  mapping.add(CtSlot(25, 3), CtSlot(6, 5));
  mapping.add(CtSlot(6, 2), CtSlot(6, 6));
  mapping.add(CtSlot(23, 1), CtSlot(6, 7));
  mapping.add(CtSlot(29, 1), CtSlot(7, 0));
  mapping.add(CtSlot(2, 0), CtSlot(7, 1));
  mapping.add(CtSlot(20, 5), CtSlot(7, 2));
  mapping.add(CtSlot(28, 5), CtSlot(7, 3));
  mapping.add(CtSlot(6, 4), CtSlot(7, 4));
  mapping.add(CtSlot(15, 1), CtSlot(7, 5));
  mapping.add(CtSlot(22, 4), CtSlot(7, 6));
  mapping.add(CtSlot(15, 6), CtSlot(7, 7));
  mapping.add(CtSlot(7, 1), CtSlot(8, 0));
  mapping.add(CtSlot(3, 5), CtSlot(8, 1));
  mapping.add(CtSlot(6, 3), CtSlot(8, 2));
  mapping.add(CtSlot(9, 6), CtSlot(8, 3));
  mapping.add(CtSlot(17, 6), CtSlot(8, 4));
  mapping.add(CtSlot(28, 6), CtSlot(8, 5));
  mapping.add(CtSlot(13, 7), CtSlot(8, 6));
  mapping.add(CtSlot(29, 2), CtSlot(8, 7));
  mapping.add(CtSlot(21, 0), CtSlot(9, 0));
  mapping.add(CtSlot(27, 7), CtSlot(9, 1));
  mapping.add(CtSlot(15, 2), CtSlot(9, 2));
  mapping.add(CtSlot(12, 1), CtSlot(9, 3));
  mapping.add(CtSlot(30, 5), CtSlot(9, 4));
  mapping.add(CtSlot(15, 7), CtSlot(9, 5));
  mapping.add(CtSlot(27, 3), CtSlot(9, 6));
  mapping.add(CtSlot(12, 1), CtSlot(9, 7));
  mapping.add(CtSlot(29, 6), CtSlot(10, 0));
  mapping.add(CtSlot(31, 2), CtSlot(10, 1));
  mapping.add(CtSlot(17, 7), CtSlot(10, 2));
  mapping.add(CtSlot(15, 7), CtSlot(10, 3));
  mapping.add(CtSlot(18, 3), CtSlot(10, 4));
  mapping.add(CtSlot(17, 5), CtSlot(10, 5));
  mapping.add(CtSlot(27, 1), CtSlot(10, 6));
  mapping.add(CtSlot(11, 2), CtSlot(10, 7));
  mapping.add(CtSlot(24, 2), CtSlot(11, 0));
  mapping.add(CtSlot(6, 0), CtSlot(11, 1));
  mapping.add(CtSlot(20, 1), CtSlot(11, 2));
  mapping.add(CtSlot(28, 2), CtSlot(11, 3));
  mapping.add(CtSlot(15, 7), CtSlot(11, 4));
  mapping.add(CtSlot(25, 6), CtSlot(11, 5));
  mapping.add(CtSlot(17, 3), CtSlot(11, 6));
  mapping.add(CtSlot(22, 6), CtSlot(11, 7));
  mapping.add(CtSlot(18, 2), CtSlot(12, 0));
  mapping.add(CtSlot(22, 2), CtSlot(12, 1));
  mapping.add(CtSlot(14, 0), CtSlot(12, 2));
  mapping.add(CtSlot(28, 5), CtSlot(12, 3));
  mapping.add(CtSlot(11, 3), CtSlot(12, 4));
  mapping.add(CtSlot(16, 3), CtSlot(12, 5));
  mapping.add(CtSlot(9, 1), CtSlot(12, 6));
  mapping.add(CtSlot(6, 7), CtSlot(12, 7));
  mapping.add(CtSlot(10, 5), CtSlot(13, 0));
  mapping.add(CtSlot(27, 7), CtSlot(13, 1));
  mapping.add(CtSlot(24, 0), CtSlot(13, 2));
  mapping.add(CtSlot(26, 6), CtSlot(13, 3));
  mapping.add(CtSlot(19, 6), CtSlot(13, 4));
  mapping.add(CtSlot(24, 7), CtSlot(13, 5));
  mapping.add(CtSlot(18, 3), CtSlot(13, 6));
  mapping.add(CtSlot(19, 0), CtSlot(13, 7));
  mapping.add(CtSlot(25, 4), CtSlot(14, 0));
  mapping.add(CtSlot(3, 7), CtSlot(14, 1));
  mapping.add(CtSlot(26, 0), CtSlot(14, 2));
  mapping.add(CtSlot(6, 2), CtSlot(14, 3));
  mapping.add(CtSlot(25, 2), CtSlot(14, 4));
  mapping.add(CtSlot(13, 3), CtSlot(14, 5));
  mapping.add(CtSlot(12, 4), CtSlot(14, 6));
  mapping.add(CtSlot(20, 5), CtSlot(14, 7));
  mapping.add(CtSlot(8, 5), CtSlot(15, 0));
  mapping.add(CtSlot(4, 1), CtSlot(15, 1));
  mapping.add(CtSlot(0, 5), CtSlot(15, 2));
  mapping.add(CtSlot(20, 0), CtSlot(15, 3));
  mapping.add(CtSlot(18, 7), CtSlot(15, 4));
  mapping.add(CtSlot(26, 4), CtSlot(15, 5));
  mapping.add(CtSlot(6, 4), CtSlot(15, 6));
  mapping.add(CtSlot(15, 3), CtSlot(15, 7));
  mapping.add(CtSlot(4, 4), CtSlot(16, 0));
  mapping.add(CtSlot(22, 5), CtSlot(16, 1));
  mapping.add(CtSlot(0, 0), CtSlot(16, 2));
  mapping.add(CtSlot(1, 2), CtSlot(16, 3));
  mapping.add(CtSlot(12, 7), CtSlot(16, 4));
  mapping.add(CtSlot(19, 5), CtSlot(16, 5));
  mapping.add(CtSlot(14, 0), CtSlot(16, 6));
  mapping.add(CtSlot(22, 3), CtSlot(16, 7));
  mapping.add(CtSlot(10, 0), CtSlot(17, 0));
  mapping.add(CtSlot(14, 7), CtSlot(17, 1));
  mapping.add(CtSlot(12, 5), CtSlot(17, 2));
  mapping.add(CtSlot(22, 1), CtSlot(17, 3));
  mapping.add(CtSlot(18, 0), CtSlot(17, 4));
  mapping.add(CtSlot(14, 5), CtSlot(17, 5));
  mapping.add(CtSlot(3, 0), CtSlot(17, 6));
  mapping.add(CtSlot(10, 5), CtSlot(17, 7));
  mapping.add(CtSlot(2, 1), CtSlot(18, 0));
  mapping.add(CtSlot(28, 4), CtSlot(18, 1));
  mapping.add(CtSlot(20, 1), CtSlot(18, 2));
  mapping.add(CtSlot(14, 5), CtSlot(18, 3));
  mapping.add(CtSlot(15, 6), CtSlot(18, 4));
  mapping.add(CtSlot(15, 5), CtSlot(18, 5));
  mapping.add(CtSlot(16, 1), CtSlot(18, 6));
  mapping.add(CtSlot(0, 7), CtSlot(18, 7));
  mapping.add(CtSlot(16, 5), CtSlot(19, 0));
  mapping.add(CtSlot(1, 6), CtSlot(19, 1));
  mapping.add(CtSlot(15, 5), CtSlot(19, 2));
  mapping.add(CtSlot(18, 6), CtSlot(19, 3));
  mapping.add(CtSlot(6, 0), CtSlot(19, 4));
  mapping.add(CtSlot(30, 6), CtSlot(19, 5));
  mapping.add(CtSlot(5, 7), CtSlot(19, 6));
  mapping.add(CtSlot(9, 2), CtSlot(19, 7));
  mapping.add(CtSlot(11, 0), CtSlot(20, 0));
  mapping.add(CtSlot(31, 6), CtSlot(20, 1));
  mapping.add(CtSlot(12, 2), CtSlot(20, 2));
  mapping.add(CtSlot(25, 7), CtSlot(20, 3));
  mapping.add(CtSlot(12, 3), CtSlot(20, 4));
  mapping.add(CtSlot(21, 3), CtSlot(20, 5));
  mapping.add(CtSlot(13, 2), CtSlot(20, 6));
  mapping.add(CtSlot(3, 7), CtSlot(20, 7));
  mapping.add(CtSlot(29, 5), CtSlot(21, 0));
  mapping.add(CtSlot(18, 7), CtSlot(21, 1));
  mapping.add(CtSlot(0, 5), CtSlot(21, 2));
  mapping.add(CtSlot(17, 1), CtSlot(21, 3));
  mapping.add(CtSlot(17, 0), CtSlot(21, 4));
  mapping.add(CtSlot(19, 0), CtSlot(21, 5));
  mapping.add(CtSlot(25, 0), CtSlot(21, 6));
  mapping.add(CtSlot(29, 0), CtSlot(21, 7));
  mapping.add(CtSlot(18, 3), CtSlot(22, 0));
  mapping.add(CtSlot(19, 4), CtSlot(22, 1));
  mapping.add(CtSlot(6, 0), CtSlot(22, 2));
  mapping.add(CtSlot(5, 1), CtSlot(22, 3));
  mapping.add(CtSlot(10, 2), CtSlot(22, 4));
  mapping.add(CtSlot(30, 4), CtSlot(22, 5));
  mapping.add(CtSlot(30, 7), CtSlot(22, 6));
  mapping.add(CtSlot(20, 3), CtSlot(22, 7));
  mapping.add(CtSlot(15, 1), CtSlot(23, 0));
  mapping.add(CtSlot(5, 1), CtSlot(23, 1));
  mapping.add(CtSlot(11, 1), CtSlot(23, 2));
  mapping.add(CtSlot(30, 0), CtSlot(23, 3));
  mapping.add(CtSlot(27, 3), CtSlot(23, 4));
  mapping.add(CtSlot(2, 3), CtSlot(23, 5));
  mapping.add(CtSlot(19, 1), CtSlot(23, 6));
  mapping.add(CtSlot(16, 0), CtSlot(23, 7));
  mapping.add(CtSlot(27, 6), CtSlot(24, 0));
  mapping.add(CtSlot(13, 7), CtSlot(24, 1));
  mapping.add(CtSlot(11, 7), CtSlot(24, 2));
  mapping.add(CtSlot(30, 1), CtSlot(24, 3));
  mapping.add(CtSlot(22, 7), CtSlot(24, 4));
  mapping.add(CtSlot(3, 5), CtSlot(24, 5));
  mapping.add(CtSlot(2, 4), CtSlot(24, 6));
  mapping.add(CtSlot(1, 7), CtSlot(24, 7));
  mapping.add(CtSlot(10, 5), CtSlot(25, 0));
  mapping.add(CtSlot(6, 3), CtSlot(25, 1));
  mapping.add(CtSlot(25, 5), CtSlot(25, 2));
  mapping.add(CtSlot(2, 2), CtSlot(25, 3));
  mapping.add(CtSlot(23, 2), CtSlot(25, 4));
  mapping.add(CtSlot(0, 6), CtSlot(25, 5));
  mapping.add(CtSlot(17, 1), CtSlot(25, 6));
  mapping.add(CtSlot(22, 3), CtSlot(25, 7));
  mapping.add(CtSlot(10, 4), CtSlot(26, 0));
  mapping.add(CtSlot(9, 0), CtSlot(26, 1));
  mapping.add(CtSlot(25, 7), CtSlot(26, 2));
  mapping.add(CtSlot(9, 0), CtSlot(26, 3));
  mapping.add(CtSlot(16, 0), CtSlot(26, 4));
  mapping.add(CtSlot(18, 4), CtSlot(26, 5));
  mapping.add(CtSlot(19, 5), CtSlot(26, 6));
  mapping.add(CtSlot(20, 6), CtSlot(26, 7));
  mapping.add(CtSlot(19, 7), CtSlot(27, 0));
  mapping.add(CtSlot(22, 2), CtSlot(27, 1));
  mapping.add(CtSlot(11, 0), CtSlot(27, 2));
  mapping.add(CtSlot(6, 4), CtSlot(27, 3));
  mapping.add(CtSlot(8, 7), CtSlot(27, 4));
  mapping.add(CtSlot(23, 0), CtSlot(27, 5));
  mapping.add(CtSlot(13, 4), CtSlot(27, 6));
  mapping.add(CtSlot(24, 4), CtSlot(27, 7));
  mapping.add(CtSlot(29, 3), CtSlot(28, 0));
  mapping.add(CtSlot(26, 3), CtSlot(28, 1));
  mapping.add(CtSlot(23, 1), CtSlot(28, 2));
  mapping.add(CtSlot(6, 3), CtSlot(28, 3));
  mapping.add(CtSlot(9, 2), CtSlot(28, 4));
  mapping.add(CtSlot(13, 0), CtSlot(28, 5));
  mapping.add(CtSlot(13, 6), CtSlot(28, 6));
  mapping.add(CtSlot(18, 6), CtSlot(28, 7));
  mapping.add(CtSlot(4, 4), CtSlot(29, 0));
  mapping.add(CtSlot(20, 4), CtSlot(29, 1));
  mapping.add(CtSlot(31, 0), CtSlot(29, 2));
  mapping.add(CtSlot(16, 2), CtSlot(29, 3));
  mapping.add(CtSlot(24, 0), CtSlot(29, 4));
  mapping.add(CtSlot(6, 3), CtSlot(29, 5));
  mapping.add(CtSlot(11, 0), CtSlot(29, 6));
  mapping.add(CtSlot(31, 3), CtSlot(29, 7));
  mapping.add(CtSlot(18, 1), CtSlot(30, 0));
  mapping.add(CtSlot(21, 6), CtSlot(30, 1));
  mapping.add(CtSlot(26, 0), CtSlot(30, 2));
  mapping.add(CtSlot(4, 2), CtSlot(30, 3));
  mapping.add(CtSlot(2, 4), CtSlot(30, 4));
  mapping.add(CtSlot(11, 2), CtSlot(30, 5));
  mapping.add(CtSlot(28, 4), CtSlot(30, 6));
  mapping.add(CtSlot(24, 5), CtSlot(30, 7));
  mapping.add(CtSlot(25, 2), CtSlot(31, 0));
  mapping.add(CtSlot(30, 1), CtSlot(31, 1));
  mapping.add(CtSlot(7, 4), CtSlot(31, 2));
  mapping.add(CtSlot(12, 1), CtSlot(31, 3));
  mapping.add(CtSlot(16, 7), CtSlot(31, 4));
  mapping.add(CtSlot(14, 5), CtSlot(31, 5));
  mapping.add(CtSlot(15, 0), CtSlot(31, 6));
  mapping.add(CtSlot(27, 6), CtSlot(31, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_28) {
  int64_t numCts = 32;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(16, 0), CtSlot(0, 0));
  mapping.add(CtSlot(0, 1), CtSlot(0, 1));
  mapping.add(CtSlot(26, 4), CtSlot(0, 2));
  mapping.add(CtSlot(13, 1), CtSlot(0, 3));
  mapping.add(CtSlot(24, 2), CtSlot(0, 4));
  mapping.add(CtSlot(2, 5), CtSlot(0, 5));
  mapping.add(CtSlot(18, 6), CtSlot(0, 6));
  mapping.add(CtSlot(16, 0), CtSlot(0, 7));
  mapping.add(CtSlot(10, 3), CtSlot(1, 0));
  mapping.add(CtSlot(25, 4), CtSlot(1, 1));
  mapping.add(CtSlot(1, 5), CtSlot(1, 2));
  mapping.add(CtSlot(28, 1), CtSlot(1, 3));
  mapping.add(CtSlot(7, 1), CtSlot(1, 4));
  mapping.add(CtSlot(14, 7), CtSlot(1, 5));
  mapping.add(CtSlot(30, 1), CtSlot(1, 6));
  mapping.add(CtSlot(14, 0), CtSlot(1, 7));
  mapping.add(CtSlot(1, 5), CtSlot(2, 0));
  mapping.add(CtSlot(24, 2), CtSlot(2, 1));
  mapping.add(CtSlot(18, 0), CtSlot(2, 2));
  mapping.add(CtSlot(20, 1), CtSlot(2, 3));
  mapping.add(CtSlot(3, 5), CtSlot(2, 4));
  mapping.add(CtSlot(30, 6), CtSlot(2, 5));
  mapping.add(CtSlot(19, 2), CtSlot(2, 6));
  mapping.add(CtSlot(26, 5), CtSlot(2, 7));
  mapping.add(CtSlot(9, 3), CtSlot(3, 0));
  mapping.add(CtSlot(3, 2), CtSlot(3, 1));
  mapping.add(CtSlot(25, 5), CtSlot(3, 2));
  mapping.add(CtSlot(6, 0), CtSlot(3, 3));
  mapping.add(CtSlot(17, 4), CtSlot(3, 4));
  mapping.add(CtSlot(6, 1), CtSlot(3, 5));
  mapping.add(CtSlot(10, 4), CtSlot(3, 6));
  mapping.add(CtSlot(5, 0), CtSlot(3, 7));
  mapping.add(CtSlot(31, 5), CtSlot(4, 0));
  mapping.add(CtSlot(2, 6), CtSlot(4, 1));
  mapping.add(CtSlot(14, 0), CtSlot(4, 2));
  mapping.add(CtSlot(14, 5), CtSlot(4, 3));
  mapping.add(CtSlot(20, 2), CtSlot(4, 4));
  mapping.add(CtSlot(10, 3), CtSlot(4, 5));
  mapping.add(CtSlot(30, 6), CtSlot(4, 6));
  mapping.add(CtSlot(17, 1), CtSlot(4, 7));
  mapping.add(CtSlot(8, 4), CtSlot(5, 0));
  mapping.add(CtSlot(2, 7), CtSlot(5, 1));
  mapping.add(CtSlot(19, 0), CtSlot(5, 2));
  mapping.add(CtSlot(23, 5), CtSlot(5, 3));
  mapping.add(CtSlot(0, 5), CtSlot(5, 4));
  mapping.add(CtSlot(3, 1), CtSlot(5, 5));
  mapping.add(CtSlot(14, 5), CtSlot(5, 6));
  mapping.add(CtSlot(7, 5), CtSlot(5, 7));
  mapping.add(CtSlot(20, 1), CtSlot(6, 0));
  mapping.add(CtSlot(6, 2), CtSlot(6, 1));
  mapping.add(CtSlot(28, 0), CtSlot(6, 2));
  mapping.add(CtSlot(15, 4), CtSlot(6, 3));
  mapping.add(CtSlot(3, 3), CtSlot(6, 4));
  mapping.add(CtSlot(25, 3), CtSlot(6, 5));
  mapping.add(CtSlot(6, 2), CtSlot(6, 6));
  mapping.add(CtSlot(23, 1), CtSlot(6, 7));
  mapping.add(CtSlot(29, 1), CtSlot(7, 0));
  mapping.add(CtSlot(2, 0), CtSlot(7, 1));
  mapping.add(CtSlot(20, 5), CtSlot(7, 2));
  mapping.add(CtSlot(28, 5), CtSlot(7, 3));
  mapping.add(CtSlot(6, 4), CtSlot(7, 4));
  mapping.add(CtSlot(15, 1), CtSlot(7, 5));
  mapping.add(CtSlot(22, 4), CtSlot(7, 6));
  mapping.add(CtSlot(15, 6), CtSlot(7, 7));
  mapping.add(CtSlot(7, 1), CtSlot(8, 0));
  mapping.add(CtSlot(3, 5), CtSlot(8, 1));
  mapping.add(CtSlot(6, 3), CtSlot(8, 2));
  mapping.add(CtSlot(9, 6), CtSlot(8, 3));
  mapping.add(CtSlot(17, 6), CtSlot(8, 4));
  mapping.add(CtSlot(28, 6), CtSlot(8, 5));
  mapping.add(CtSlot(13, 7), CtSlot(8, 6));
  mapping.add(CtSlot(29, 2), CtSlot(8, 7));
  mapping.add(CtSlot(21, 0), CtSlot(9, 0));
  mapping.add(CtSlot(27, 7), CtSlot(9, 1));
  mapping.add(CtSlot(15, 2), CtSlot(9, 2));
  mapping.add(CtSlot(12, 1), CtSlot(9, 3));
  mapping.add(CtSlot(30, 5), CtSlot(9, 4));
  mapping.add(CtSlot(15, 7), CtSlot(9, 5));
  mapping.add(CtSlot(27, 3), CtSlot(9, 6));
  mapping.add(CtSlot(12, 1), CtSlot(9, 7));
  mapping.add(CtSlot(29, 6), CtSlot(10, 0));
  mapping.add(CtSlot(31, 2), CtSlot(10, 1));
  mapping.add(CtSlot(17, 7), CtSlot(10, 2));
  mapping.add(CtSlot(15, 7), CtSlot(10, 3));
  mapping.add(CtSlot(18, 3), CtSlot(10, 4));
  mapping.add(CtSlot(17, 5), CtSlot(10, 5));
  mapping.add(CtSlot(27, 1), CtSlot(10, 6));
  mapping.add(CtSlot(11, 2), CtSlot(10, 7));
  mapping.add(CtSlot(24, 2), CtSlot(11, 0));
  mapping.add(CtSlot(6, 0), CtSlot(11, 1));
  mapping.add(CtSlot(20, 1), CtSlot(11, 2));
  mapping.add(CtSlot(28, 2), CtSlot(11, 3));
  mapping.add(CtSlot(15, 0), CtSlot(11, 4));
  mapping.add(CtSlot(25, 6), CtSlot(11, 5));
  mapping.add(CtSlot(17, 3), CtSlot(11, 6));
  mapping.add(CtSlot(22, 6), CtSlot(11, 7));
  mapping.add(CtSlot(18, 2), CtSlot(12, 0));
  mapping.add(CtSlot(22, 2), CtSlot(12, 1));
  mapping.add(CtSlot(14, 0), CtSlot(12, 2));
  mapping.add(CtSlot(28, 5), CtSlot(12, 3));
  mapping.add(CtSlot(11, 3), CtSlot(12, 4));
  mapping.add(CtSlot(16, 3), CtSlot(12, 5));
  mapping.add(CtSlot(9, 1), CtSlot(12, 6));
  mapping.add(CtSlot(6, 7), CtSlot(12, 7));
  mapping.add(CtSlot(10, 5), CtSlot(13, 0));
  mapping.add(CtSlot(27, 7), CtSlot(13, 1));
  mapping.add(CtSlot(24, 0), CtSlot(13, 2));
  mapping.add(CtSlot(26, 6), CtSlot(13, 3));
  mapping.add(CtSlot(19, 6), CtSlot(13, 4));
  mapping.add(CtSlot(24, 7), CtSlot(13, 5));
  mapping.add(CtSlot(18, 3), CtSlot(13, 6));
  mapping.add(CtSlot(19, 0), CtSlot(13, 7));
  mapping.add(CtSlot(25, 4), CtSlot(14, 0));
  mapping.add(CtSlot(3, 7), CtSlot(14, 1));
  mapping.add(CtSlot(26, 0), CtSlot(14, 2));
  mapping.add(CtSlot(6, 2), CtSlot(14, 3));
  mapping.add(CtSlot(25, 2), CtSlot(14, 4));
  mapping.add(CtSlot(13, 3), CtSlot(14, 5));
  mapping.add(CtSlot(12, 4), CtSlot(14, 6));
  mapping.add(CtSlot(20, 5), CtSlot(14, 7));
  mapping.add(CtSlot(8, 5), CtSlot(15, 0));
  mapping.add(CtSlot(4, 1), CtSlot(15, 1));
  mapping.add(CtSlot(0, 5), CtSlot(15, 2));
  mapping.add(CtSlot(20, 0), CtSlot(15, 3));
  mapping.add(CtSlot(18, 7), CtSlot(15, 4));
  mapping.add(CtSlot(26, 4), CtSlot(15, 5));
  mapping.add(CtSlot(6, 4), CtSlot(15, 6));
  mapping.add(CtSlot(15, 3), CtSlot(15, 7));
  mapping.add(CtSlot(4, 4), CtSlot(16, 0));
  mapping.add(CtSlot(22, 5), CtSlot(16, 1));
  mapping.add(CtSlot(0, 0), CtSlot(16, 2));
  mapping.add(CtSlot(1, 2), CtSlot(16, 3));
  mapping.add(CtSlot(12, 7), CtSlot(16, 4));
  mapping.add(CtSlot(19, 5), CtSlot(16, 5));
  mapping.add(CtSlot(14, 0), CtSlot(16, 6));
  mapping.add(CtSlot(22, 3), CtSlot(16, 7));
  mapping.add(CtSlot(10, 0), CtSlot(17, 0));
  mapping.add(CtSlot(14, 7), CtSlot(17, 1));
  mapping.add(CtSlot(12, 5), CtSlot(17, 2));
  mapping.add(CtSlot(22, 1), CtSlot(17, 3));
  mapping.add(CtSlot(18, 0), CtSlot(17, 4));
  mapping.add(CtSlot(14, 5), CtSlot(17, 5));
  mapping.add(CtSlot(3, 0), CtSlot(17, 6));
  mapping.add(CtSlot(10, 5), CtSlot(17, 7));
  mapping.add(CtSlot(2, 1), CtSlot(18, 0));
  mapping.add(CtSlot(28, 4), CtSlot(18, 1));
  mapping.add(CtSlot(20, 1), CtSlot(18, 2));
  mapping.add(CtSlot(14, 5), CtSlot(18, 3));
  mapping.add(CtSlot(15, 6), CtSlot(18, 4));
  mapping.add(CtSlot(15, 5), CtSlot(18, 5));
  mapping.add(CtSlot(16, 1), CtSlot(18, 6));
  mapping.add(CtSlot(0, 7), CtSlot(18, 7));
  mapping.add(CtSlot(16, 5), CtSlot(19, 0));
  mapping.add(CtSlot(1, 6), CtSlot(19, 1));
  mapping.add(CtSlot(15, 5), CtSlot(19, 2));
  mapping.add(CtSlot(18, 6), CtSlot(19, 3));
  mapping.add(CtSlot(6, 0), CtSlot(19, 4));
  mapping.add(CtSlot(30, 6), CtSlot(19, 5));
  mapping.add(CtSlot(5, 7), CtSlot(19, 6));
  mapping.add(CtSlot(9, 2), CtSlot(19, 7));
  mapping.add(CtSlot(11, 0), CtSlot(20, 0));
  mapping.add(CtSlot(31, 6), CtSlot(20, 1));
  mapping.add(CtSlot(12, 2), CtSlot(20, 2));
  mapping.add(CtSlot(25, 7), CtSlot(20, 3));
  mapping.add(CtSlot(12, 3), CtSlot(20, 4));
  mapping.add(CtSlot(21, 3), CtSlot(20, 5));
  mapping.add(CtSlot(13, 2), CtSlot(20, 6));
  mapping.add(CtSlot(3, 7), CtSlot(20, 7));
  mapping.add(CtSlot(29, 5), CtSlot(21, 0));
  mapping.add(CtSlot(18, 7), CtSlot(21, 1));
  mapping.add(CtSlot(0, 5), CtSlot(21, 2));
  mapping.add(CtSlot(17, 1), CtSlot(21, 3));
  mapping.add(CtSlot(17, 0), CtSlot(21, 4));
  mapping.add(CtSlot(19, 0), CtSlot(21, 5));
  mapping.add(CtSlot(25, 0), CtSlot(21, 6));
  mapping.add(CtSlot(29, 0), CtSlot(21, 7));
  mapping.add(CtSlot(18, 3), CtSlot(22, 0));
  mapping.add(CtSlot(19, 4), CtSlot(22, 1));
  mapping.add(CtSlot(6, 0), CtSlot(22, 2));
  mapping.add(CtSlot(5, 1), CtSlot(22, 3));
  mapping.add(CtSlot(10, 2), CtSlot(22, 4));
  mapping.add(CtSlot(30, 4), CtSlot(22, 5));
  mapping.add(CtSlot(30, 7), CtSlot(22, 6));
  mapping.add(CtSlot(20, 3), CtSlot(22, 7));
  mapping.add(CtSlot(15, 1), CtSlot(23, 0));
  mapping.add(CtSlot(5, 1), CtSlot(23, 1));
  mapping.add(CtSlot(11, 1), CtSlot(23, 2));
  mapping.add(CtSlot(30, 0), CtSlot(23, 3));
  mapping.add(CtSlot(27, 3), CtSlot(23, 4));
  mapping.add(CtSlot(2, 3), CtSlot(23, 5));
  mapping.add(CtSlot(19, 1), CtSlot(23, 6));
  mapping.add(CtSlot(16, 0), CtSlot(23, 7));
  mapping.add(CtSlot(27, 6), CtSlot(24, 0));
  mapping.add(CtSlot(13, 7), CtSlot(24, 1));
  mapping.add(CtSlot(11, 7), CtSlot(24, 2));
  mapping.add(CtSlot(30, 1), CtSlot(24, 3));
  mapping.add(CtSlot(22, 7), CtSlot(24, 4));
  mapping.add(CtSlot(3, 5), CtSlot(24, 5));
  mapping.add(CtSlot(2, 4), CtSlot(24, 6));
  mapping.add(CtSlot(1, 7), CtSlot(24, 7));
  mapping.add(CtSlot(10, 5), CtSlot(25, 0));
  mapping.add(CtSlot(6, 3), CtSlot(25, 1));
  mapping.add(CtSlot(25, 5), CtSlot(25, 2));
  mapping.add(CtSlot(2, 2), CtSlot(25, 3));
  mapping.add(CtSlot(23, 2), CtSlot(25, 4));
  mapping.add(CtSlot(0, 6), CtSlot(25, 5));
  mapping.add(CtSlot(17, 1), CtSlot(25, 6));
  mapping.add(CtSlot(22, 3), CtSlot(25, 7));
  mapping.add(CtSlot(10, 4), CtSlot(26, 0));
  mapping.add(CtSlot(9, 0), CtSlot(26, 1));
  mapping.add(CtSlot(25, 7), CtSlot(26, 2));
  mapping.add(CtSlot(9, 0), CtSlot(26, 3));
  mapping.add(CtSlot(16, 0), CtSlot(26, 4));
  mapping.add(CtSlot(18, 4), CtSlot(26, 5));
  mapping.add(CtSlot(19, 5), CtSlot(26, 6));
  mapping.add(CtSlot(20, 6), CtSlot(26, 7));
  mapping.add(CtSlot(19, 7), CtSlot(27, 0));
  mapping.add(CtSlot(22, 2), CtSlot(27, 1));
  mapping.add(CtSlot(11, 0), CtSlot(27, 2));
  mapping.add(CtSlot(6, 4), CtSlot(27, 3));
  mapping.add(CtSlot(8, 7), CtSlot(27, 4));
  mapping.add(CtSlot(23, 0), CtSlot(27, 5));
  mapping.add(CtSlot(13, 4), CtSlot(27, 6));
  mapping.add(CtSlot(24, 4), CtSlot(27, 7));
  mapping.add(CtSlot(29, 3), CtSlot(28, 0));
  mapping.add(CtSlot(26, 3), CtSlot(28, 1));
  mapping.add(CtSlot(23, 1), CtSlot(28, 2));
  mapping.add(CtSlot(6, 3), CtSlot(28, 3));
  mapping.add(CtSlot(9, 2), CtSlot(28, 4));
  mapping.add(CtSlot(13, 0), CtSlot(28, 5));
  mapping.add(CtSlot(13, 6), CtSlot(28, 6));
  mapping.add(CtSlot(18, 6), CtSlot(28, 7));
  mapping.add(CtSlot(4, 4), CtSlot(29, 0));
  mapping.add(CtSlot(20, 4), CtSlot(29, 1));
  mapping.add(CtSlot(31, 0), CtSlot(29, 2));
  mapping.add(CtSlot(16, 2), CtSlot(29, 3));
  mapping.add(CtSlot(24, 0), CtSlot(29, 4));
  mapping.add(CtSlot(6, 3), CtSlot(29, 5));
  mapping.add(CtSlot(11, 0), CtSlot(29, 6));
  mapping.add(CtSlot(31, 3), CtSlot(29, 7));
  mapping.add(CtSlot(18, 1), CtSlot(30, 0));
  mapping.add(CtSlot(21, 6), CtSlot(30, 1));
  mapping.add(CtSlot(26, 0), CtSlot(30, 2));
  mapping.add(CtSlot(4, 2), CtSlot(30, 3));
  mapping.add(CtSlot(2, 4), CtSlot(30, 4));
  mapping.add(CtSlot(11, 2), CtSlot(30, 5));
  mapping.add(CtSlot(28, 4), CtSlot(30, 6));
  mapping.add(CtSlot(24, 5), CtSlot(30, 7));
  mapping.add(CtSlot(25, 2), CtSlot(31, 0));
  mapping.add(CtSlot(30, 1), CtSlot(31, 1));
  mapping.add(CtSlot(7, 4), CtSlot(31, 2));
  mapping.add(CtSlot(12, 1), CtSlot(31, 3));
  mapping.add(CtSlot(16, 7), CtSlot(31, 4));
  mapping.add(CtSlot(14, 5), CtSlot(31, 5));
  mapping.add(CtSlot(15, 0), CtSlot(31, 6));
  mapping.add(CtSlot(27, 6), CtSlot(31, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_29) {
  int64_t numCts = 32;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(16, 0), CtSlot(0, 0));
  mapping.add(CtSlot(0, 1), CtSlot(0, 1));
  mapping.add(CtSlot(26, 4), CtSlot(0, 2));
  mapping.add(CtSlot(13, 1), CtSlot(0, 3));
  mapping.add(CtSlot(24, 2), CtSlot(0, 4));
  mapping.add(CtSlot(2, 5), CtSlot(0, 5));
  mapping.add(CtSlot(18, 6), CtSlot(0, 6));
  mapping.add(CtSlot(16, 0), CtSlot(0, 7));
  mapping.add(CtSlot(10, 3), CtSlot(1, 0));
  mapping.add(CtSlot(25, 4), CtSlot(1, 1));
  mapping.add(CtSlot(1, 5), CtSlot(1, 2));
  mapping.add(CtSlot(28, 1), CtSlot(1, 3));
  mapping.add(CtSlot(7, 1), CtSlot(1, 4));
  mapping.add(CtSlot(14, 7), CtSlot(1, 5));
  mapping.add(CtSlot(30, 1), CtSlot(1, 6));
  mapping.add(CtSlot(14, 0), CtSlot(1, 7));
  mapping.add(CtSlot(1, 5), CtSlot(2, 0));
  mapping.add(CtSlot(24, 2), CtSlot(2, 1));
  mapping.add(CtSlot(18, 0), CtSlot(2, 2));
  mapping.add(CtSlot(20, 1), CtSlot(2, 3));
  mapping.add(CtSlot(3, 5), CtSlot(2, 4));
  mapping.add(CtSlot(30, 6), CtSlot(2, 5));
  mapping.add(CtSlot(19, 2), CtSlot(2, 6));
  mapping.add(CtSlot(26, 5), CtSlot(2, 7));
  mapping.add(CtSlot(9, 3), CtSlot(3, 0));
  mapping.add(CtSlot(3, 2), CtSlot(3, 1));
  mapping.add(CtSlot(25, 5), CtSlot(3, 2));
  mapping.add(CtSlot(6, 0), CtSlot(3, 3));
  mapping.add(CtSlot(17, 4), CtSlot(3, 4));
  mapping.add(CtSlot(6, 1), CtSlot(3, 5));
  mapping.add(CtSlot(10, 4), CtSlot(3, 6));
  mapping.add(CtSlot(5, 0), CtSlot(3, 7));
  mapping.add(CtSlot(31, 5), CtSlot(4, 0));
  mapping.add(CtSlot(2, 6), CtSlot(4, 1));
  mapping.add(CtSlot(14, 0), CtSlot(4, 2));
  mapping.add(CtSlot(14, 5), CtSlot(4, 3));
  mapping.add(CtSlot(20, 2), CtSlot(4, 4));
  mapping.add(CtSlot(10, 3), CtSlot(4, 5));
  mapping.add(CtSlot(30, 6), CtSlot(4, 6));
  mapping.add(CtSlot(17, 1), CtSlot(4, 7));
  mapping.add(CtSlot(8, 4), CtSlot(5, 0));
  mapping.add(CtSlot(2, 7), CtSlot(5, 1));
  mapping.add(CtSlot(19, 0), CtSlot(5, 2));
  mapping.add(CtSlot(23, 5), CtSlot(5, 3));
  mapping.add(CtSlot(0, 5), CtSlot(5, 4));
  mapping.add(CtSlot(3, 1), CtSlot(5, 5));
  mapping.add(CtSlot(14, 5), CtSlot(5, 6));
  mapping.add(CtSlot(7, 5), CtSlot(5, 7));
  mapping.add(CtSlot(20, 1), CtSlot(6, 0));
  mapping.add(CtSlot(6, 2), CtSlot(6, 1));
  mapping.add(CtSlot(28, 0), CtSlot(6, 2));
  mapping.add(CtSlot(15, 4), CtSlot(6, 3));
  mapping.add(CtSlot(3, 3), CtSlot(6, 4));
  mapping.add(CtSlot(25, 3), CtSlot(6, 5));
  mapping.add(CtSlot(6, 2), CtSlot(6, 6));
  mapping.add(CtSlot(23, 1), CtSlot(6, 7));
  mapping.add(CtSlot(29, 1), CtSlot(7, 0));
  mapping.add(CtSlot(2, 0), CtSlot(7, 1));
  mapping.add(CtSlot(20, 5), CtSlot(7, 2));
  mapping.add(CtSlot(28, 5), CtSlot(7, 3));
  mapping.add(CtSlot(6, 4), CtSlot(7, 4));
  mapping.add(CtSlot(15, 1), CtSlot(7, 5));
  mapping.add(CtSlot(22, 4), CtSlot(7, 6));
  mapping.add(CtSlot(15, 6), CtSlot(7, 7));
  mapping.add(CtSlot(7, 1), CtSlot(8, 0));
  mapping.add(CtSlot(3, 5), CtSlot(8, 1));
  mapping.add(CtSlot(6, 3), CtSlot(8, 2));
  mapping.add(CtSlot(9, 6), CtSlot(8, 3));
  mapping.add(CtSlot(17, 6), CtSlot(8, 4));
  mapping.add(CtSlot(28, 6), CtSlot(8, 5));
  mapping.add(CtSlot(13, 7), CtSlot(8, 6));
  mapping.add(CtSlot(29, 2), CtSlot(8, 7));
  mapping.add(CtSlot(21, 0), CtSlot(9, 0));
  mapping.add(CtSlot(27, 7), CtSlot(9, 1));
  mapping.add(CtSlot(15, 2), CtSlot(9, 2));
  mapping.add(CtSlot(12, 1), CtSlot(9, 3));
  mapping.add(CtSlot(30, 5), CtSlot(9, 4));
  mapping.add(CtSlot(15, 7), CtSlot(9, 5));
  mapping.add(CtSlot(27, 3), CtSlot(9, 6));
  mapping.add(CtSlot(12, 1), CtSlot(9, 7));
  mapping.add(CtSlot(29, 6), CtSlot(10, 0));
  mapping.add(CtSlot(31, 2), CtSlot(10, 1));
  mapping.add(CtSlot(17, 7), CtSlot(10, 2));
  mapping.add(CtSlot(15, 7), CtSlot(10, 3));
  mapping.add(CtSlot(18, 3), CtSlot(10, 4));
  mapping.add(CtSlot(17, 5), CtSlot(10, 5));
  mapping.add(CtSlot(27, 1), CtSlot(10, 6));
  mapping.add(CtSlot(11, 2), CtSlot(10, 7));
  mapping.add(CtSlot(24, 2), CtSlot(11, 0));
  mapping.add(CtSlot(6, 0), CtSlot(11, 1));
  mapping.add(CtSlot(20, 1), CtSlot(11, 2));
  mapping.add(CtSlot(28, 2), CtSlot(11, 3));
  mapping.add(CtSlot(15, 0), CtSlot(11, 4));
  mapping.add(CtSlot(25, 6), CtSlot(11, 5));
  mapping.add(CtSlot(17, 3), CtSlot(11, 6));
  mapping.add(CtSlot(22, 6), CtSlot(11, 7));
  mapping.add(CtSlot(18, 2), CtSlot(12, 0));
  mapping.add(CtSlot(22, 2), CtSlot(12, 1));
  mapping.add(CtSlot(14, 0), CtSlot(12, 2));
  mapping.add(CtSlot(28, 5), CtSlot(12, 3));
  mapping.add(CtSlot(11, 3), CtSlot(12, 4));
  mapping.add(CtSlot(16, 3), CtSlot(12, 5));
  mapping.add(CtSlot(9, 1), CtSlot(12, 6));
  mapping.add(CtSlot(6, 7), CtSlot(12, 7));
  mapping.add(CtSlot(10, 5), CtSlot(13, 0));
  mapping.add(CtSlot(27, 7), CtSlot(13, 1));
  mapping.add(CtSlot(24, 0), CtSlot(13, 2));
  mapping.add(CtSlot(26, 6), CtSlot(13, 3));
  mapping.add(CtSlot(19, 6), CtSlot(13, 4));
  mapping.add(CtSlot(24, 7), CtSlot(13, 5));
  mapping.add(CtSlot(18, 3), CtSlot(13, 6));
  mapping.add(CtSlot(19, 0), CtSlot(13, 7));
  mapping.add(CtSlot(25, 4), CtSlot(14, 0));
  mapping.add(CtSlot(3, 7), CtSlot(14, 1));
  mapping.add(CtSlot(26, 0), CtSlot(14, 2));
  mapping.add(CtSlot(6, 2), CtSlot(14, 3));
  mapping.add(CtSlot(25, 2), CtSlot(14, 4));
  mapping.add(CtSlot(13, 3), CtSlot(14, 5));
  mapping.add(CtSlot(12, 4), CtSlot(14, 6));
  mapping.add(CtSlot(20, 5), CtSlot(14, 7));
  mapping.add(CtSlot(8, 5), CtSlot(15, 0));
  mapping.add(CtSlot(4, 1), CtSlot(15, 1));
  mapping.add(CtSlot(0, 5), CtSlot(15, 2));
  mapping.add(CtSlot(20, 0), CtSlot(15, 3));
  mapping.add(CtSlot(18, 7), CtSlot(15, 4));
  mapping.add(CtSlot(26, 4), CtSlot(15, 5));
  mapping.add(CtSlot(6, 4), CtSlot(15, 6));
  mapping.add(CtSlot(15, 3), CtSlot(15, 7));
  mapping.add(CtSlot(4, 4), CtSlot(16, 0));
  mapping.add(CtSlot(22, 5), CtSlot(16, 1));
  mapping.add(CtSlot(0, 0), CtSlot(16, 2));
  mapping.add(CtSlot(1, 2), CtSlot(16, 3));
  mapping.add(CtSlot(12, 7), CtSlot(16, 4));
  mapping.add(CtSlot(19, 5), CtSlot(16, 5));
  mapping.add(CtSlot(14, 0), CtSlot(16, 6));
  mapping.add(CtSlot(22, 3), CtSlot(16, 7));
  mapping.add(CtSlot(10, 0), CtSlot(17, 0));
  mapping.add(CtSlot(14, 7), CtSlot(17, 1));
  mapping.add(CtSlot(12, 5), CtSlot(17, 2));
  mapping.add(CtSlot(22, 1), CtSlot(17, 3));
  mapping.add(CtSlot(18, 0), CtSlot(17, 4));
  mapping.add(CtSlot(14, 5), CtSlot(17, 5));
  mapping.add(CtSlot(3, 0), CtSlot(17, 6));
  mapping.add(CtSlot(10, 5), CtSlot(17, 7));
  mapping.add(CtSlot(2, 1), CtSlot(18, 0));
  mapping.add(CtSlot(28, 4), CtSlot(18, 1));
  mapping.add(CtSlot(20, 1), CtSlot(18, 2));
  mapping.add(CtSlot(14, 5), CtSlot(18, 3));
  mapping.add(CtSlot(15, 6), CtSlot(18, 4));
  mapping.add(CtSlot(15, 5), CtSlot(18, 5));
  mapping.add(CtSlot(16, 1), CtSlot(18, 6));
  mapping.add(CtSlot(0, 7), CtSlot(18, 7));
  mapping.add(CtSlot(16, 5), CtSlot(19, 0));
  mapping.add(CtSlot(1, 6), CtSlot(19, 1));
  mapping.add(CtSlot(15, 5), CtSlot(19, 2));
  mapping.add(CtSlot(18, 6), CtSlot(19, 3));
  mapping.add(CtSlot(6, 0), CtSlot(19, 4));
  mapping.add(CtSlot(30, 6), CtSlot(19, 5));
  mapping.add(CtSlot(5, 7), CtSlot(19, 6));
  mapping.add(CtSlot(9, 2), CtSlot(19, 7));
  mapping.add(CtSlot(11, 0), CtSlot(20, 0));
  mapping.add(CtSlot(31, 6), CtSlot(20, 1));
  mapping.add(CtSlot(12, 2), CtSlot(20, 2));
  mapping.add(CtSlot(25, 7), CtSlot(20, 3));
  mapping.add(CtSlot(12, 3), CtSlot(20, 4));
  mapping.add(CtSlot(21, 3), CtSlot(20, 5));
  mapping.add(CtSlot(13, 2), CtSlot(20, 6));
  mapping.add(CtSlot(3, 7), CtSlot(20, 7));
  mapping.add(CtSlot(29, 5), CtSlot(21, 0));
  mapping.add(CtSlot(18, 7), CtSlot(21, 1));
  mapping.add(CtSlot(0, 5), CtSlot(21, 2));
  mapping.add(CtSlot(17, 1), CtSlot(21, 3));
  mapping.add(CtSlot(17, 0), CtSlot(21, 4));
  mapping.add(CtSlot(19, 0), CtSlot(21, 5));
  mapping.add(CtSlot(25, 0), CtSlot(21, 6));
  mapping.add(CtSlot(29, 0), CtSlot(21, 7));
  mapping.add(CtSlot(18, 3), CtSlot(22, 0));
  mapping.add(CtSlot(19, 4), CtSlot(22, 1));
  mapping.add(CtSlot(6, 0), CtSlot(22, 2));
  mapping.add(CtSlot(5, 1), CtSlot(22, 3));
  mapping.add(CtSlot(10, 2), CtSlot(22, 4));
  mapping.add(CtSlot(30, 4), CtSlot(22, 5));
  mapping.add(CtSlot(30, 7), CtSlot(22, 6));
  mapping.add(CtSlot(20, 3), CtSlot(22, 7));
  mapping.add(CtSlot(15, 1), CtSlot(23, 0));
  mapping.add(CtSlot(5, 1), CtSlot(23, 1));
  mapping.add(CtSlot(11, 1), CtSlot(23, 2));
  mapping.add(CtSlot(0, 0), CtSlot(23, 3));
  mapping.add(CtSlot(27, 3), CtSlot(23, 4));
  mapping.add(CtSlot(2, 3), CtSlot(23, 5));
  mapping.add(CtSlot(19, 1), CtSlot(23, 6));
  mapping.add(CtSlot(16, 0), CtSlot(23, 7));
  mapping.add(CtSlot(27, 6), CtSlot(24, 0));
  mapping.add(CtSlot(13, 7), CtSlot(24, 1));
  mapping.add(CtSlot(11, 7), CtSlot(24, 2));
  mapping.add(CtSlot(30, 1), CtSlot(24, 3));
  mapping.add(CtSlot(22, 7), CtSlot(24, 4));
  mapping.add(CtSlot(3, 5), CtSlot(24, 5));
  mapping.add(CtSlot(2, 4), CtSlot(24, 6));
  mapping.add(CtSlot(1, 7), CtSlot(24, 7));
  mapping.add(CtSlot(10, 5), CtSlot(25, 0));
  mapping.add(CtSlot(6, 3), CtSlot(25, 1));
  mapping.add(CtSlot(25, 5), CtSlot(25, 2));
  mapping.add(CtSlot(2, 2), CtSlot(25, 3));
  mapping.add(CtSlot(23, 2), CtSlot(25, 4));
  mapping.add(CtSlot(0, 6), CtSlot(25, 5));
  mapping.add(CtSlot(17, 1), CtSlot(25, 6));
  mapping.add(CtSlot(22, 3), CtSlot(25, 7));
  mapping.add(CtSlot(10, 4), CtSlot(26, 0));
  mapping.add(CtSlot(9, 0), CtSlot(26, 1));
  mapping.add(CtSlot(25, 7), CtSlot(26, 2));
  mapping.add(CtSlot(9, 0), CtSlot(26, 3));
  mapping.add(CtSlot(16, 0), CtSlot(26, 4));
  mapping.add(CtSlot(18, 4), CtSlot(26, 5));
  mapping.add(CtSlot(19, 5), CtSlot(26, 6));
  mapping.add(CtSlot(20, 6), CtSlot(26, 7));
  mapping.add(CtSlot(19, 7), CtSlot(27, 0));
  mapping.add(CtSlot(22, 2), CtSlot(27, 1));
  mapping.add(CtSlot(11, 0), CtSlot(27, 2));
  mapping.add(CtSlot(6, 4), CtSlot(27, 3));
  mapping.add(CtSlot(8, 7), CtSlot(27, 4));
  mapping.add(CtSlot(23, 0), CtSlot(27, 5));
  mapping.add(CtSlot(13, 4), CtSlot(27, 6));
  mapping.add(CtSlot(24, 4), CtSlot(27, 7));
  mapping.add(CtSlot(29, 3), CtSlot(28, 0));
  mapping.add(CtSlot(26, 3), CtSlot(28, 1));
  mapping.add(CtSlot(23, 1), CtSlot(28, 2));
  mapping.add(CtSlot(6, 3), CtSlot(28, 3));
  mapping.add(CtSlot(9, 2), CtSlot(28, 4));
  mapping.add(CtSlot(13, 0), CtSlot(28, 5));
  mapping.add(CtSlot(13, 6), CtSlot(28, 6));
  mapping.add(CtSlot(18, 6), CtSlot(28, 7));
  mapping.add(CtSlot(4, 4), CtSlot(29, 0));
  mapping.add(CtSlot(20, 4), CtSlot(29, 1));
  mapping.add(CtSlot(31, 0), CtSlot(29, 2));
  mapping.add(CtSlot(16, 2), CtSlot(29, 3));
  mapping.add(CtSlot(24, 0), CtSlot(29, 4));
  mapping.add(CtSlot(6, 3), CtSlot(29, 5));
  mapping.add(CtSlot(11, 0), CtSlot(29, 6));
  mapping.add(CtSlot(31, 3), CtSlot(29, 7));
  mapping.add(CtSlot(18, 1), CtSlot(30, 0));
  mapping.add(CtSlot(21, 6), CtSlot(30, 1));
  mapping.add(CtSlot(26, 0), CtSlot(30, 2));
  mapping.add(CtSlot(4, 2), CtSlot(30, 3));
  mapping.add(CtSlot(2, 4), CtSlot(30, 4));
  mapping.add(CtSlot(11, 2), CtSlot(30, 5));
  mapping.add(CtSlot(28, 4), CtSlot(30, 6));
  mapping.add(CtSlot(24, 5), CtSlot(30, 7));
  mapping.add(CtSlot(25, 2), CtSlot(31, 0));
  mapping.add(CtSlot(30, 1), CtSlot(31, 1));
  mapping.add(CtSlot(7, 4), CtSlot(31, 2));
  mapping.add(CtSlot(12, 1), CtSlot(31, 3));
  mapping.add(CtSlot(16, 7), CtSlot(31, 4));
  mapping.add(CtSlot(14, 5), CtSlot(31, 5));
  mapping.add(CtSlot(15, 0), CtSlot(31, 6));
  mapping.add(CtSlot(27, 6), CtSlot(31, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_30) {
  int64_t numCts = 32;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(16, 0), CtSlot(0, 0));
  mapping.add(CtSlot(0, 1), CtSlot(0, 1));
  mapping.add(CtSlot(26, 4), CtSlot(0, 2));
  mapping.add(CtSlot(13, 1), CtSlot(0, 3));
  mapping.add(CtSlot(24, 2), CtSlot(0, 4));
  mapping.add(CtSlot(2, 5), CtSlot(0, 5));
  mapping.add(CtSlot(18, 6), CtSlot(0, 6));
  mapping.add(CtSlot(16, 0), CtSlot(0, 7));
  mapping.add(CtSlot(10, 3), CtSlot(1, 0));
  mapping.add(CtSlot(25, 4), CtSlot(1, 1));
  mapping.add(CtSlot(1, 5), CtSlot(1, 2));
  mapping.add(CtSlot(28, 1), CtSlot(1, 3));
  mapping.add(CtSlot(7, 1), CtSlot(1, 4));
  mapping.add(CtSlot(14, 7), CtSlot(1, 5));
  mapping.add(CtSlot(30, 1), CtSlot(1, 6));
  mapping.add(CtSlot(14, 0), CtSlot(1, 7));
  mapping.add(CtSlot(1, 5), CtSlot(2, 0));
  mapping.add(CtSlot(24, 2), CtSlot(2, 1));
  mapping.add(CtSlot(18, 0), CtSlot(2, 2));
  mapping.add(CtSlot(20, 1), CtSlot(2, 3));
  mapping.add(CtSlot(3, 5), CtSlot(2, 4));
  mapping.add(CtSlot(30, 6), CtSlot(2, 5));
  mapping.add(CtSlot(19, 2), CtSlot(2, 6));
  mapping.add(CtSlot(26, 5), CtSlot(2, 7));
  mapping.add(CtSlot(9, 3), CtSlot(3, 0));
  mapping.add(CtSlot(3, 2), CtSlot(3, 1));
  mapping.add(CtSlot(25, 5), CtSlot(3, 2));
  mapping.add(CtSlot(6, 0), CtSlot(3, 3));
  mapping.add(CtSlot(17, 4), CtSlot(3, 4));
  mapping.add(CtSlot(6, 1), CtSlot(3, 5));
  mapping.add(CtSlot(10, 4), CtSlot(3, 6));
  mapping.add(CtSlot(5, 0), CtSlot(3, 7));
  mapping.add(CtSlot(31, 5), CtSlot(4, 0));
  mapping.add(CtSlot(2, 6), CtSlot(4, 1));
  mapping.add(CtSlot(14, 0), CtSlot(4, 2));
  mapping.add(CtSlot(14, 5), CtSlot(4, 3));
  mapping.add(CtSlot(20, 2), CtSlot(4, 4));
  mapping.add(CtSlot(10, 3), CtSlot(4, 5));
  mapping.add(CtSlot(30, 6), CtSlot(4, 6));
  mapping.add(CtSlot(17, 1), CtSlot(4, 7));
  mapping.add(CtSlot(8, 4), CtSlot(5, 0));
  mapping.add(CtSlot(2, 7), CtSlot(5, 1));
  mapping.add(CtSlot(19, 0), CtSlot(5, 2));
  mapping.add(CtSlot(23, 5), CtSlot(5, 3));
  mapping.add(CtSlot(0, 5), CtSlot(5, 4));
  mapping.add(CtSlot(3, 1), CtSlot(5, 5));
  mapping.add(CtSlot(14, 5), CtSlot(5, 6));
  mapping.add(CtSlot(7, 5), CtSlot(5, 7));
  mapping.add(CtSlot(20, 1), CtSlot(6, 0));
  mapping.add(CtSlot(6, 2), CtSlot(6, 1));
  mapping.add(CtSlot(28, 0), CtSlot(6, 2));
  mapping.add(CtSlot(15, 4), CtSlot(6, 3));
  mapping.add(CtSlot(3, 3), CtSlot(6, 4));
  mapping.add(CtSlot(25, 3), CtSlot(6, 5));
  mapping.add(CtSlot(6, 2), CtSlot(6, 6));
  mapping.add(CtSlot(23, 1), CtSlot(6, 7));
  mapping.add(CtSlot(29, 1), CtSlot(7, 0));
  mapping.add(CtSlot(2, 0), CtSlot(7, 1));
  mapping.add(CtSlot(20, 5), CtSlot(7, 2));
  mapping.add(CtSlot(28, 5), CtSlot(7, 3));
  mapping.add(CtSlot(6, 4), CtSlot(7, 4));
  mapping.add(CtSlot(15, 1), CtSlot(7, 5));
  mapping.add(CtSlot(22, 4), CtSlot(7, 6));
  mapping.add(CtSlot(15, 6), CtSlot(7, 7));
  mapping.add(CtSlot(7, 1), CtSlot(8, 0));
  mapping.add(CtSlot(3, 5), CtSlot(8, 1));
  mapping.add(CtSlot(6, 3), CtSlot(8, 2));
  mapping.add(CtSlot(9, 6), CtSlot(8, 3));
  mapping.add(CtSlot(17, 6), CtSlot(8, 4));
  mapping.add(CtSlot(28, 6), CtSlot(8, 5));
  mapping.add(CtSlot(13, 7), CtSlot(8, 6));
  mapping.add(CtSlot(29, 2), CtSlot(8, 7));
  mapping.add(CtSlot(21, 0), CtSlot(9, 0));
  mapping.add(CtSlot(27, 7), CtSlot(9, 1));
  mapping.add(CtSlot(15, 2), CtSlot(9, 2));
  mapping.add(CtSlot(12, 1), CtSlot(9, 3));
  mapping.add(CtSlot(30, 5), CtSlot(9, 4));
  mapping.add(CtSlot(15, 7), CtSlot(9, 5));
  mapping.add(CtSlot(27, 3), CtSlot(9, 6));
  mapping.add(CtSlot(12, 1), CtSlot(9, 7));
  mapping.add(CtSlot(29, 6), CtSlot(10, 0));
  mapping.add(CtSlot(31, 2), CtSlot(10, 1));
  mapping.add(CtSlot(17, 7), CtSlot(10, 2));
  mapping.add(CtSlot(15, 7), CtSlot(10, 3));
  mapping.add(CtSlot(18, 3), CtSlot(10, 4));
  mapping.add(CtSlot(17, 5), CtSlot(10, 5));
  mapping.add(CtSlot(27, 1), CtSlot(10, 6));
  mapping.add(CtSlot(11, 2), CtSlot(10, 7));
  mapping.add(CtSlot(24, 2), CtSlot(11, 0));
  mapping.add(CtSlot(6, 0), CtSlot(11, 1));
  mapping.add(CtSlot(20, 1), CtSlot(11, 2));
  mapping.add(CtSlot(28, 2), CtSlot(11, 3));
  mapping.add(CtSlot(15, 0), CtSlot(11, 4));
  mapping.add(CtSlot(25, 6), CtSlot(11, 5));
  mapping.add(CtSlot(17, 3), CtSlot(11, 6));
  mapping.add(CtSlot(22, 6), CtSlot(11, 7));
  mapping.add(CtSlot(18, 2), CtSlot(12, 0));
  mapping.add(CtSlot(22, 2), CtSlot(12, 1));
  mapping.add(CtSlot(14, 0), CtSlot(12, 2));
  mapping.add(CtSlot(28, 5), CtSlot(12, 3));
  mapping.add(CtSlot(11, 3), CtSlot(12, 4));
  mapping.add(CtSlot(16, 3), CtSlot(12, 5));
  mapping.add(CtSlot(9, 1), CtSlot(12, 6));
  mapping.add(CtSlot(6, 7), CtSlot(12, 7));
  mapping.add(CtSlot(10, 5), CtSlot(13, 0));
  mapping.add(CtSlot(27, 7), CtSlot(13, 1));
  mapping.add(CtSlot(24, 0), CtSlot(13, 2));
  mapping.add(CtSlot(26, 6), CtSlot(13, 3));
  mapping.add(CtSlot(19, 6), CtSlot(13, 4));
  mapping.add(CtSlot(24, 7), CtSlot(13, 5));
  mapping.add(CtSlot(18, 3), CtSlot(13, 6));
  mapping.add(CtSlot(19, 0), CtSlot(13, 7));
  mapping.add(CtSlot(25, 4), CtSlot(14, 0));
  mapping.add(CtSlot(3, 7), CtSlot(14, 1));
  mapping.add(CtSlot(26, 0), CtSlot(14, 2));
  mapping.add(CtSlot(6, 2), CtSlot(14, 3));
  mapping.add(CtSlot(25, 2), CtSlot(14, 4));
  mapping.add(CtSlot(13, 3), CtSlot(14, 5));
  mapping.add(CtSlot(12, 4), CtSlot(14, 6));
  mapping.add(CtSlot(20, 5), CtSlot(14, 7));
  mapping.add(CtSlot(8, 5), CtSlot(15, 0));
  mapping.add(CtSlot(4, 2), CtSlot(15, 1));
  mapping.add(CtSlot(0, 5), CtSlot(15, 2));
  mapping.add(CtSlot(20, 0), CtSlot(15, 3));
  mapping.add(CtSlot(18, 7), CtSlot(15, 4));
  mapping.add(CtSlot(26, 4), CtSlot(15, 5));
  mapping.add(CtSlot(6, 4), CtSlot(15, 6));
  mapping.add(CtSlot(15, 3), CtSlot(15, 7));
  mapping.add(CtSlot(4, 4), CtSlot(16, 0));
  mapping.add(CtSlot(22, 5), CtSlot(16, 1));
  mapping.add(CtSlot(0, 0), CtSlot(16, 2));
  mapping.add(CtSlot(1, 2), CtSlot(16, 3));
  mapping.add(CtSlot(12, 7), CtSlot(16, 4));
  mapping.add(CtSlot(19, 5), CtSlot(16, 5));
  mapping.add(CtSlot(14, 0), CtSlot(16, 6));
  mapping.add(CtSlot(22, 3), CtSlot(16, 7));
  mapping.add(CtSlot(10, 0), CtSlot(17, 0));
  mapping.add(CtSlot(14, 7), CtSlot(17, 1));
  mapping.add(CtSlot(12, 5), CtSlot(17, 2));
  mapping.add(CtSlot(22, 1), CtSlot(17, 3));
  mapping.add(CtSlot(18, 0), CtSlot(17, 4));
  mapping.add(CtSlot(14, 5), CtSlot(17, 5));
  mapping.add(CtSlot(3, 0), CtSlot(17, 6));
  mapping.add(CtSlot(10, 5), CtSlot(17, 7));
  mapping.add(CtSlot(2, 1), CtSlot(18, 0));
  mapping.add(CtSlot(28, 4), CtSlot(18, 1));
  mapping.add(CtSlot(20, 1), CtSlot(18, 2));
  mapping.add(CtSlot(14, 5), CtSlot(18, 3));
  mapping.add(CtSlot(15, 6), CtSlot(18, 4));
  mapping.add(CtSlot(15, 5), CtSlot(18, 5));
  mapping.add(CtSlot(16, 1), CtSlot(18, 6));
  mapping.add(CtSlot(0, 7), CtSlot(18, 7));
  mapping.add(CtSlot(16, 5), CtSlot(19, 0));
  mapping.add(CtSlot(1, 6), CtSlot(19, 1));
  mapping.add(CtSlot(15, 5), CtSlot(19, 2));
  mapping.add(CtSlot(18, 6), CtSlot(19, 3));
  mapping.add(CtSlot(6, 0), CtSlot(19, 4));
  mapping.add(CtSlot(30, 6), CtSlot(19, 5));
  mapping.add(CtSlot(5, 7), CtSlot(19, 6));
  mapping.add(CtSlot(9, 2), CtSlot(19, 7));
  mapping.add(CtSlot(11, 0), CtSlot(20, 0));
  mapping.add(CtSlot(31, 6), CtSlot(20, 1));
  mapping.add(CtSlot(12, 2), CtSlot(20, 2));
  mapping.add(CtSlot(25, 7), CtSlot(20, 3));
  mapping.add(CtSlot(12, 3), CtSlot(20, 4));
  mapping.add(CtSlot(21, 3), CtSlot(20, 5));
  mapping.add(CtSlot(13, 2), CtSlot(20, 6));
  mapping.add(CtSlot(3, 7), CtSlot(20, 7));
  mapping.add(CtSlot(29, 5), CtSlot(21, 0));
  mapping.add(CtSlot(18, 7), CtSlot(21, 1));
  mapping.add(CtSlot(0, 5), CtSlot(21, 2));
  mapping.add(CtSlot(17, 1), CtSlot(21, 3));
  mapping.add(CtSlot(17, 0), CtSlot(21, 4));
  mapping.add(CtSlot(19, 0), CtSlot(21, 5));
  mapping.add(CtSlot(25, 0), CtSlot(21, 6));
  mapping.add(CtSlot(29, 0), CtSlot(21, 7));
  mapping.add(CtSlot(18, 3), CtSlot(22, 0));
  mapping.add(CtSlot(19, 4), CtSlot(22, 1));
  mapping.add(CtSlot(6, 0), CtSlot(22, 2));
  mapping.add(CtSlot(5, 1), CtSlot(22, 3));
  mapping.add(CtSlot(10, 2), CtSlot(22, 4));
  mapping.add(CtSlot(30, 4), CtSlot(22, 5));
  mapping.add(CtSlot(30, 7), CtSlot(22, 6));
  mapping.add(CtSlot(20, 3), CtSlot(22, 7));
  mapping.add(CtSlot(15, 1), CtSlot(23, 0));
  mapping.add(CtSlot(5, 1), CtSlot(23, 1));
  mapping.add(CtSlot(11, 1), CtSlot(23, 2));
  mapping.add(CtSlot(0, 0), CtSlot(23, 3));
  mapping.add(CtSlot(27, 3), CtSlot(23, 4));
  mapping.add(CtSlot(2, 3), CtSlot(23, 5));
  mapping.add(CtSlot(19, 1), CtSlot(23, 6));
  mapping.add(CtSlot(16, 0), CtSlot(23, 7));
  mapping.add(CtSlot(27, 6), CtSlot(24, 0));
  mapping.add(CtSlot(13, 7), CtSlot(24, 1));
  mapping.add(CtSlot(11, 7), CtSlot(24, 2));
  mapping.add(CtSlot(30, 1), CtSlot(24, 3));
  mapping.add(CtSlot(22, 7), CtSlot(24, 4));
  mapping.add(CtSlot(3, 5), CtSlot(24, 5));
  mapping.add(CtSlot(2, 4), CtSlot(24, 6));
  mapping.add(CtSlot(1, 7), CtSlot(24, 7));
  mapping.add(CtSlot(10, 5), CtSlot(25, 0));
  mapping.add(CtSlot(6, 3), CtSlot(25, 1));
  mapping.add(CtSlot(25, 5), CtSlot(25, 2));
  mapping.add(CtSlot(2, 2), CtSlot(25, 3));
  mapping.add(CtSlot(23, 2), CtSlot(25, 4));
  mapping.add(CtSlot(0, 6), CtSlot(25, 5));
  mapping.add(CtSlot(17, 1), CtSlot(25, 6));
  mapping.add(CtSlot(22, 3), CtSlot(25, 7));
  mapping.add(CtSlot(10, 4), CtSlot(26, 0));
  mapping.add(CtSlot(9, 0), CtSlot(26, 1));
  mapping.add(CtSlot(25, 7), CtSlot(26, 2));
  mapping.add(CtSlot(9, 0), CtSlot(26, 3));
  mapping.add(CtSlot(16, 0), CtSlot(26, 4));
  mapping.add(CtSlot(18, 4), CtSlot(26, 5));
  mapping.add(CtSlot(19, 5), CtSlot(26, 6));
  mapping.add(CtSlot(20, 6), CtSlot(26, 7));
  mapping.add(CtSlot(19, 7), CtSlot(27, 0));
  mapping.add(CtSlot(22, 2), CtSlot(27, 1));
  mapping.add(CtSlot(11, 0), CtSlot(27, 2));
  mapping.add(CtSlot(6, 4), CtSlot(27, 3));
  mapping.add(CtSlot(8, 7), CtSlot(27, 4));
  mapping.add(CtSlot(23, 0), CtSlot(27, 5));
  mapping.add(CtSlot(13, 4), CtSlot(27, 6));
  mapping.add(CtSlot(24, 4), CtSlot(27, 7));
  mapping.add(CtSlot(29, 3), CtSlot(28, 0));
  mapping.add(CtSlot(26, 3), CtSlot(28, 1));
  mapping.add(CtSlot(23, 1), CtSlot(28, 2));
  mapping.add(CtSlot(6, 3), CtSlot(28, 3));
  mapping.add(CtSlot(9, 2), CtSlot(28, 4));
  mapping.add(CtSlot(13, 0), CtSlot(28, 5));
  mapping.add(CtSlot(13, 6), CtSlot(28, 6));
  mapping.add(CtSlot(18, 6), CtSlot(28, 7));
  mapping.add(CtSlot(4, 4), CtSlot(29, 0));
  mapping.add(CtSlot(20, 4), CtSlot(29, 1));
  mapping.add(CtSlot(31, 0), CtSlot(29, 2));
  mapping.add(CtSlot(16, 2), CtSlot(29, 3));
  mapping.add(CtSlot(24, 0), CtSlot(29, 4));
  mapping.add(CtSlot(6, 3), CtSlot(29, 5));
  mapping.add(CtSlot(11, 0), CtSlot(29, 6));
  mapping.add(CtSlot(31, 3), CtSlot(29, 7));
  mapping.add(CtSlot(18, 1), CtSlot(30, 0));
  mapping.add(CtSlot(21, 6), CtSlot(30, 1));
  mapping.add(CtSlot(26, 0), CtSlot(30, 2));
  mapping.add(CtSlot(4, 2), CtSlot(30, 3));
  mapping.add(CtSlot(2, 4), CtSlot(30, 4));
  mapping.add(CtSlot(11, 2), CtSlot(30, 5));
  mapping.add(CtSlot(28, 4), CtSlot(30, 6));
  mapping.add(CtSlot(24, 5), CtSlot(30, 7));
  mapping.add(CtSlot(25, 2), CtSlot(31, 0));
  mapping.add(CtSlot(30, 1), CtSlot(31, 1));
  mapping.add(CtSlot(7, 4), CtSlot(31, 2));
  mapping.add(CtSlot(12, 1), CtSlot(31, 3));
  mapping.add(CtSlot(16, 7), CtSlot(31, 4));
  mapping.add(CtSlot(14, 5), CtSlot(31, 5));
  mapping.add(CtSlot(15, 0), CtSlot(31, 6));
  mapping.add(CtSlot(27, 6), CtSlot(31, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_31) {
  int64_t numCts = 32;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(16, 0), CtSlot(0, 0));
  mapping.add(CtSlot(0, 1), CtSlot(0, 1));
  mapping.add(CtSlot(26, 4), CtSlot(0, 2));
  mapping.add(CtSlot(13, 1), CtSlot(0, 3));
  mapping.add(CtSlot(24, 2), CtSlot(0, 4));
  mapping.add(CtSlot(2, 5), CtSlot(0, 5));
  mapping.add(CtSlot(18, 6), CtSlot(0, 6));
  mapping.add(CtSlot(16, 0), CtSlot(0, 7));
  mapping.add(CtSlot(10, 3), CtSlot(1, 0));
  mapping.add(CtSlot(25, 4), CtSlot(1, 1));
  mapping.add(CtSlot(1, 5), CtSlot(1, 2));
  mapping.add(CtSlot(28, 1), CtSlot(1, 3));
  mapping.add(CtSlot(7, 1), CtSlot(1, 4));
  mapping.add(CtSlot(14, 7), CtSlot(1, 5));
  mapping.add(CtSlot(30, 1), CtSlot(1, 6));
  mapping.add(CtSlot(14, 0), CtSlot(1, 7));
  mapping.add(CtSlot(1, 5), CtSlot(2, 0));
  mapping.add(CtSlot(24, 2), CtSlot(2, 1));
  mapping.add(CtSlot(18, 0), CtSlot(2, 2));
  mapping.add(CtSlot(20, 1), CtSlot(2, 3));
  mapping.add(CtSlot(3, 5), CtSlot(2, 4));
  mapping.add(CtSlot(30, 6), CtSlot(2, 5));
  mapping.add(CtSlot(19, 2), CtSlot(2, 6));
  mapping.add(CtSlot(26, 5), CtSlot(2, 7));
  mapping.add(CtSlot(9, 3), CtSlot(3, 0));
  mapping.add(CtSlot(3, 2), CtSlot(3, 1));
  mapping.add(CtSlot(25, 5), CtSlot(3, 2));
  mapping.add(CtSlot(6, 0), CtSlot(3, 3));
  mapping.add(CtSlot(17, 4), CtSlot(3, 4));
  mapping.add(CtSlot(6, 1), CtSlot(3, 5));
  mapping.add(CtSlot(10, 4), CtSlot(3, 6));
  mapping.add(CtSlot(5, 0), CtSlot(3, 7));
  mapping.add(CtSlot(31, 5), CtSlot(4, 0));
  mapping.add(CtSlot(2, 6), CtSlot(4, 1));
  mapping.add(CtSlot(14, 0), CtSlot(4, 2));
  mapping.add(CtSlot(14, 5), CtSlot(4, 3));
  mapping.add(CtSlot(20, 2), CtSlot(4, 4));
  mapping.add(CtSlot(10, 3), CtSlot(4, 5));
  mapping.add(CtSlot(30, 6), CtSlot(4, 6));
  mapping.add(CtSlot(17, 1), CtSlot(4, 7));
  mapping.add(CtSlot(8, 4), CtSlot(5, 0));
  mapping.add(CtSlot(2, 7), CtSlot(5, 1));
  mapping.add(CtSlot(19, 0), CtSlot(5, 2));
  mapping.add(CtSlot(23, 5), CtSlot(5, 3));
  mapping.add(CtSlot(0, 5), CtSlot(5, 4));
  mapping.add(CtSlot(3, 1), CtSlot(5, 5));
  mapping.add(CtSlot(14, 5), CtSlot(5, 6));
  mapping.add(CtSlot(7, 5), CtSlot(5, 7));
  mapping.add(CtSlot(20, 1), CtSlot(6, 0));
  mapping.add(CtSlot(6, 2), CtSlot(6, 1));
  mapping.add(CtSlot(28, 0), CtSlot(6, 2));
  mapping.add(CtSlot(15, 4), CtSlot(6, 3));
  mapping.add(CtSlot(3, 3), CtSlot(6, 4));
  mapping.add(CtSlot(25, 3), CtSlot(6, 5));
  mapping.add(CtSlot(6, 2), CtSlot(6, 6));
  mapping.add(CtSlot(23, 1), CtSlot(6, 7));
  mapping.add(CtSlot(29, 1), CtSlot(7, 0));
  mapping.add(CtSlot(2, 0), CtSlot(7, 1));
  mapping.add(CtSlot(20, 5), CtSlot(7, 2));
  mapping.add(CtSlot(28, 5), CtSlot(7, 3));
  mapping.add(CtSlot(6, 4), CtSlot(7, 4));
  mapping.add(CtSlot(15, 1), CtSlot(7, 5));
  mapping.add(CtSlot(22, 4), CtSlot(7, 6));
  mapping.add(CtSlot(15, 6), CtSlot(7, 7));
  mapping.add(CtSlot(7, 1), CtSlot(8, 0));
  mapping.add(CtSlot(3, 5), CtSlot(8, 1));
  mapping.add(CtSlot(6, 3), CtSlot(8, 2));
  mapping.add(CtSlot(9, 6), CtSlot(8, 3));
  mapping.add(CtSlot(17, 6), CtSlot(8, 4));
  mapping.add(CtSlot(28, 6), CtSlot(8, 5));
  mapping.add(CtSlot(13, 7), CtSlot(8, 6));
  mapping.add(CtSlot(29, 2), CtSlot(8, 7));
  mapping.add(CtSlot(21, 0), CtSlot(9, 0));
  mapping.add(CtSlot(27, 7), CtSlot(9, 1));
  mapping.add(CtSlot(15, 2), CtSlot(9, 2));
  mapping.add(CtSlot(12, 1), CtSlot(9, 3));
  mapping.add(CtSlot(30, 5), CtSlot(9, 4));
  mapping.add(CtSlot(15, 7), CtSlot(9, 5));
  mapping.add(CtSlot(27, 3), CtSlot(9, 6));
  mapping.add(CtSlot(12, 1), CtSlot(9, 7));
  mapping.add(CtSlot(29, 6), CtSlot(10, 0));
  mapping.add(CtSlot(31, 2), CtSlot(10, 1));
  mapping.add(CtSlot(17, 7), CtSlot(10, 2));
  mapping.add(CtSlot(15, 7), CtSlot(10, 3));
  mapping.add(CtSlot(18, 3), CtSlot(10, 4));
  mapping.add(CtSlot(17, 5), CtSlot(10, 5));
  mapping.add(CtSlot(27, 1), CtSlot(10, 6));
  mapping.add(CtSlot(11, 2), CtSlot(10, 7));
  mapping.add(CtSlot(24, 2), CtSlot(11, 0));
  mapping.add(CtSlot(6, 0), CtSlot(11, 1));
  mapping.add(CtSlot(20, 1), CtSlot(11, 2));
  mapping.add(CtSlot(28, 2), CtSlot(11, 3));
  mapping.add(CtSlot(15, 0), CtSlot(11, 4));
  mapping.add(CtSlot(25, 6), CtSlot(11, 5));
  mapping.add(CtSlot(17, 3), CtSlot(11, 6));
  mapping.add(CtSlot(22, 6), CtSlot(11, 7));
  mapping.add(CtSlot(18, 2), CtSlot(12, 0));
  mapping.add(CtSlot(22, 2), CtSlot(12, 1));
  mapping.add(CtSlot(14, 0), CtSlot(12, 2));
  mapping.add(CtSlot(28, 5), CtSlot(12, 3));
  mapping.add(CtSlot(11, 3), CtSlot(12, 4));
  mapping.add(CtSlot(16, 3), CtSlot(12, 5));
  mapping.add(CtSlot(9, 1), CtSlot(12, 6));
  mapping.add(CtSlot(6, 7), CtSlot(12, 7));
  mapping.add(CtSlot(10, 5), CtSlot(13, 0));
  mapping.add(CtSlot(27, 7), CtSlot(13, 1));
  mapping.add(CtSlot(24, 0), CtSlot(13, 2));
  mapping.add(CtSlot(26, 6), CtSlot(13, 3));
  mapping.add(CtSlot(19, 6), CtSlot(13, 4));
  mapping.add(CtSlot(24, 7), CtSlot(13, 5));
  mapping.add(CtSlot(18, 3), CtSlot(13, 6));
  mapping.add(CtSlot(19, 0), CtSlot(13, 7));
  mapping.add(CtSlot(25, 4), CtSlot(14, 0));
  mapping.add(CtSlot(3, 7), CtSlot(14, 1));
  mapping.add(CtSlot(26, 0), CtSlot(14, 2));
  mapping.add(CtSlot(6, 2), CtSlot(14, 3));
  mapping.add(CtSlot(25, 2), CtSlot(14, 4));
  mapping.add(CtSlot(13, 3), CtSlot(14, 5));
  mapping.add(CtSlot(12, 4), CtSlot(14, 6));
  mapping.add(CtSlot(20, 5), CtSlot(14, 7));
  mapping.add(CtSlot(8, 5), CtSlot(15, 0));
  mapping.add(CtSlot(4, 2), CtSlot(15, 1));
  mapping.add(CtSlot(0, 5), CtSlot(15, 2));
  mapping.add(CtSlot(20, 0), CtSlot(15, 3));
  mapping.add(CtSlot(18, 7), CtSlot(15, 4));
  mapping.add(CtSlot(26, 4), CtSlot(15, 5));
  mapping.add(CtSlot(6, 4), CtSlot(15, 6));
  mapping.add(CtSlot(15, 3), CtSlot(15, 7));
  mapping.add(CtSlot(4, 4), CtSlot(16, 0));
  mapping.add(CtSlot(22, 5), CtSlot(16, 1));
  mapping.add(CtSlot(0, 0), CtSlot(16, 2));
  mapping.add(CtSlot(1, 2), CtSlot(16, 3));
  mapping.add(CtSlot(12, 7), CtSlot(16, 4));
  mapping.add(CtSlot(19, 5), CtSlot(16, 5));
  mapping.add(CtSlot(14, 0), CtSlot(16, 6));
  mapping.add(CtSlot(22, 3), CtSlot(16, 7));
  mapping.add(CtSlot(10, 0), CtSlot(17, 0));
  mapping.add(CtSlot(14, 7), CtSlot(17, 1));
  mapping.add(CtSlot(12, 5), CtSlot(17, 2));
  mapping.add(CtSlot(22, 1), CtSlot(17, 3));
  mapping.add(CtSlot(18, 0), CtSlot(17, 4));
  mapping.add(CtSlot(14, 5), CtSlot(17, 5));
  mapping.add(CtSlot(3, 0), CtSlot(17, 6));
  mapping.add(CtSlot(10, 5), CtSlot(17, 7));
  mapping.add(CtSlot(2, 1), CtSlot(18, 0));
  mapping.add(CtSlot(28, 4), CtSlot(18, 1));
  mapping.add(CtSlot(20, 3), CtSlot(18, 2));
  mapping.add(CtSlot(14, 5), CtSlot(18, 3));
  mapping.add(CtSlot(15, 6), CtSlot(18, 4));
  mapping.add(CtSlot(15, 5), CtSlot(18, 5));
  mapping.add(CtSlot(16, 1), CtSlot(18, 6));
  mapping.add(CtSlot(0, 7), CtSlot(18, 7));
  mapping.add(CtSlot(16, 5), CtSlot(19, 0));
  mapping.add(CtSlot(1, 6), CtSlot(19, 1));
  mapping.add(CtSlot(15, 5), CtSlot(19, 2));
  mapping.add(CtSlot(18, 6), CtSlot(19, 3));
  mapping.add(CtSlot(6, 0), CtSlot(19, 4));
  mapping.add(CtSlot(30, 6), CtSlot(19, 5));
  mapping.add(CtSlot(5, 7), CtSlot(19, 6));
  mapping.add(CtSlot(9, 2), CtSlot(19, 7));
  mapping.add(CtSlot(11, 0), CtSlot(20, 0));
  mapping.add(CtSlot(31, 6), CtSlot(20, 1));
  mapping.add(CtSlot(12, 2), CtSlot(20, 2));
  mapping.add(CtSlot(25, 7), CtSlot(20, 3));
  mapping.add(CtSlot(12, 3), CtSlot(20, 4));
  mapping.add(CtSlot(21, 3), CtSlot(20, 5));
  mapping.add(CtSlot(13, 2), CtSlot(20, 6));
  mapping.add(CtSlot(3, 7), CtSlot(20, 7));
  mapping.add(CtSlot(29, 5), CtSlot(21, 0));
  mapping.add(CtSlot(18, 7), CtSlot(21, 1));
  mapping.add(CtSlot(0, 5), CtSlot(21, 2));
  mapping.add(CtSlot(17, 1), CtSlot(21, 3));
  mapping.add(CtSlot(17, 0), CtSlot(21, 4));
  mapping.add(CtSlot(19, 0), CtSlot(21, 5));
  mapping.add(CtSlot(25, 0), CtSlot(21, 6));
  mapping.add(CtSlot(29, 0), CtSlot(21, 7));
  mapping.add(CtSlot(18, 3), CtSlot(22, 0));
  mapping.add(CtSlot(19, 4), CtSlot(22, 1));
  mapping.add(CtSlot(6, 0), CtSlot(22, 2));
  mapping.add(CtSlot(5, 1), CtSlot(22, 3));
  mapping.add(CtSlot(10, 2), CtSlot(22, 4));
  mapping.add(CtSlot(30, 4), CtSlot(22, 5));
  mapping.add(CtSlot(30, 7), CtSlot(22, 6));
  mapping.add(CtSlot(20, 3), CtSlot(22, 7));
  mapping.add(CtSlot(15, 1), CtSlot(23, 0));
  mapping.add(CtSlot(5, 1), CtSlot(23, 1));
  mapping.add(CtSlot(11, 1), CtSlot(23, 2));
  mapping.add(CtSlot(0, 0), CtSlot(23, 3));
  mapping.add(CtSlot(27, 3), CtSlot(23, 4));
  mapping.add(CtSlot(2, 3), CtSlot(23, 5));
  mapping.add(CtSlot(19, 1), CtSlot(23, 6));
  mapping.add(CtSlot(16, 0), CtSlot(23, 7));
  mapping.add(CtSlot(27, 6), CtSlot(24, 0));
  mapping.add(CtSlot(13, 7), CtSlot(24, 1));
  mapping.add(CtSlot(11, 7), CtSlot(24, 2));
  mapping.add(CtSlot(30, 1), CtSlot(24, 3));
  mapping.add(CtSlot(22, 7), CtSlot(24, 4));
  mapping.add(CtSlot(3, 5), CtSlot(24, 5));
  mapping.add(CtSlot(2, 4), CtSlot(24, 6));
  mapping.add(CtSlot(1, 7), CtSlot(24, 7));
  mapping.add(CtSlot(10, 5), CtSlot(25, 0));
  mapping.add(CtSlot(6, 3), CtSlot(25, 1));
  mapping.add(CtSlot(25, 5), CtSlot(25, 2));
  mapping.add(CtSlot(2, 2), CtSlot(25, 3));
  mapping.add(CtSlot(23, 2), CtSlot(25, 4));
  mapping.add(CtSlot(0, 6), CtSlot(25, 5));
  mapping.add(CtSlot(17, 1), CtSlot(25, 6));
  mapping.add(CtSlot(22, 3), CtSlot(25, 7));
  mapping.add(CtSlot(10, 4), CtSlot(26, 0));
  mapping.add(CtSlot(9, 0), CtSlot(26, 1));
  mapping.add(CtSlot(25, 7), CtSlot(26, 2));
  mapping.add(CtSlot(9, 0), CtSlot(26, 3));
  mapping.add(CtSlot(16, 0), CtSlot(26, 4));
  mapping.add(CtSlot(18, 4), CtSlot(26, 5));
  mapping.add(CtSlot(19, 5), CtSlot(26, 6));
  mapping.add(CtSlot(20, 6), CtSlot(26, 7));
  mapping.add(CtSlot(19, 7), CtSlot(27, 0));
  mapping.add(CtSlot(22, 2), CtSlot(27, 1));
  mapping.add(CtSlot(11, 0), CtSlot(27, 2));
  mapping.add(CtSlot(6, 4), CtSlot(27, 3));
  mapping.add(CtSlot(8, 7), CtSlot(27, 4));
  mapping.add(CtSlot(23, 0), CtSlot(27, 5));
  mapping.add(CtSlot(13, 4), CtSlot(27, 6));
  mapping.add(CtSlot(24, 4), CtSlot(27, 7));
  mapping.add(CtSlot(29, 3), CtSlot(28, 0));
  mapping.add(CtSlot(26, 3), CtSlot(28, 1));
  mapping.add(CtSlot(23, 1), CtSlot(28, 2));
  mapping.add(CtSlot(6, 3), CtSlot(28, 3));
  mapping.add(CtSlot(9, 2), CtSlot(28, 4));
  mapping.add(CtSlot(13, 0), CtSlot(28, 5));
  mapping.add(CtSlot(13, 6), CtSlot(28, 6));
  mapping.add(CtSlot(18, 6), CtSlot(28, 7));
  mapping.add(CtSlot(4, 4), CtSlot(29, 0));
  mapping.add(CtSlot(20, 4), CtSlot(29, 1));
  mapping.add(CtSlot(31, 0), CtSlot(29, 2));
  mapping.add(CtSlot(16, 2), CtSlot(29, 3));
  mapping.add(CtSlot(24, 0), CtSlot(29, 4));
  mapping.add(CtSlot(6, 3), CtSlot(29, 5));
  mapping.add(CtSlot(11, 0), CtSlot(29, 6));
  mapping.add(CtSlot(31, 3), CtSlot(29, 7));
  mapping.add(CtSlot(18, 1), CtSlot(30, 0));
  mapping.add(CtSlot(21, 6), CtSlot(30, 1));
  mapping.add(CtSlot(26, 0), CtSlot(30, 2));
  mapping.add(CtSlot(4, 2), CtSlot(30, 3));
  mapping.add(CtSlot(2, 4), CtSlot(30, 4));
  mapping.add(CtSlot(11, 2), CtSlot(30, 5));
  mapping.add(CtSlot(28, 4), CtSlot(30, 6));
  mapping.add(CtSlot(24, 5), CtSlot(30, 7));
  mapping.add(CtSlot(25, 2), CtSlot(31, 0));
  mapping.add(CtSlot(30, 1), CtSlot(31, 1));
  mapping.add(CtSlot(7, 4), CtSlot(31, 2));
  mapping.add(CtSlot(12, 1), CtSlot(31, 3));
  mapping.add(CtSlot(16, 7), CtSlot(31, 4));
  mapping.add(CtSlot(14, 5), CtSlot(31, 5));
  mapping.add(CtSlot(15, 0), CtSlot(31, 6));
  mapping.add(CtSlot(27, 6), CtSlot(31, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_32) {
  int64_t numCts = 32;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(16, 0), CtSlot(0, 0));
  mapping.add(CtSlot(0, 1), CtSlot(0, 1));
  mapping.add(CtSlot(26, 4), CtSlot(0, 2));
  mapping.add(CtSlot(13, 1), CtSlot(0, 3));
  mapping.add(CtSlot(24, 2), CtSlot(0, 4));
  mapping.add(CtSlot(2, 5), CtSlot(0, 5));
  mapping.add(CtSlot(18, 6), CtSlot(0, 6));
  mapping.add(CtSlot(16, 0), CtSlot(0, 7));
  mapping.add(CtSlot(10, 3), CtSlot(1, 0));
  mapping.add(CtSlot(25, 4), CtSlot(1, 1));
  mapping.add(CtSlot(1, 5), CtSlot(1, 2));
  mapping.add(CtSlot(28, 1), CtSlot(1, 3));
  mapping.add(CtSlot(7, 1), CtSlot(1, 4));
  mapping.add(CtSlot(14, 7), CtSlot(1, 5));
  mapping.add(CtSlot(30, 1), CtSlot(1, 6));
  mapping.add(CtSlot(14, 0), CtSlot(1, 7));
  mapping.add(CtSlot(1, 5), CtSlot(2, 0));
  mapping.add(CtSlot(24, 2), CtSlot(2, 1));
  mapping.add(CtSlot(18, 0), CtSlot(2, 2));
  mapping.add(CtSlot(20, 1), CtSlot(2, 3));
  mapping.add(CtSlot(3, 5), CtSlot(2, 4));
  mapping.add(CtSlot(30, 6), CtSlot(2, 5));
  mapping.add(CtSlot(19, 2), CtSlot(2, 6));
  mapping.add(CtSlot(26, 5), CtSlot(2, 7));
  mapping.add(CtSlot(9, 3), CtSlot(3, 0));
  mapping.add(CtSlot(3, 2), CtSlot(3, 1));
  mapping.add(CtSlot(25, 5), CtSlot(3, 2));
  mapping.add(CtSlot(6, 0), CtSlot(3, 3));
  mapping.add(CtSlot(17, 4), CtSlot(3, 4));
  mapping.add(CtSlot(6, 1), CtSlot(3, 5));
  mapping.add(CtSlot(10, 4), CtSlot(3, 6));
  mapping.add(CtSlot(5, 0), CtSlot(3, 7));
  mapping.add(CtSlot(31, 5), CtSlot(4, 0));
  mapping.add(CtSlot(2, 6), CtSlot(4, 1));
  mapping.add(CtSlot(14, 0), CtSlot(4, 2));
  mapping.add(CtSlot(14, 5), CtSlot(4, 3));
  mapping.add(CtSlot(20, 2), CtSlot(4, 4));
  mapping.add(CtSlot(10, 3), CtSlot(4, 5));
  mapping.add(CtSlot(30, 6), CtSlot(4, 6));
  mapping.add(CtSlot(17, 1), CtSlot(4, 7));
  mapping.add(CtSlot(8, 4), CtSlot(5, 0));
  mapping.add(CtSlot(2, 7), CtSlot(5, 1));
  mapping.add(CtSlot(19, 0), CtSlot(5, 2));
  mapping.add(CtSlot(23, 5), CtSlot(5, 3));
  mapping.add(CtSlot(0, 5), CtSlot(5, 4));
  mapping.add(CtSlot(3, 1), CtSlot(5, 5));
  mapping.add(CtSlot(14, 5), CtSlot(5, 6));
  mapping.add(CtSlot(7, 5), CtSlot(5, 7));
  mapping.add(CtSlot(20, 1), CtSlot(6, 0));
  mapping.add(CtSlot(6, 2), CtSlot(6, 1));
  mapping.add(CtSlot(28, 0), CtSlot(6, 2));
  mapping.add(CtSlot(15, 4), CtSlot(6, 3));
  mapping.add(CtSlot(3, 3), CtSlot(6, 4));
  mapping.add(CtSlot(25, 3), CtSlot(6, 5));
  mapping.add(CtSlot(6, 2), CtSlot(6, 6));
  mapping.add(CtSlot(23, 1), CtSlot(6, 7));
  mapping.add(CtSlot(29, 1), CtSlot(7, 0));
  mapping.add(CtSlot(2, 0), CtSlot(7, 1));
  mapping.add(CtSlot(20, 5), CtSlot(7, 2));
  mapping.add(CtSlot(28, 5), CtSlot(7, 3));
  mapping.add(CtSlot(6, 4), CtSlot(7, 4));
  mapping.add(CtSlot(15, 1), CtSlot(7, 5));
  mapping.add(CtSlot(22, 6), CtSlot(7, 6));
  mapping.add(CtSlot(15, 6), CtSlot(7, 7));
  mapping.add(CtSlot(7, 1), CtSlot(8, 0));
  mapping.add(CtSlot(3, 5), CtSlot(8, 1));
  mapping.add(CtSlot(6, 3), CtSlot(8, 2));
  mapping.add(CtSlot(9, 6), CtSlot(8, 3));
  mapping.add(CtSlot(17, 6), CtSlot(8, 4));
  mapping.add(CtSlot(28, 6), CtSlot(8, 5));
  mapping.add(CtSlot(13, 7), CtSlot(8, 6));
  mapping.add(CtSlot(29, 2), CtSlot(8, 7));
  mapping.add(CtSlot(21, 0), CtSlot(9, 0));
  mapping.add(CtSlot(27, 7), CtSlot(9, 1));
  mapping.add(CtSlot(15, 2), CtSlot(9, 2));
  mapping.add(CtSlot(12, 1), CtSlot(9, 3));
  mapping.add(CtSlot(30, 5), CtSlot(9, 4));
  mapping.add(CtSlot(15, 7), CtSlot(9, 5));
  mapping.add(CtSlot(27, 3), CtSlot(9, 6));
  mapping.add(CtSlot(12, 1), CtSlot(9, 7));
  mapping.add(CtSlot(29, 6), CtSlot(10, 0));
  mapping.add(CtSlot(31, 2), CtSlot(10, 1));
  mapping.add(CtSlot(17, 7), CtSlot(10, 2));
  mapping.add(CtSlot(15, 7), CtSlot(10, 3));
  mapping.add(CtSlot(18, 3), CtSlot(10, 4));
  mapping.add(CtSlot(17, 5), CtSlot(10, 5));
  mapping.add(CtSlot(27, 1), CtSlot(10, 6));
  mapping.add(CtSlot(11, 2), CtSlot(10, 7));
  mapping.add(CtSlot(24, 2), CtSlot(11, 0));
  mapping.add(CtSlot(6, 0), CtSlot(11, 1));
  mapping.add(CtSlot(20, 1), CtSlot(11, 2));
  mapping.add(CtSlot(28, 2), CtSlot(11, 3));
  mapping.add(CtSlot(15, 0), CtSlot(11, 4));
  mapping.add(CtSlot(25, 6), CtSlot(11, 5));
  mapping.add(CtSlot(17, 3), CtSlot(11, 6));
  mapping.add(CtSlot(22, 6), CtSlot(11, 7));
  mapping.add(CtSlot(18, 2), CtSlot(12, 0));
  mapping.add(CtSlot(22, 2), CtSlot(12, 1));
  mapping.add(CtSlot(14, 0), CtSlot(12, 2));
  mapping.add(CtSlot(28, 5), CtSlot(12, 3));
  mapping.add(CtSlot(11, 3), CtSlot(12, 4));
  mapping.add(CtSlot(16, 3), CtSlot(12, 5));
  mapping.add(CtSlot(9, 1), CtSlot(12, 6));
  mapping.add(CtSlot(6, 7), CtSlot(12, 7));
  mapping.add(CtSlot(10, 5), CtSlot(13, 0));
  mapping.add(CtSlot(27, 7), CtSlot(13, 1));
  mapping.add(CtSlot(24, 0), CtSlot(13, 2));
  mapping.add(CtSlot(26, 6), CtSlot(13, 3));
  mapping.add(CtSlot(19, 6), CtSlot(13, 4));
  mapping.add(CtSlot(24, 7), CtSlot(13, 5));
  mapping.add(CtSlot(18, 3), CtSlot(13, 6));
  mapping.add(CtSlot(19, 0), CtSlot(13, 7));
  mapping.add(CtSlot(25, 4), CtSlot(14, 0));
  mapping.add(CtSlot(3, 7), CtSlot(14, 1));
  mapping.add(CtSlot(26, 0), CtSlot(14, 2));
  mapping.add(CtSlot(6, 2), CtSlot(14, 3));
  mapping.add(CtSlot(25, 2), CtSlot(14, 4));
  mapping.add(CtSlot(13, 3), CtSlot(14, 5));
  mapping.add(CtSlot(12, 4), CtSlot(14, 6));
  mapping.add(CtSlot(20, 5), CtSlot(14, 7));
  mapping.add(CtSlot(8, 5), CtSlot(15, 0));
  mapping.add(CtSlot(4, 2), CtSlot(15, 1));
  mapping.add(CtSlot(0, 5), CtSlot(15, 2));
  mapping.add(CtSlot(20, 0), CtSlot(15, 3));
  mapping.add(CtSlot(18, 7), CtSlot(15, 4));
  mapping.add(CtSlot(26, 4), CtSlot(15, 5));
  mapping.add(CtSlot(6, 4), CtSlot(15, 6));
  mapping.add(CtSlot(15, 3), CtSlot(15, 7));
  mapping.add(CtSlot(4, 4), CtSlot(16, 0));
  mapping.add(CtSlot(22, 5), CtSlot(16, 1));
  mapping.add(CtSlot(0, 0), CtSlot(16, 2));
  mapping.add(CtSlot(1, 2), CtSlot(16, 3));
  mapping.add(CtSlot(12, 7), CtSlot(16, 4));
  mapping.add(CtSlot(19, 5), CtSlot(16, 5));
  mapping.add(CtSlot(14, 0), CtSlot(16, 6));
  mapping.add(CtSlot(22, 3), CtSlot(16, 7));
  mapping.add(CtSlot(10, 0), CtSlot(17, 0));
  mapping.add(CtSlot(14, 7), CtSlot(17, 1));
  mapping.add(CtSlot(12, 5), CtSlot(17, 2));
  mapping.add(CtSlot(22, 1), CtSlot(17, 3));
  mapping.add(CtSlot(18, 0), CtSlot(17, 4));
  mapping.add(CtSlot(14, 5), CtSlot(17, 5));
  mapping.add(CtSlot(3, 0), CtSlot(17, 6));
  mapping.add(CtSlot(10, 5), CtSlot(17, 7));
  mapping.add(CtSlot(2, 1), CtSlot(18, 0));
  mapping.add(CtSlot(28, 4), CtSlot(18, 1));
  mapping.add(CtSlot(20, 3), CtSlot(18, 2));
  mapping.add(CtSlot(14, 5), CtSlot(18, 3));
  mapping.add(CtSlot(15, 6), CtSlot(18, 4));
  mapping.add(CtSlot(15, 5), CtSlot(18, 5));
  mapping.add(CtSlot(16, 1), CtSlot(18, 6));
  mapping.add(CtSlot(0, 7), CtSlot(18, 7));
  mapping.add(CtSlot(16, 5), CtSlot(19, 0));
  mapping.add(CtSlot(1, 6), CtSlot(19, 1));
  mapping.add(CtSlot(15, 5), CtSlot(19, 2));
  mapping.add(CtSlot(18, 6), CtSlot(19, 3));
  mapping.add(CtSlot(6, 0), CtSlot(19, 4));
  mapping.add(CtSlot(30, 6), CtSlot(19, 5));
  mapping.add(CtSlot(5, 7), CtSlot(19, 6));
  mapping.add(CtSlot(9, 2), CtSlot(19, 7));
  mapping.add(CtSlot(11, 0), CtSlot(20, 0));
  mapping.add(CtSlot(31, 6), CtSlot(20, 1));
  mapping.add(CtSlot(12, 2), CtSlot(20, 2));
  mapping.add(CtSlot(25, 7), CtSlot(20, 3));
  mapping.add(CtSlot(12, 3), CtSlot(20, 4));
  mapping.add(CtSlot(21, 3), CtSlot(20, 5));
  mapping.add(CtSlot(13, 2), CtSlot(20, 6));
  mapping.add(CtSlot(3, 7), CtSlot(20, 7));
  mapping.add(CtSlot(29, 5), CtSlot(21, 0));
  mapping.add(CtSlot(18, 7), CtSlot(21, 1));
  mapping.add(CtSlot(0, 5), CtSlot(21, 2));
  mapping.add(CtSlot(17, 1), CtSlot(21, 3));
  mapping.add(CtSlot(17, 0), CtSlot(21, 4));
  mapping.add(CtSlot(19, 0), CtSlot(21, 5));
  mapping.add(CtSlot(25, 0), CtSlot(21, 6));
  mapping.add(CtSlot(29, 0), CtSlot(21, 7));
  mapping.add(CtSlot(18, 3), CtSlot(22, 0));
  mapping.add(CtSlot(19, 4), CtSlot(22, 1));
  mapping.add(CtSlot(6, 0), CtSlot(22, 2));
  mapping.add(CtSlot(5, 1), CtSlot(22, 3));
  mapping.add(CtSlot(10, 2), CtSlot(22, 4));
  mapping.add(CtSlot(30, 4), CtSlot(22, 5));
  mapping.add(CtSlot(30, 7), CtSlot(22, 6));
  mapping.add(CtSlot(20, 3), CtSlot(22, 7));
  mapping.add(CtSlot(15, 1), CtSlot(23, 0));
  mapping.add(CtSlot(5, 1), CtSlot(23, 1));
  mapping.add(CtSlot(11, 1), CtSlot(23, 2));
  mapping.add(CtSlot(0, 0), CtSlot(23, 3));
  mapping.add(CtSlot(27, 3), CtSlot(23, 4));
  mapping.add(CtSlot(2, 3), CtSlot(23, 5));
  mapping.add(CtSlot(19, 1), CtSlot(23, 6));
  mapping.add(CtSlot(16, 0), CtSlot(23, 7));
  mapping.add(CtSlot(27, 6), CtSlot(24, 0));
  mapping.add(CtSlot(13, 7), CtSlot(24, 1));
  mapping.add(CtSlot(11, 7), CtSlot(24, 2));
  mapping.add(CtSlot(30, 1), CtSlot(24, 3));
  mapping.add(CtSlot(22, 7), CtSlot(24, 4));
  mapping.add(CtSlot(3, 5), CtSlot(24, 5));
  mapping.add(CtSlot(2, 4), CtSlot(24, 6));
  mapping.add(CtSlot(1, 7), CtSlot(24, 7));
  mapping.add(CtSlot(10, 5), CtSlot(25, 0));
  mapping.add(CtSlot(6, 3), CtSlot(25, 1));
  mapping.add(CtSlot(25, 5), CtSlot(25, 2));
  mapping.add(CtSlot(2, 2), CtSlot(25, 3));
  mapping.add(CtSlot(23, 2), CtSlot(25, 4));
  mapping.add(CtSlot(0, 6), CtSlot(25, 5));
  mapping.add(CtSlot(17, 1), CtSlot(25, 6));
  mapping.add(CtSlot(22, 3), CtSlot(25, 7));
  mapping.add(CtSlot(10, 4), CtSlot(26, 0));
  mapping.add(CtSlot(9, 0), CtSlot(26, 1));
  mapping.add(CtSlot(25, 7), CtSlot(26, 2));
  mapping.add(CtSlot(9, 0), CtSlot(26, 3));
  mapping.add(CtSlot(16, 0), CtSlot(26, 4));
  mapping.add(CtSlot(18, 4), CtSlot(26, 5));
  mapping.add(CtSlot(19, 5), CtSlot(26, 6));
  mapping.add(CtSlot(20, 6), CtSlot(26, 7));
  mapping.add(CtSlot(19, 7), CtSlot(27, 0));
  mapping.add(CtSlot(22, 2), CtSlot(27, 1));
  mapping.add(CtSlot(11, 0), CtSlot(27, 2));
  mapping.add(CtSlot(6, 4), CtSlot(27, 3));
  mapping.add(CtSlot(8, 7), CtSlot(27, 4));
  mapping.add(CtSlot(23, 0), CtSlot(27, 5));
  mapping.add(CtSlot(13, 4), CtSlot(27, 6));
  mapping.add(CtSlot(24, 4), CtSlot(27, 7));
  mapping.add(CtSlot(29, 3), CtSlot(28, 0));
  mapping.add(CtSlot(26, 3), CtSlot(28, 1));
  mapping.add(CtSlot(23, 1), CtSlot(28, 2));
  mapping.add(CtSlot(6, 3), CtSlot(28, 3));
  mapping.add(CtSlot(9, 2), CtSlot(28, 4));
  mapping.add(CtSlot(13, 0), CtSlot(28, 5));
  mapping.add(CtSlot(13, 6), CtSlot(28, 6));
  mapping.add(CtSlot(18, 6), CtSlot(28, 7));
  mapping.add(CtSlot(4, 4), CtSlot(29, 0));
  mapping.add(CtSlot(20, 4), CtSlot(29, 1));
  mapping.add(CtSlot(31, 0), CtSlot(29, 2));
  mapping.add(CtSlot(16, 2), CtSlot(29, 3));
  mapping.add(CtSlot(24, 0), CtSlot(29, 4));
  mapping.add(CtSlot(6, 3), CtSlot(29, 5));
  mapping.add(CtSlot(11, 0), CtSlot(29, 6));
  mapping.add(CtSlot(31, 3), CtSlot(29, 7));
  mapping.add(CtSlot(18, 1), CtSlot(30, 0));
  mapping.add(CtSlot(21, 6), CtSlot(30, 1));
  mapping.add(CtSlot(26, 0), CtSlot(30, 2));
  mapping.add(CtSlot(4, 2), CtSlot(30, 3));
  mapping.add(CtSlot(2, 4), CtSlot(30, 4));
  mapping.add(CtSlot(11, 2), CtSlot(30, 5));
  mapping.add(CtSlot(28, 4), CtSlot(30, 6));
  mapping.add(CtSlot(24, 5), CtSlot(30, 7));
  mapping.add(CtSlot(25, 2), CtSlot(31, 0));
  mapping.add(CtSlot(30, 1), CtSlot(31, 1));
  mapping.add(CtSlot(7, 4), CtSlot(31, 2));
  mapping.add(CtSlot(12, 1), CtSlot(31, 3));
  mapping.add(CtSlot(16, 7), CtSlot(31, 4));
  mapping.add(CtSlot(14, 5), CtSlot(31, 5));
  mapping.add(CtSlot(15, 0), CtSlot(31, 6));
  mapping.add(CtSlot(27, 6), CtSlot(31, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_33) {
  int64_t numCts = 14;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(10, 7), CtSlot(0, 0));
  mapping.add(CtSlot(7, 3), CtSlot(0, 1));
  mapping.add(CtSlot(5, 6), CtSlot(0, 2));
  mapping.add(CtSlot(6, 2), CtSlot(0, 3));
  mapping.add(CtSlot(13, 4), CtSlot(0, 4));
  mapping.add(CtSlot(6, 6), CtSlot(0, 5));
  mapping.add(CtSlot(4, 5), CtSlot(0, 6));
  mapping.add(CtSlot(2, 6), CtSlot(0, 7));
  mapping.add(CtSlot(8, 5), CtSlot(1, 0));
  mapping.add(CtSlot(7, 2), CtSlot(1, 1));
  mapping.add(CtSlot(1, 5), CtSlot(1, 2));
  mapping.add(CtSlot(11, 3), CtSlot(1, 3));
  mapping.add(CtSlot(4, 0), CtSlot(1, 4));
  mapping.add(CtSlot(8, 6), CtSlot(1, 5));
  mapping.add(CtSlot(8, 0), CtSlot(1, 6));
  mapping.add(CtSlot(10, 2), CtSlot(1, 7));
  mapping.add(CtSlot(6, 3), CtSlot(2, 0));
  mapping.add(CtSlot(9, 1), CtSlot(2, 1));
  mapping.add(CtSlot(1, 3), CtSlot(2, 2));
  mapping.add(CtSlot(11, 3), CtSlot(2, 3));
  mapping.add(CtSlot(0, 7), CtSlot(2, 4));
  mapping.add(CtSlot(7, 3), CtSlot(2, 5));
  mapping.add(CtSlot(6, 5), CtSlot(2, 6));
  mapping.add(CtSlot(13, 0), CtSlot(2, 7));
  mapping.add(CtSlot(12, 2), CtSlot(3, 0));
  mapping.add(CtSlot(12, 1), CtSlot(3, 1));
  mapping.add(CtSlot(5, 2), CtSlot(3, 2));
  mapping.add(CtSlot(7, 2), CtSlot(3, 3));
  mapping.add(CtSlot(9, 0), CtSlot(3, 4));
  mapping.add(CtSlot(9, 7), CtSlot(3, 5));
  mapping.add(CtSlot(12, 5), CtSlot(3, 6));
  mapping.add(CtSlot(8, 0), CtSlot(3, 7));
  mapping.add(CtSlot(11, 7), CtSlot(4, 0));
  mapping.add(CtSlot(6, 6), CtSlot(4, 1));
  mapping.add(CtSlot(11, 2), CtSlot(4, 2));
  mapping.add(CtSlot(3, 6), CtSlot(4, 3));
  mapping.add(CtSlot(2, 4), CtSlot(4, 4));
  mapping.add(CtSlot(12, 0), CtSlot(4, 5));
  mapping.add(CtSlot(2, 3), CtSlot(4, 6));
  mapping.add(CtSlot(5, 1), CtSlot(4, 7));
  mapping.add(CtSlot(9, 3), CtSlot(5, 0));
  mapping.add(CtSlot(10, 5), CtSlot(5, 1));
  mapping.add(CtSlot(9, 4), CtSlot(5, 2));
  mapping.add(CtSlot(10, 4), CtSlot(5, 3));
  mapping.add(CtSlot(10, 3), CtSlot(5, 4));
  mapping.add(CtSlot(9, 5), CtSlot(5, 5));
  mapping.add(CtSlot(11, 5), CtSlot(5, 6));
  mapping.add(CtSlot(8, 7), CtSlot(5, 7));
  mapping.add(CtSlot(9, 6), CtSlot(6, 0));
  mapping.add(CtSlot(4, 4), CtSlot(6, 1));
  mapping.add(CtSlot(0, 3), CtSlot(6, 2));
  mapping.add(CtSlot(8, 2), CtSlot(6, 3));
  mapping.add(CtSlot(1, 0), CtSlot(6, 4));
  mapping.add(CtSlot(11, 1), CtSlot(6, 5));
  mapping.add(CtSlot(3, 4), CtSlot(6, 6));
  mapping.add(CtSlot(10, 2), CtSlot(6, 7));
  mapping.add(CtSlot(6, 4), CtSlot(7, 0));
  mapping.add(CtSlot(0, 0), CtSlot(7, 1));
  mapping.add(CtSlot(1, 6), CtSlot(7, 2));
  mapping.add(CtSlot(10, 6), CtSlot(7, 3));
  mapping.add(CtSlot(5, 4), CtSlot(7, 4));
  mapping.add(CtSlot(0, 5), CtSlot(7, 5));
  mapping.add(CtSlot(1, 5), CtSlot(7, 6));
  mapping.add(CtSlot(5, 3), CtSlot(7, 7));
  mapping.add(CtSlot(10, 7), CtSlot(8, 0));
  mapping.add(CtSlot(9, 7), CtSlot(8, 1));
  mapping.add(CtSlot(6, 2), CtSlot(8, 2));
  mapping.add(CtSlot(4, 0), CtSlot(8, 3));
  mapping.add(CtSlot(10, 1), CtSlot(8, 4));
  mapping.add(CtSlot(13, 2), CtSlot(8, 5));
  mapping.add(CtSlot(4, 1), CtSlot(8, 6));
  mapping.add(CtSlot(6, 0), CtSlot(8, 7));
  mapping.add(CtSlot(11, 6), CtSlot(9, 0));
  mapping.add(CtSlot(7, 0), CtSlot(9, 1));
  mapping.add(CtSlot(5, 5), CtSlot(9, 2));
  mapping.add(CtSlot(7, 1), CtSlot(9, 3));
  mapping.add(CtSlot(11, 3), CtSlot(9, 4));
  mapping.add(CtSlot(6, 1), CtSlot(9, 5));
  mapping.add(CtSlot(0, 5), CtSlot(9, 6));
  mapping.add(CtSlot(9, 1), CtSlot(9, 7));
  mapping.add(CtSlot(9, 3), CtSlot(10, 0));
  mapping.add(CtSlot(1, 4), CtSlot(10, 1));
  mapping.add(CtSlot(4, 7), CtSlot(10, 2));
  mapping.add(CtSlot(8, 1), CtSlot(10, 3));
  mapping.add(CtSlot(3, 4), CtSlot(10, 4));
  mapping.add(CtSlot(11, 3), CtSlot(10, 5));
  mapping.add(CtSlot(0, 3), CtSlot(10, 6));
  mapping.add(CtSlot(1, 5), CtSlot(10, 7));
  mapping.add(CtSlot(12, 4), CtSlot(11, 0));
  mapping.add(CtSlot(1, 7), CtSlot(11, 1));
  mapping.add(CtSlot(3, 0), CtSlot(11, 2));
  mapping.add(CtSlot(11, 2), CtSlot(11, 3));
  mapping.add(CtSlot(0, 7), CtSlot(11, 4));
  mapping.add(CtSlot(4, 7), CtSlot(11, 5));
  mapping.add(CtSlot(6, 6), CtSlot(11, 6));
  mapping.add(CtSlot(5, 2), CtSlot(11, 7));
  mapping.add(CtSlot(8, 6), CtSlot(12, 0));
  mapping.add(CtSlot(7, 3), CtSlot(12, 1));
  mapping.add(CtSlot(5, 3), CtSlot(12, 2));
  mapping.add(CtSlot(3, 7), CtSlot(12, 3));
  mapping.add(CtSlot(13, 5), CtSlot(12, 4));
  mapping.add(CtSlot(11, 7), CtSlot(12, 5));
  mapping.add(CtSlot(7, 6), CtSlot(12, 6));
  mapping.add(CtSlot(13, 6), CtSlot(12, 7));
  mapping.add(CtSlot(4, 5), CtSlot(13, 0));
  mapping.add(CtSlot(1, 0), CtSlot(13, 1));
  mapping.add(CtSlot(11, 7), CtSlot(13, 2));
  mapping.add(CtSlot(10, 3), CtSlot(13, 3));
  mapping.add(CtSlot(9, 0), CtSlot(13, 4));
  mapping.add(CtSlot(12, 1), CtSlot(13, 5));
  mapping.add(CtSlot(2, 7), CtSlot(13, 6));
  mapping.add(CtSlot(13, 0), CtSlot(13, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_34) {
  int64_t numCts = 14;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(10, 7), CtSlot(0, 0));
  mapping.add(CtSlot(7, 3), CtSlot(0, 1));
  mapping.add(CtSlot(5, 6), CtSlot(0, 2));
  mapping.add(CtSlot(6, 2), CtSlot(0, 3));
  mapping.add(CtSlot(13, 4), CtSlot(0, 4));
  mapping.add(CtSlot(6, 6), CtSlot(0, 5));
  mapping.add(CtSlot(4, 5), CtSlot(0, 6));
  mapping.add(CtSlot(2, 6), CtSlot(0, 7));
  mapping.add(CtSlot(8, 5), CtSlot(1, 0));
  mapping.add(CtSlot(7, 2), CtSlot(1, 1));
  mapping.add(CtSlot(1, 5), CtSlot(1, 2));
  mapping.add(CtSlot(11, 3), CtSlot(1, 3));
  mapping.add(CtSlot(4, 0), CtSlot(1, 4));
  mapping.add(CtSlot(8, 6), CtSlot(1, 5));
  mapping.add(CtSlot(8, 0), CtSlot(1, 6));
  mapping.add(CtSlot(10, 2), CtSlot(1, 7));
  mapping.add(CtSlot(6, 3), CtSlot(2, 0));
  mapping.add(CtSlot(9, 1), CtSlot(2, 1));
  mapping.add(CtSlot(1, 3), CtSlot(2, 2));
  mapping.add(CtSlot(11, 3), CtSlot(2, 3));
  mapping.add(CtSlot(0, 7), CtSlot(2, 4));
  mapping.add(CtSlot(7, 3), CtSlot(2, 5));
  mapping.add(CtSlot(6, 5), CtSlot(2, 6));
  mapping.add(CtSlot(13, 0), CtSlot(2, 7));
  mapping.add(CtSlot(12, 2), CtSlot(3, 0));
  mapping.add(CtSlot(12, 1), CtSlot(3, 1));
  mapping.add(CtSlot(5, 2), CtSlot(3, 2));
  mapping.add(CtSlot(7, 2), CtSlot(3, 3));
  mapping.add(CtSlot(9, 0), CtSlot(3, 4));
  mapping.add(CtSlot(9, 7), CtSlot(3, 5));
  mapping.add(CtSlot(12, 5), CtSlot(3, 6));
  mapping.add(CtSlot(8, 0), CtSlot(3, 7));
  mapping.add(CtSlot(11, 7), CtSlot(4, 0));
  mapping.add(CtSlot(6, 6), CtSlot(4, 1));
  mapping.add(CtSlot(11, 2), CtSlot(4, 2));
  mapping.add(CtSlot(3, 6), CtSlot(4, 3));
  mapping.add(CtSlot(2, 4), CtSlot(4, 4));
  mapping.add(CtSlot(12, 0), CtSlot(4, 5));
  mapping.add(CtSlot(2, 3), CtSlot(4, 6));
  mapping.add(CtSlot(5, 1), CtSlot(4, 7));
  mapping.add(CtSlot(9, 3), CtSlot(5, 0));
  mapping.add(CtSlot(10, 5), CtSlot(5, 1));
  mapping.add(CtSlot(9, 4), CtSlot(5, 2));
  mapping.add(CtSlot(10, 4), CtSlot(5, 3));
  mapping.add(CtSlot(10, 3), CtSlot(5, 4));
  mapping.add(CtSlot(9, 5), CtSlot(5, 5));
  mapping.add(CtSlot(11, 5), CtSlot(5, 6));
  mapping.add(CtSlot(8, 7), CtSlot(5, 7));
  mapping.add(CtSlot(9, 6), CtSlot(6, 0));
  mapping.add(CtSlot(4, 4), CtSlot(6, 1));
  mapping.add(CtSlot(0, 3), CtSlot(6, 2));
  mapping.add(CtSlot(8, 2), CtSlot(6, 3));
  mapping.add(CtSlot(1, 0), CtSlot(6, 4));
  mapping.add(CtSlot(11, 1), CtSlot(6, 5));
  mapping.add(CtSlot(3, 4), CtSlot(6, 6));
  mapping.add(CtSlot(10, 2), CtSlot(6, 7));
  mapping.add(CtSlot(6, 4), CtSlot(7, 0));
  mapping.add(CtSlot(0, 0), CtSlot(7, 1));
  mapping.add(CtSlot(1, 6), CtSlot(7, 2));
  mapping.add(CtSlot(10, 6), CtSlot(7, 3));
  mapping.add(CtSlot(5, 4), CtSlot(7, 4));
  mapping.add(CtSlot(0, 5), CtSlot(7, 5));
  mapping.add(CtSlot(1, 5), CtSlot(7, 6));
  mapping.add(CtSlot(5, 3), CtSlot(7, 7));
  mapping.add(CtSlot(10, 7), CtSlot(8, 0));
  mapping.add(CtSlot(9, 7), CtSlot(8, 1));
  mapping.add(CtSlot(6, 2), CtSlot(8, 2));
  mapping.add(CtSlot(4, 0), CtSlot(8, 3));
  mapping.add(CtSlot(10, 1), CtSlot(8, 4));
  mapping.add(CtSlot(13, 2), CtSlot(8, 5));
  mapping.add(CtSlot(4, 1), CtSlot(8, 6));
  mapping.add(CtSlot(6, 0), CtSlot(8, 7));
  mapping.add(CtSlot(11, 6), CtSlot(9, 0));
  mapping.add(CtSlot(7, 0), CtSlot(9, 1));
  mapping.add(CtSlot(5, 5), CtSlot(9, 2));
  mapping.add(CtSlot(7, 1), CtSlot(9, 3));
  mapping.add(CtSlot(11, 3), CtSlot(9, 4));
  mapping.add(CtSlot(6, 1), CtSlot(9, 5));
  mapping.add(CtSlot(0, 5), CtSlot(9, 6));
  mapping.add(CtSlot(9, 1), CtSlot(9, 7));
  mapping.add(CtSlot(9, 3), CtSlot(10, 0));
  mapping.add(CtSlot(1, 4), CtSlot(10, 1));
  mapping.add(CtSlot(4, 7), CtSlot(10, 2));
  mapping.add(CtSlot(8, 1), CtSlot(10, 3));
  mapping.add(CtSlot(3, 4), CtSlot(10, 4));
  mapping.add(CtSlot(11, 3), CtSlot(10, 5));
  mapping.add(CtSlot(0, 3), CtSlot(10, 6));
  mapping.add(CtSlot(1, 5), CtSlot(10, 7));
  mapping.add(CtSlot(12, 4), CtSlot(11, 0));
  mapping.add(CtSlot(1, 7), CtSlot(11, 1));
  mapping.add(CtSlot(3, 0), CtSlot(11, 2));
  mapping.add(CtSlot(11, 2), CtSlot(11, 3));
  mapping.add(CtSlot(0, 7), CtSlot(11, 4));
  mapping.add(CtSlot(4, 7), CtSlot(11, 5));
  mapping.add(CtSlot(6, 6), CtSlot(11, 6));
  mapping.add(CtSlot(5, 2), CtSlot(11, 7));
  mapping.add(CtSlot(8, 6), CtSlot(12, 0));
  mapping.add(CtSlot(7, 3), CtSlot(12, 1));
  mapping.add(CtSlot(5, 3), CtSlot(12, 2));
  mapping.add(CtSlot(3, 7), CtSlot(12, 3));
  mapping.add(CtSlot(13, 5), CtSlot(12, 4));
  mapping.add(CtSlot(11, 7), CtSlot(12, 5));
  mapping.add(CtSlot(7, 6), CtSlot(12, 6));
  mapping.add(CtSlot(13, 6), CtSlot(12, 7));
  mapping.add(CtSlot(4, 5), CtSlot(13, 0));
  mapping.add(CtSlot(1, 0), CtSlot(13, 1));
  mapping.add(CtSlot(11, 7), CtSlot(13, 2));
  mapping.add(CtSlot(10, 3), CtSlot(13, 3));
  mapping.add(CtSlot(9, 6), CtSlot(13, 4));
  mapping.add(CtSlot(12, 1), CtSlot(13, 5));
  mapping.add(CtSlot(2, 7), CtSlot(13, 6));
  mapping.add(CtSlot(13, 0), CtSlot(13, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_35) {
  int64_t numCts = 14;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(10, 7), CtSlot(0, 0));
  mapping.add(CtSlot(7, 3), CtSlot(0, 1));
  mapping.add(CtSlot(5, 6), CtSlot(0, 2));
  mapping.add(CtSlot(6, 2), CtSlot(0, 3));
  mapping.add(CtSlot(13, 4), CtSlot(0, 4));
  mapping.add(CtSlot(6, 6), CtSlot(0, 5));
  mapping.add(CtSlot(4, 5), CtSlot(0, 6));
  mapping.add(CtSlot(2, 6), CtSlot(0, 7));
  mapping.add(CtSlot(8, 5), CtSlot(1, 0));
  mapping.add(CtSlot(7, 2), CtSlot(1, 1));
  mapping.add(CtSlot(1, 5), CtSlot(1, 2));
  mapping.add(CtSlot(11, 3), CtSlot(1, 3));
  mapping.add(CtSlot(4, 6), CtSlot(1, 4));
  mapping.add(CtSlot(8, 6), CtSlot(1, 5));
  mapping.add(CtSlot(8, 0), CtSlot(1, 6));
  mapping.add(CtSlot(10, 2), CtSlot(1, 7));
  mapping.add(CtSlot(6, 3), CtSlot(2, 0));
  mapping.add(CtSlot(9, 1), CtSlot(2, 1));
  mapping.add(CtSlot(1, 3), CtSlot(2, 2));
  mapping.add(CtSlot(11, 3), CtSlot(2, 3));
  mapping.add(CtSlot(0, 7), CtSlot(2, 4));
  mapping.add(CtSlot(7, 3), CtSlot(2, 5));
  mapping.add(CtSlot(6, 5), CtSlot(2, 6));
  mapping.add(CtSlot(13, 0), CtSlot(2, 7));
  mapping.add(CtSlot(12, 2), CtSlot(3, 0));
  mapping.add(CtSlot(12, 1), CtSlot(3, 1));
  mapping.add(CtSlot(5, 2), CtSlot(3, 2));
  mapping.add(CtSlot(7, 2), CtSlot(3, 3));
  mapping.add(CtSlot(9, 0), CtSlot(3, 4));
  mapping.add(CtSlot(9, 7), CtSlot(3, 5));
  mapping.add(CtSlot(12, 5), CtSlot(3, 6));
  mapping.add(CtSlot(8, 0), CtSlot(3, 7));
  mapping.add(CtSlot(11, 7), CtSlot(4, 0));
  mapping.add(CtSlot(6, 6), CtSlot(4, 1));
  mapping.add(CtSlot(11, 2), CtSlot(4, 2));
  mapping.add(CtSlot(3, 6), CtSlot(4, 3));
  mapping.add(CtSlot(2, 4), CtSlot(4, 4));
  mapping.add(CtSlot(12, 0), CtSlot(4, 5));
  mapping.add(CtSlot(2, 3), CtSlot(4, 6));
  mapping.add(CtSlot(5, 1), CtSlot(4, 7));
  mapping.add(CtSlot(9, 3), CtSlot(5, 0));
  mapping.add(CtSlot(10, 5), CtSlot(5, 1));
  mapping.add(CtSlot(9, 4), CtSlot(5, 2));
  mapping.add(CtSlot(10, 4), CtSlot(5, 3));
  mapping.add(CtSlot(10, 3), CtSlot(5, 4));
  mapping.add(CtSlot(9, 5), CtSlot(5, 5));
  mapping.add(CtSlot(11, 5), CtSlot(5, 6));
  mapping.add(CtSlot(8, 7), CtSlot(5, 7));
  mapping.add(CtSlot(9, 6), CtSlot(6, 0));
  mapping.add(CtSlot(4, 4), CtSlot(6, 1));
  mapping.add(CtSlot(0, 3), CtSlot(6, 2));
  mapping.add(CtSlot(8, 2), CtSlot(6, 3));
  mapping.add(CtSlot(1, 0), CtSlot(6, 4));
  mapping.add(CtSlot(11, 1), CtSlot(6, 5));
  mapping.add(CtSlot(3, 4), CtSlot(6, 6));
  mapping.add(CtSlot(10, 2), CtSlot(6, 7));
  mapping.add(CtSlot(6, 4), CtSlot(7, 0));
  mapping.add(CtSlot(0, 0), CtSlot(7, 1));
  mapping.add(CtSlot(1, 6), CtSlot(7, 2));
  mapping.add(CtSlot(10, 6), CtSlot(7, 3));
  mapping.add(CtSlot(5, 4), CtSlot(7, 4));
  mapping.add(CtSlot(0, 5), CtSlot(7, 5));
  mapping.add(CtSlot(1, 5), CtSlot(7, 6));
  mapping.add(CtSlot(5, 3), CtSlot(7, 7));
  mapping.add(CtSlot(10, 7), CtSlot(8, 0));
  mapping.add(CtSlot(9, 7), CtSlot(8, 1));
  mapping.add(CtSlot(6, 2), CtSlot(8, 2));
  mapping.add(CtSlot(4, 0), CtSlot(8, 3));
  mapping.add(CtSlot(10, 1), CtSlot(8, 4));
  mapping.add(CtSlot(13, 2), CtSlot(8, 5));
  mapping.add(CtSlot(4, 1), CtSlot(8, 6));
  mapping.add(CtSlot(6, 0), CtSlot(8, 7));
  mapping.add(CtSlot(11, 6), CtSlot(9, 0));
  mapping.add(CtSlot(7, 0), CtSlot(9, 1));
  mapping.add(CtSlot(5, 5), CtSlot(9, 2));
  mapping.add(CtSlot(7, 1), CtSlot(9, 3));
  mapping.add(CtSlot(11, 3), CtSlot(9, 4));
  mapping.add(CtSlot(6, 1), CtSlot(9, 5));
  mapping.add(CtSlot(0, 5), CtSlot(9, 6));
  mapping.add(CtSlot(9, 1), CtSlot(9, 7));
  mapping.add(CtSlot(9, 3), CtSlot(10, 0));
  mapping.add(CtSlot(1, 4), CtSlot(10, 1));
  mapping.add(CtSlot(4, 7), CtSlot(10, 2));
  mapping.add(CtSlot(8, 1), CtSlot(10, 3));
  mapping.add(CtSlot(3, 4), CtSlot(10, 4));
  mapping.add(CtSlot(11, 3), CtSlot(10, 5));
  mapping.add(CtSlot(0, 3), CtSlot(10, 6));
  mapping.add(CtSlot(1, 5), CtSlot(10, 7));
  mapping.add(CtSlot(12, 4), CtSlot(11, 0));
  mapping.add(CtSlot(1, 7), CtSlot(11, 1));
  mapping.add(CtSlot(3, 0), CtSlot(11, 2));
  mapping.add(CtSlot(11, 2), CtSlot(11, 3));
  mapping.add(CtSlot(0, 7), CtSlot(11, 4));
  mapping.add(CtSlot(4, 7), CtSlot(11, 5));
  mapping.add(CtSlot(6, 6), CtSlot(11, 6));
  mapping.add(CtSlot(5, 2), CtSlot(11, 7));
  mapping.add(CtSlot(8, 6), CtSlot(12, 0));
  mapping.add(CtSlot(7, 3), CtSlot(12, 1));
  mapping.add(CtSlot(5, 3), CtSlot(12, 2));
  mapping.add(CtSlot(3, 7), CtSlot(12, 3));
  mapping.add(CtSlot(13, 5), CtSlot(12, 4));
  mapping.add(CtSlot(11, 7), CtSlot(12, 5));
  mapping.add(CtSlot(7, 6), CtSlot(12, 6));
  mapping.add(CtSlot(13, 6), CtSlot(12, 7));
  mapping.add(CtSlot(4, 5), CtSlot(13, 0));
  mapping.add(CtSlot(1, 0), CtSlot(13, 1));
  mapping.add(CtSlot(11, 7), CtSlot(13, 2));
  mapping.add(CtSlot(10, 3), CtSlot(13, 3));
  mapping.add(CtSlot(9, 6), CtSlot(13, 4));
  mapping.add(CtSlot(12, 1), CtSlot(13, 5));
  mapping.add(CtSlot(2, 7), CtSlot(13, 6));
  mapping.add(CtSlot(13, 0), CtSlot(13, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_36) {
  int64_t numCts = 14;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(10, 7), CtSlot(0, 0));
  mapping.add(CtSlot(7, 3), CtSlot(0, 1));
  mapping.add(CtSlot(5, 6), CtSlot(0, 2));
  mapping.add(CtSlot(6, 2), CtSlot(0, 3));
  mapping.add(CtSlot(13, 4), CtSlot(0, 4));
  mapping.add(CtSlot(6, 6), CtSlot(0, 5));
  mapping.add(CtSlot(4, 5), CtSlot(0, 6));
  mapping.add(CtSlot(2, 6), CtSlot(0, 7));
  mapping.add(CtSlot(8, 5), CtSlot(1, 0));
  mapping.add(CtSlot(7, 2), CtSlot(1, 1));
  mapping.add(CtSlot(1, 5), CtSlot(1, 2));
  mapping.add(CtSlot(11, 3), CtSlot(1, 3));
  mapping.add(CtSlot(4, 6), CtSlot(1, 4));
  mapping.add(CtSlot(8, 6), CtSlot(1, 5));
  mapping.add(CtSlot(8, 0), CtSlot(1, 6));
  mapping.add(CtSlot(10, 2), CtSlot(1, 7));
  mapping.add(CtSlot(6, 3), CtSlot(2, 0));
  mapping.add(CtSlot(9, 1), CtSlot(2, 1));
  mapping.add(CtSlot(1, 3), CtSlot(2, 2));
  mapping.add(CtSlot(11, 3), CtSlot(2, 3));
  mapping.add(CtSlot(0, 7), CtSlot(2, 4));
  mapping.add(CtSlot(7, 3), CtSlot(2, 5));
  mapping.add(CtSlot(6, 5), CtSlot(2, 6));
  mapping.add(CtSlot(13, 0), CtSlot(2, 7));
  mapping.add(CtSlot(12, 2), CtSlot(3, 0));
  mapping.add(CtSlot(12, 1), CtSlot(3, 1));
  mapping.add(CtSlot(5, 2), CtSlot(3, 2));
  mapping.add(CtSlot(7, 2), CtSlot(3, 3));
  mapping.add(CtSlot(9, 0), CtSlot(3, 4));
  mapping.add(CtSlot(9, 7), CtSlot(3, 5));
  mapping.add(CtSlot(12, 5), CtSlot(3, 6));
  mapping.add(CtSlot(8, 0), CtSlot(3, 7));
  mapping.add(CtSlot(11, 7), CtSlot(4, 0));
  mapping.add(CtSlot(6, 6), CtSlot(4, 1));
  mapping.add(CtSlot(11, 2), CtSlot(4, 2));
  mapping.add(CtSlot(3, 6), CtSlot(4, 3));
  mapping.add(CtSlot(2, 4), CtSlot(4, 4));
  mapping.add(CtSlot(12, 0), CtSlot(4, 5));
  mapping.add(CtSlot(2, 3), CtSlot(4, 6));
  mapping.add(CtSlot(5, 1), CtSlot(4, 7));
  mapping.add(CtSlot(9, 3), CtSlot(5, 0));
  mapping.add(CtSlot(10, 5), CtSlot(5, 1));
  mapping.add(CtSlot(9, 4), CtSlot(5, 2));
  mapping.add(CtSlot(10, 4), CtSlot(5, 3));
  mapping.add(CtSlot(10, 3), CtSlot(5, 4));
  mapping.add(CtSlot(9, 5), CtSlot(5, 5));
  mapping.add(CtSlot(11, 5), CtSlot(5, 6));
  mapping.add(CtSlot(8, 7), CtSlot(5, 7));
  mapping.add(CtSlot(9, 2), CtSlot(6, 0));
  mapping.add(CtSlot(4, 4), CtSlot(6, 1));
  mapping.add(CtSlot(0, 3), CtSlot(6, 2));
  mapping.add(CtSlot(8, 2), CtSlot(6, 3));
  mapping.add(CtSlot(1, 0), CtSlot(6, 4));
  mapping.add(CtSlot(11, 1), CtSlot(6, 5));
  mapping.add(CtSlot(3, 4), CtSlot(6, 6));
  mapping.add(CtSlot(10, 2), CtSlot(6, 7));
  mapping.add(CtSlot(6, 4), CtSlot(7, 0));
  mapping.add(CtSlot(0, 0), CtSlot(7, 1));
  mapping.add(CtSlot(1, 6), CtSlot(7, 2));
  mapping.add(CtSlot(10, 6), CtSlot(7, 3));
  mapping.add(CtSlot(5, 4), CtSlot(7, 4));
  mapping.add(CtSlot(0, 5), CtSlot(7, 5));
  mapping.add(CtSlot(1, 5), CtSlot(7, 6));
  mapping.add(CtSlot(5, 3), CtSlot(7, 7));
  mapping.add(CtSlot(10, 7), CtSlot(8, 0));
  mapping.add(CtSlot(9, 7), CtSlot(8, 1));
  mapping.add(CtSlot(6, 2), CtSlot(8, 2));
  mapping.add(CtSlot(4, 0), CtSlot(8, 3));
  mapping.add(CtSlot(10, 1), CtSlot(8, 4));
  mapping.add(CtSlot(13, 2), CtSlot(8, 5));
  mapping.add(CtSlot(4, 1), CtSlot(8, 6));
  mapping.add(CtSlot(6, 0), CtSlot(8, 7));
  mapping.add(CtSlot(11, 6), CtSlot(9, 0));
  mapping.add(CtSlot(7, 0), CtSlot(9, 1));
  mapping.add(CtSlot(5, 5), CtSlot(9, 2));
  mapping.add(CtSlot(7, 1), CtSlot(9, 3));
  mapping.add(CtSlot(11, 3), CtSlot(9, 4));
  mapping.add(CtSlot(6, 1), CtSlot(9, 5));
  mapping.add(CtSlot(0, 5), CtSlot(9, 6));
  mapping.add(CtSlot(9, 1), CtSlot(9, 7));
  mapping.add(CtSlot(9, 3), CtSlot(10, 0));
  mapping.add(CtSlot(1, 4), CtSlot(10, 1));
  mapping.add(CtSlot(4, 7), CtSlot(10, 2));
  mapping.add(CtSlot(8, 1), CtSlot(10, 3));
  mapping.add(CtSlot(3, 4), CtSlot(10, 4));
  mapping.add(CtSlot(11, 3), CtSlot(10, 5));
  mapping.add(CtSlot(0, 3), CtSlot(10, 6));
  mapping.add(CtSlot(1, 5), CtSlot(10, 7));
  mapping.add(CtSlot(12, 4), CtSlot(11, 0));
  mapping.add(CtSlot(1, 7), CtSlot(11, 1));
  mapping.add(CtSlot(3, 0), CtSlot(11, 2));
  mapping.add(CtSlot(11, 2), CtSlot(11, 3));
  mapping.add(CtSlot(0, 7), CtSlot(11, 4));
  mapping.add(CtSlot(4, 7), CtSlot(11, 5));
  mapping.add(CtSlot(6, 6), CtSlot(11, 6));
  mapping.add(CtSlot(5, 2), CtSlot(11, 7));
  mapping.add(CtSlot(8, 6), CtSlot(12, 0));
  mapping.add(CtSlot(7, 3), CtSlot(12, 1));
  mapping.add(CtSlot(5, 3), CtSlot(12, 2));
  mapping.add(CtSlot(3, 7), CtSlot(12, 3));
  mapping.add(CtSlot(13, 5), CtSlot(12, 4));
  mapping.add(CtSlot(11, 7), CtSlot(12, 5));
  mapping.add(CtSlot(7, 6), CtSlot(12, 6));
  mapping.add(CtSlot(13, 6), CtSlot(12, 7));
  mapping.add(CtSlot(4, 5), CtSlot(13, 0));
  mapping.add(CtSlot(1, 0), CtSlot(13, 1));
  mapping.add(CtSlot(11, 7), CtSlot(13, 2));
  mapping.add(CtSlot(10, 3), CtSlot(13, 3));
  mapping.add(CtSlot(9, 6), CtSlot(13, 4));
  mapping.add(CtSlot(12, 1), CtSlot(13, 5));
  mapping.add(CtSlot(2, 7), CtSlot(13, 6));
  mapping.add(CtSlot(13, 0), CtSlot(13, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_37) {
  int64_t numCts = 14;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(10, 7), CtSlot(0, 0));
  mapping.add(CtSlot(7, 3), CtSlot(0, 1));
  mapping.add(CtSlot(5, 6), CtSlot(0, 2));
  mapping.add(CtSlot(6, 2), CtSlot(0, 3));
  mapping.add(CtSlot(13, 4), CtSlot(0, 4));
  mapping.add(CtSlot(6, 6), CtSlot(0, 5));
  mapping.add(CtSlot(3, 5), CtSlot(0, 6));
  mapping.add(CtSlot(2, 6), CtSlot(0, 7));
  mapping.add(CtSlot(8, 5), CtSlot(1, 0));
  mapping.add(CtSlot(7, 2), CtSlot(1, 1));
  mapping.add(CtSlot(1, 5), CtSlot(1, 2));
  mapping.add(CtSlot(11, 3), CtSlot(1, 3));
  mapping.add(CtSlot(4, 6), CtSlot(1, 4));
  mapping.add(CtSlot(8, 6), CtSlot(1, 5));
  mapping.add(CtSlot(8, 0), CtSlot(1, 6));
  mapping.add(CtSlot(10, 2), CtSlot(1, 7));
  mapping.add(CtSlot(6, 3), CtSlot(2, 0));
  mapping.add(CtSlot(9, 1), CtSlot(2, 1));
  mapping.add(CtSlot(1, 3), CtSlot(2, 2));
  mapping.add(CtSlot(11, 3), CtSlot(2, 3));
  mapping.add(CtSlot(0, 7), CtSlot(2, 4));
  mapping.add(CtSlot(7, 3), CtSlot(2, 5));
  mapping.add(CtSlot(6, 5), CtSlot(2, 6));
  mapping.add(CtSlot(13, 0), CtSlot(2, 7));
  mapping.add(CtSlot(12, 2), CtSlot(3, 0));
  mapping.add(CtSlot(12, 1), CtSlot(3, 1));
  mapping.add(CtSlot(5, 2), CtSlot(3, 2));
  mapping.add(CtSlot(7, 2), CtSlot(3, 3));
  mapping.add(CtSlot(9, 0), CtSlot(3, 4));
  mapping.add(CtSlot(9, 7), CtSlot(3, 5));
  mapping.add(CtSlot(12, 5), CtSlot(3, 6));
  mapping.add(CtSlot(8, 0), CtSlot(3, 7));
  mapping.add(CtSlot(11, 7), CtSlot(4, 0));
  mapping.add(CtSlot(6, 6), CtSlot(4, 1));
  mapping.add(CtSlot(11, 2), CtSlot(4, 2));
  mapping.add(CtSlot(3, 6), CtSlot(4, 3));
  mapping.add(CtSlot(2, 4), CtSlot(4, 4));
  mapping.add(CtSlot(12, 0), CtSlot(4, 5));
  mapping.add(CtSlot(2, 3), CtSlot(4, 6));
  mapping.add(CtSlot(5, 1), CtSlot(4, 7));
  mapping.add(CtSlot(9, 3), CtSlot(5, 0));
  mapping.add(CtSlot(10, 5), CtSlot(5, 1));
  mapping.add(CtSlot(9, 4), CtSlot(5, 2));
  mapping.add(CtSlot(10, 4), CtSlot(5, 3));
  mapping.add(CtSlot(10, 3), CtSlot(5, 4));
  mapping.add(CtSlot(9, 5), CtSlot(5, 5));
  mapping.add(CtSlot(11, 5), CtSlot(5, 6));
  mapping.add(CtSlot(8, 7), CtSlot(5, 7));
  mapping.add(CtSlot(9, 2), CtSlot(6, 0));
  mapping.add(CtSlot(4, 4), CtSlot(6, 1));
  mapping.add(CtSlot(0, 3), CtSlot(6, 2));
  mapping.add(CtSlot(8, 2), CtSlot(6, 3));
  mapping.add(CtSlot(1, 0), CtSlot(6, 4));
  mapping.add(CtSlot(11, 1), CtSlot(6, 5));
  mapping.add(CtSlot(3, 4), CtSlot(6, 6));
  mapping.add(CtSlot(10, 2), CtSlot(6, 7));
  mapping.add(CtSlot(6, 4), CtSlot(7, 0));
  mapping.add(CtSlot(0, 0), CtSlot(7, 1));
  mapping.add(CtSlot(1, 6), CtSlot(7, 2));
  mapping.add(CtSlot(10, 6), CtSlot(7, 3));
  mapping.add(CtSlot(5, 4), CtSlot(7, 4));
  mapping.add(CtSlot(0, 5), CtSlot(7, 5));
  mapping.add(CtSlot(1, 5), CtSlot(7, 6));
  mapping.add(CtSlot(5, 3), CtSlot(7, 7));
  mapping.add(CtSlot(10, 7), CtSlot(8, 0));
  mapping.add(CtSlot(9, 7), CtSlot(8, 1));
  mapping.add(CtSlot(6, 2), CtSlot(8, 2));
  mapping.add(CtSlot(4, 0), CtSlot(8, 3));
  mapping.add(CtSlot(10, 1), CtSlot(8, 4));
  mapping.add(CtSlot(13, 2), CtSlot(8, 5));
  mapping.add(CtSlot(4, 1), CtSlot(8, 6));
  mapping.add(CtSlot(6, 0), CtSlot(8, 7));
  mapping.add(CtSlot(11, 6), CtSlot(9, 0));
  mapping.add(CtSlot(7, 0), CtSlot(9, 1));
  mapping.add(CtSlot(5, 5), CtSlot(9, 2));
  mapping.add(CtSlot(7, 1), CtSlot(9, 3));
  mapping.add(CtSlot(11, 3), CtSlot(9, 4));
  mapping.add(CtSlot(6, 1), CtSlot(9, 5));
  mapping.add(CtSlot(0, 5), CtSlot(9, 6));
  mapping.add(CtSlot(9, 1), CtSlot(9, 7));
  mapping.add(CtSlot(9, 3), CtSlot(10, 0));
  mapping.add(CtSlot(1, 4), CtSlot(10, 1));
  mapping.add(CtSlot(4, 7), CtSlot(10, 2));
  mapping.add(CtSlot(8, 1), CtSlot(10, 3));
  mapping.add(CtSlot(3, 4), CtSlot(10, 4));
  mapping.add(CtSlot(11, 3), CtSlot(10, 5));
  mapping.add(CtSlot(0, 3), CtSlot(10, 6));
  mapping.add(CtSlot(1, 5), CtSlot(10, 7));
  mapping.add(CtSlot(12, 4), CtSlot(11, 0));
  mapping.add(CtSlot(1, 7), CtSlot(11, 1));
  mapping.add(CtSlot(3, 0), CtSlot(11, 2));
  mapping.add(CtSlot(11, 2), CtSlot(11, 3));
  mapping.add(CtSlot(0, 7), CtSlot(11, 4));
  mapping.add(CtSlot(4, 7), CtSlot(11, 5));
  mapping.add(CtSlot(6, 6), CtSlot(11, 6));
  mapping.add(CtSlot(5, 2), CtSlot(11, 7));
  mapping.add(CtSlot(8, 6), CtSlot(12, 0));
  mapping.add(CtSlot(7, 3), CtSlot(12, 1));
  mapping.add(CtSlot(5, 3), CtSlot(12, 2));
  mapping.add(CtSlot(3, 7), CtSlot(12, 3));
  mapping.add(CtSlot(13, 5), CtSlot(12, 4));
  mapping.add(CtSlot(11, 7), CtSlot(12, 5));
  mapping.add(CtSlot(7, 6), CtSlot(12, 6));
  mapping.add(CtSlot(13, 6), CtSlot(12, 7));
  mapping.add(CtSlot(4, 5), CtSlot(13, 0));
  mapping.add(CtSlot(1, 0), CtSlot(13, 1));
  mapping.add(CtSlot(11, 7), CtSlot(13, 2));
  mapping.add(CtSlot(10, 3), CtSlot(13, 3));
  mapping.add(CtSlot(9, 6), CtSlot(13, 4));
  mapping.add(CtSlot(12, 1), CtSlot(13, 5));
  mapping.add(CtSlot(2, 7), CtSlot(13, 6));
  mapping.add(CtSlot(13, 0), CtSlot(13, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_38) {
  int64_t numCts = 14;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(10, 7), CtSlot(0, 0));
  mapping.add(CtSlot(7, 3), CtSlot(0, 1));
  mapping.add(CtSlot(5, 6), CtSlot(0, 2));
  mapping.add(CtSlot(6, 2), CtSlot(0, 3));
  mapping.add(CtSlot(13, 4), CtSlot(0, 4));
  mapping.add(CtSlot(6, 6), CtSlot(0, 5));
  mapping.add(CtSlot(3, 5), CtSlot(0, 6));
  mapping.add(CtSlot(2, 6), CtSlot(0, 7));
  mapping.add(CtSlot(8, 5), CtSlot(1, 0));
  mapping.add(CtSlot(7, 2), CtSlot(1, 1));
  mapping.add(CtSlot(1, 5), CtSlot(1, 2));
  mapping.add(CtSlot(11, 3), CtSlot(1, 3));
  mapping.add(CtSlot(4, 6), CtSlot(1, 4));
  mapping.add(CtSlot(8, 6), CtSlot(1, 5));
  mapping.add(CtSlot(8, 0), CtSlot(1, 6));
  mapping.add(CtSlot(10, 2), CtSlot(1, 7));
  mapping.add(CtSlot(6, 3), CtSlot(2, 0));
  mapping.add(CtSlot(9, 1), CtSlot(2, 1));
  mapping.add(CtSlot(1, 3), CtSlot(2, 2));
  mapping.add(CtSlot(11, 3), CtSlot(2, 3));
  mapping.add(CtSlot(0, 7), CtSlot(2, 4));
  mapping.add(CtSlot(7, 3), CtSlot(2, 5));
  mapping.add(CtSlot(6, 5), CtSlot(2, 6));
  mapping.add(CtSlot(13, 0), CtSlot(2, 7));
  mapping.add(CtSlot(12, 2), CtSlot(3, 0));
  mapping.add(CtSlot(12, 1), CtSlot(3, 1));
  mapping.add(CtSlot(5, 2), CtSlot(3, 2));
  mapping.add(CtSlot(7, 2), CtSlot(3, 3));
  mapping.add(CtSlot(9, 0), CtSlot(3, 4));
  mapping.add(CtSlot(9, 7), CtSlot(3, 5));
  mapping.add(CtSlot(12, 5), CtSlot(3, 6));
  mapping.add(CtSlot(8, 0), CtSlot(3, 7));
  mapping.add(CtSlot(11, 7), CtSlot(4, 0));
  mapping.add(CtSlot(6, 6), CtSlot(4, 1));
  mapping.add(CtSlot(11, 2), CtSlot(4, 2));
  mapping.add(CtSlot(3, 6), CtSlot(4, 3));
  mapping.add(CtSlot(2, 4), CtSlot(4, 4));
  mapping.add(CtSlot(12, 0), CtSlot(4, 5));
  mapping.add(CtSlot(2, 3), CtSlot(4, 6));
  mapping.add(CtSlot(5, 1), CtSlot(4, 7));
  mapping.add(CtSlot(9, 3), CtSlot(5, 0));
  mapping.add(CtSlot(10, 5), CtSlot(5, 1));
  mapping.add(CtSlot(9, 4), CtSlot(5, 2));
  mapping.add(CtSlot(10, 4), CtSlot(5, 3));
  mapping.add(CtSlot(10, 3), CtSlot(5, 4));
  mapping.add(CtSlot(9, 5), CtSlot(5, 5));
  mapping.add(CtSlot(11, 5), CtSlot(5, 6));
  mapping.add(CtSlot(8, 7), CtSlot(5, 7));
  mapping.add(CtSlot(9, 2), CtSlot(6, 0));
  mapping.add(CtSlot(4, 4), CtSlot(6, 1));
  mapping.add(CtSlot(0, 3), CtSlot(6, 2));
  mapping.add(CtSlot(8, 2), CtSlot(6, 3));
  mapping.add(CtSlot(1, 0), CtSlot(6, 4));
  mapping.add(CtSlot(11, 1), CtSlot(6, 5));
  mapping.add(CtSlot(3, 4), CtSlot(6, 6));
  mapping.add(CtSlot(10, 2), CtSlot(6, 7));
  mapping.add(CtSlot(6, 4), CtSlot(7, 0));
  mapping.add(CtSlot(0, 0), CtSlot(7, 1));
  mapping.add(CtSlot(1, 6), CtSlot(7, 2));
  mapping.add(CtSlot(10, 6), CtSlot(7, 3));
  mapping.add(CtSlot(5, 4), CtSlot(7, 4));
  mapping.add(CtSlot(0, 5), CtSlot(7, 5));
  mapping.add(CtSlot(1, 5), CtSlot(7, 6));
  mapping.add(CtSlot(5, 3), CtSlot(7, 7));
  mapping.add(CtSlot(10, 7), CtSlot(8, 0));
  mapping.add(CtSlot(9, 7), CtSlot(8, 1));
  mapping.add(CtSlot(6, 2), CtSlot(8, 2));
  mapping.add(CtSlot(4, 0), CtSlot(8, 3));
  mapping.add(CtSlot(10, 1), CtSlot(8, 4));
  mapping.add(CtSlot(13, 2), CtSlot(8, 5));
  mapping.add(CtSlot(4, 1), CtSlot(8, 6));
  mapping.add(CtSlot(6, 0), CtSlot(8, 7));
  mapping.add(CtSlot(11, 6), CtSlot(9, 0));
  mapping.add(CtSlot(7, 0), CtSlot(9, 1));
  mapping.add(CtSlot(5, 5), CtSlot(9, 2));
  mapping.add(CtSlot(7, 1), CtSlot(9, 3));
  mapping.add(CtSlot(11, 3), CtSlot(9, 4));
  mapping.add(CtSlot(6, 1), CtSlot(9, 5));
  mapping.add(CtSlot(0, 5), CtSlot(9, 6));
  mapping.add(CtSlot(9, 1), CtSlot(9, 7));
  mapping.add(CtSlot(9, 3), CtSlot(10, 0));
  mapping.add(CtSlot(1, 4), CtSlot(10, 1));
  mapping.add(CtSlot(4, 7), CtSlot(10, 2));
  mapping.add(CtSlot(8, 1), CtSlot(10, 3));
  mapping.add(CtSlot(3, 4), CtSlot(10, 4));
  mapping.add(CtSlot(11, 3), CtSlot(10, 5));
  mapping.add(CtSlot(0, 3), CtSlot(10, 6));
  mapping.add(CtSlot(1, 5), CtSlot(10, 7));
  mapping.add(CtSlot(12, 4), CtSlot(11, 0));
  mapping.add(CtSlot(1, 7), CtSlot(11, 1));
  mapping.add(CtSlot(4, 0), CtSlot(11, 2));
  mapping.add(CtSlot(11, 2), CtSlot(11, 3));
  mapping.add(CtSlot(0, 7), CtSlot(11, 4));
  mapping.add(CtSlot(4, 7), CtSlot(11, 5));
  mapping.add(CtSlot(6, 6), CtSlot(11, 6));
  mapping.add(CtSlot(5, 2), CtSlot(11, 7));
  mapping.add(CtSlot(8, 6), CtSlot(12, 0));
  mapping.add(CtSlot(7, 3), CtSlot(12, 1));
  mapping.add(CtSlot(5, 3), CtSlot(12, 2));
  mapping.add(CtSlot(3, 7), CtSlot(12, 3));
  mapping.add(CtSlot(13, 5), CtSlot(12, 4));
  mapping.add(CtSlot(11, 7), CtSlot(12, 5));
  mapping.add(CtSlot(7, 6), CtSlot(12, 6));
  mapping.add(CtSlot(13, 6), CtSlot(12, 7));
  mapping.add(CtSlot(4, 5), CtSlot(13, 0));
  mapping.add(CtSlot(1, 0), CtSlot(13, 1));
  mapping.add(CtSlot(11, 7), CtSlot(13, 2));
  mapping.add(CtSlot(10, 3), CtSlot(13, 3));
  mapping.add(CtSlot(9, 6), CtSlot(13, 4));
  mapping.add(CtSlot(12, 1), CtSlot(13, 5));
  mapping.add(CtSlot(2, 7), CtSlot(13, 6));
  mapping.add(CtSlot(13, 0), CtSlot(13, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_39) {
  int64_t numCts = 14;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(10, 7), CtSlot(0, 0));
  mapping.add(CtSlot(7, 3), CtSlot(0, 1));
  mapping.add(CtSlot(5, 6), CtSlot(0, 2));
  mapping.add(CtSlot(6, 2), CtSlot(0, 3));
  mapping.add(CtSlot(13, 4), CtSlot(0, 4));
  mapping.add(CtSlot(6, 6), CtSlot(0, 5));
  mapping.add(CtSlot(3, 5), CtSlot(0, 6));
  mapping.add(CtSlot(2, 6), CtSlot(0, 7));
  mapping.add(CtSlot(8, 5), CtSlot(1, 0));
  mapping.add(CtSlot(7, 2), CtSlot(1, 1));
  mapping.add(CtSlot(1, 5), CtSlot(1, 2));
  mapping.add(CtSlot(11, 3), CtSlot(1, 3));
  mapping.add(CtSlot(4, 6), CtSlot(1, 4));
  mapping.add(CtSlot(8, 6), CtSlot(1, 5));
  mapping.add(CtSlot(8, 0), CtSlot(1, 6));
  mapping.add(CtSlot(10, 2), CtSlot(1, 7));
  mapping.add(CtSlot(6, 3), CtSlot(2, 0));
  mapping.add(CtSlot(9, 1), CtSlot(2, 1));
  mapping.add(CtSlot(1, 3), CtSlot(2, 2));
  mapping.add(CtSlot(11, 3), CtSlot(2, 3));
  mapping.add(CtSlot(0, 7), CtSlot(2, 4));
  mapping.add(CtSlot(7, 3), CtSlot(2, 5));
  mapping.add(CtSlot(6, 5), CtSlot(2, 6));
  mapping.add(CtSlot(13, 0), CtSlot(2, 7));
  mapping.add(CtSlot(12, 2), CtSlot(3, 0));
  mapping.add(CtSlot(12, 1), CtSlot(3, 1));
  mapping.add(CtSlot(5, 2), CtSlot(3, 2));
  mapping.add(CtSlot(7, 2), CtSlot(3, 3));
  mapping.add(CtSlot(9, 0), CtSlot(3, 4));
  mapping.add(CtSlot(9, 7), CtSlot(3, 5));
  mapping.add(CtSlot(12, 5), CtSlot(3, 6));
  mapping.add(CtSlot(8, 0), CtSlot(3, 7));
  mapping.add(CtSlot(11, 7), CtSlot(4, 0));
  mapping.add(CtSlot(6, 6), CtSlot(4, 1));
  mapping.add(CtSlot(11, 2), CtSlot(4, 2));
  mapping.add(CtSlot(3, 6), CtSlot(4, 3));
  mapping.add(CtSlot(2, 4), CtSlot(4, 4));
  mapping.add(CtSlot(12, 0), CtSlot(4, 5));
  mapping.add(CtSlot(2, 3), CtSlot(4, 6));
  mapping.add(CtSlot(5, 1), CtSlot(4, 7));
  mapping.add(CtSlot(9, 3), CtSlot(5, 0));
  mapping.add(CtSlot(10, 5), CtSlot(5, 1));
  mapping.add(CtSlot(9, 4), CtSlot(5, 2));
  mapping.add(CtSlot(10, 4), CtSlot(5, 3));
  mapping.add(CtSlot(10, 3), CtSlot(5, 4));
  mapping.add(CtSlot(9, 5), CtSlot(5, 5));
  mapping.add(CtSlot(11, 5), CtSlot(5, 6));
  mapping.add(CtSlot(8, 7), CtSlot(5, 7));
  mapping.add(CtSlot(9, 2), CtSlot(6, 0));
  mapping.add(CtSlot(4, 4), CtSlot(6, 1));
  mapping.add(CtSlot(0, 3), CtSlot(6, 2));
  mapping.add(CtSlot(8, 2), CtSlot(6, 3));
  mapping.add(CtSlot(1, 0), CtSlot(6, 4));
  mapping.add(CtSlot(11, 1), CtSlot(6, 5));
  mapping.add(CtSlot(3, 4), CtSlot(6, 6));
  mapping.add(CtSlot(10, 2), CtSlot(6, 7));
  mapping.add(CtSlot(6, 4), CtSlot(7, 0));
  mapping.add(CtSlot(0, 0), CtSlot(7, 1));
  mapping.add(CtSlot(1, 6), CtSlot(7, 2));
  mapping.add(CtSlot(10, 6), CtSlot(7, 3));
  mapping.add(CtSlot(5, 4), CtSlot(7, 4));
  mapping.add(CtSlot(0, 5), CtSlot(7, 5));
  mapping.add(CtSlot(1, 5), CtSlot(7, 6));
  mapping.add(CtSlot(5, 3), CtSlot(7, 7));
  mapping.add(CtSlot(10, 7), CtSlot(8, 0));
  mapping.add(CtSlot(9, 7), CtSlot(8, 1));
  mapping.add(CtSlot(6, 2), CtSlot(8, 2));
  mapping.add(CtSlot(4, 0), CtSlot(8, 3));
  mapping.add(CtSlot(10, 1), CtSlot(8, 4));
  mapping.add(CtSlot(13, 2), CtSlot(8, 5));
  mapping.add(CtSlot(4, 1), CtSlot(8, 6));
  mapping.add(CtSlot(6, 0), CtSlot(8, 7));
  mapping.add(CtSlot(11, 6), CtSlot(9, 0));
  mapping.add(CtSlot(7, 0), CtSlot(9, 1));
  mapping.add(CtSlot(5, 5), CtSlot(9, 2));
  mapping.add(CtSlot(7, 1), CtSlot(9, 3));
  mapping.add(CtSlot(11, 3), CtSlot(9, 4));
  mapping.add(CtSlot(6, 1), CtSlot(9, 5));
  mapping.add(CtSlot(0, 5), CtSlot(9, 6));
  mapping.add(CtSlot(9, 1), CtSlot(9, 7));
  mapping.add(CtSlot(9, 3), CtSlot(10, 0));
  mapping.add(CtSlot(1, 4), CtSlot(10, 1));
  mapping.add(CtSlot(4, 7), CtSlot(10, 2));
  mapping.add(CtSlot(8, 1), CtSlot(10, 3));
  mapping.add(CtSlot(3, 4), CtSlot(10, 4));
  mapping.add(CtSlot(11, 3), CtSlot(10, 5));
  mapping.add(CtSlot(0, 3), CtSlot(10, 6));
  mapping.add(CtSlot(1, 5), CtSlot(10, 7));
  mapping.add(CtSlot(12, 4), CtSlot(11, 0));
  mapping.add(CtSlot(1, 7), CtSlot(11, 1));
  mapping.add(CtSlot(4, 0), CtSlot(11, 2));
  mapping.add(CtSlot(11, 2), CtSlot(11, 3));
  mapping.add(CtSlot(0, 7), CtSlot(11, 4));
  mapping.add(CtSlot(4, 7), CtSlot(11, 5));
  mapping.add(CtSlot(6, 6), CtSlot(11, 6));
  mapping.add(CtSlot(5, 2), CtSlot(11, 7));
  mapping.add(CtSlot(8, 6), CtSlot(12, 0));
  mapping.add(CtSlot(7, 3), CtSlot(12, 1));
  mapping.add(CtSlot(5, 3), CtSlot(12, 2));
  mapping.add(CtSlot(5, 7), CtSlot(12, 3));
  mapping.add(CtSlot(13, 5), CtSlot(12, 4));
  mapping.add(CtSlot(11, 7), CtSlot(12, 5));
  mapping.add(CtSlot(7, 6), CtSlot(12, 6));
  mapping.add(CtSlot(13, 6), CtSlot(12, 7));
  mapping.add(CtSlot(4, 5), CtSlot(13, 0));
  mapping.add(CtSlot(1, 0), CtSlot(13, 1));
  mapping.add(CtSlot(11, 7), CtSlot(13, 2));
  mapping.add(CtSlot(10, 3), CtSlot(13, 3));
  mapping.add(CtSlot(9, 6), CtSlot(13, 4));
  mapping.add(CtSlot(12, 1), CtSlot(13, 5));
  mapping.add(CtSlot(2, 7), CtSlot(13, 6));
  mapping.add(CtSlot(13, 0), CtSlot(13, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_40) {
  int64_t numCts = 30;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(22, 6), CtSlot(0, 0));
  mapping.add(CtSlot(26, 7), CtSlot(0, 1));
  mapping.add(CtSlot(21, 5), CtSlot(0, 2));
  mapping.add(CtSlot(7, 1), CtSlot(0, 3));
  mapping.add(CtSlot(24, 0), CtSlot(0, 4));
  mapping.add(CtSlot(13, 3), CtSlot(0, 5));
  mapping.add(CtSlot(10, 3), CtSlot(0, 6));
  mapping.add(CtSlot(18, 5), CtSlot(0, 7));
  mapping.add(CtSlot(24, 1), CtSlot(1, 0));
  mapping.add(CtSlot(1, 1), CtSlot(1, 1));
  mapping.add(CtSlot(26, 5), CtSlot(1, 2));
  mapping.add(CtSlot(29, 0), CtSlot(1, 3));
  mapping.add(CtSlot(26, 0), CtSlot(1, 4));
  mapping.add(CtSlot(5, 4), CtSlot(1, 5));
  mapping.add(CtSlot(27, 1), CtSlot(1, 6));
  mapping.add(CtSlot(22, 7), CtSlot(1, 7));
  mapping.add(CtSlot(7, 2), CtSlot(2, 0));
  mapping.add(CtSlot(29, 2), CtSlot(2, 1));
  mapping.add(CtSlot(28, 1), CtSlot(2, 2));
  mapping.add(CtSlot(22, 1), CtSlot(2, 3));
  mapping.add(CtSlot(8, 0), CtSlot(2, 4));
  mapping.add(CtSlot(16, 3), CtSlot(2, 5));
  mapping.add(CtSlot(10, 7), CtSlot(2, 6));
  mapping.add(CtSlot(6, 5), CtSlot(2, 7));
  mapping.add(CtSlot(1, 5), CtSlot(3, 0));
  mapping.add(CtSlot(26, 0), CtSlot(3, 1));
  mapping.add(CtSlot(22, 4), CtSlot(3, 2));
  mapping.add(CtSlot(23, 2), CtSlot(3, 3));
  mapping.add(CtSlot(16, 7), CtSlot(3, 4));
  mapping.add(CtSlot(0, 0), CtSlot(3, 5));
  mapping.add(CtSlot(16, 2), CtSlot(3, 6));
  mapping.add(CtSlot(20, 2), CtSlot(3, 7));
  mapping.add(CtSlot(21, 1), CtSlot(4, 0));
  mapping.add(CtSlot(12, 3), CtSlot(4, 1));
  mapping.add(CtSlot(4, 4), CtSlot(4, 2));
  mapping.add(CtSlot(29, 7), CtSlot(4, 3));
  mapping.add(CtSlot(9, 5), CtSlot(4, 4));
  mapping.add(CtSlot(5, 2), CtSlot(4, 5));
  mapping.add(CtSlot(25, 0), CtSlot(4, 6));
  mapping.add(CtSlot(4, 2), CtSlot(4, 7));
  mapping.add(CtSlot(12, 3), CtSlot(5, 0));
  mapping.add(CtSlot(26, 2), CtSlot(5, 1));
  mapping.add(CtSlot(29, 0), CtSlot(5, 2));
  mapping.add(CtSlot(4, 5), CtSlot(5, 3));
  mapping.add(CtSlot(5, 6), CtSlot(5, 4));
  mapping.add(CtSlot(20, 5), CtSlot(5, 5));
  mapping.add(CtSlot(2, 7), CtSlot(5, 6));
  mapping.add(CtSlot(9, 0), CtSlot(5, 7));
  mapping.add(CtSlot(2, 2), CtSlot(6, 0));
  mapping.add(CtSlot(7, 1), CtSlot(6, 1));
  mapping.add(CtSlot(13, 3), CtSlot(6, 2));
  mapping.add(CtSlot(8, 1), CtSlot(6, 3));
  mapping.add(CtSlot(29, 2), CtSlot(6, 4));
  mapping.add(CtSlot(26, 5), CtSlot(6, 5));
  mapping.add(CtSlot(4, 1), CtSlot(6, 6));
  mapping.add(CtSlot(26, 3), CtSlot(6, 7));
  mapping.add(CtSlot(22, 3), CtSlot(7, 0));
  mapping.add(CtSlot(12, 1), CtSlot(7, 1));
  mapping.add(CtSlot(22, 2), CtSlot(7, 2));
  mapping.add(CtSlot(10, 5), CtSlot(7, 3));
  mapping.add(CtSlot(1, 1), CtSlot(7, 4));
  mapping.add(CtSlot(20, 1), CtSlot(7, 5));
  mapping.add(CtSlot(11, 5), CtSlot(7, 6));
  mapping.add(CtSlot(20, 3), CtSlot(7, 7));
  mapping.add(CtSlot(10, 1), CtSlot(8, 0));
  mapping.add(CtSlot(21, 0), CtSlot(8, 1));
  mapping.add(CtSlot(22, 3), CtSlot(8, 2));
  mapping.add(CtSlot(1, 5), CtSlot(8, 3));
  mapping.add(CtSlot(23, 5), CtSlot(8, 4));
  mapping.add(CtSlot(1, 1), CtSlot(8, 5));
  mapping.add(CtSlot(3, 4), CtSlot(8, 6));
  mapping.add(CtSlot(26, 1), CtSlot(8, 7));
  mapping.add(CtSlot(3, 7), CtSlot(9, 0));
  mapping.add(CtSlot(28, 2), CtSlot(9, 1));
  mapping.add(CtSlot(12, 1), CtSlot(9, 2));
  mapping.add(CtSlot(4, 0), CtSlot(9, 3));
  mapping.add(CtSlot(10, 0), CtSlot(9, 4));
  mapping.add(CtSlot(19, 0), CtSlot(9, 5));
  mapping.add(CtSlot(8, 5), CtSlot(9, 6));
  mapping.add(CtSlot(9, 5), CtSlot(9, 7));
  mapping.add(CtSlot(8, 3), CtSlot(10, 0));
  mapping.add(CtSlot(14, 5), CtSlot(10, 1));
  mapping.add(CtSlot(1, 4), CtSlot(10, 2));
  mapping.add(CtSlot(23, 5), CtSlot(10, 3));
  mapping.add(CtSlot(12, 2), CtSlot(10, 4));
  mapping.add(CtSlot(24, 3), CtSlot(10, 5));
  mapping.add(CtSlot(22, 6), CtSlot(10, 6));
  mapping.add(CtSlot(4, 4), CtSlot(10, 7));
  mapping.add(CtSlot(26, 2), CtSlot(11, 0));
  mapping.add(CtSlot(7, 0), CtSlot(11, 1));
  mapping.add(CtSlot(2, 5), CtSlot(11, 2));
  mapping.add(CtSlot(0, 0), CtSlot(11, 3));
  mapping.add(CtSlot(1, 7), CtSlot(11, 4));
  mapping.add(CtSlot(13, 7), CtSlot(11, 5));
  mapping.add(CtSlot(21, 6), CtSlot(11, 6));
  mapping.add(CtSlot(11, 3), CtSlot(11, 7));
  mapping.add(CtSlot(24, 0), CtSlot(12, 0));
  mapping.add(CtSlot(8, 0), CtSlot(12, 1));
  mapping.add(CtSlot(6, 2), CtSlot(12, 2));
  mapping.add(CtSlot(13, 0), CtSlot(12, 3));
  mapping.add(CtSlot(16, 4), CtSlot(12, 4));
  mapping.add(CtSlot(20, 4), CtSlot(12, 5));
  mapping.add(CtSlot(10, 6), CtSlot(12, 6));
  mapping.add(CtSlot(19, 5), CtSlot(12, 7));
  mapping.add(CtSlot(23, 6), CtSlot(13, 0));
  mapping.add(CtSlot(28, 5), CtSlot(13, 1));
  mapping.add(CtSlot(19, 2), CtSlot(13, 2));
  mapping.add(CtSlot(18, 3), CtSlot(13, 3));
  mapping.add(CtSlot(18, 4), CtSlot(13, 4));
  mapping.add(CtSlot(17, 4), CtSlot(13, 5));
  mapping.add(CtSlot(9, 7), CtSlot(13, 6));
  mapping.add(CtSlot(10, 7), CtSlot(13, 7));
  mapping.add(CtSlot(7, 5), CtSlot(14, 0));
  mapping.add(CtSlot(15, 2), CtSlot(14, 1));
  mapping.add(CtSlot(0, 0), CtSlot(14, 2));
  mapping.add(CtSlot(8, 4), CtSlot(14, 3));
  mapping.add(CtSlot(17, 5), CtSlot(14, 4));
  mapping.add(CtSlot(0, 2), CtSlot(14, 5));
  mapping.add(CtSlot(5, 7), CtSlot(14, 6));
  mapping.add(CtSlot(12, 3), CtSlot(14, 7));
  mapping.add(CtSlot(10, 1), CtSlot(15, 0));
  mapping.add(CtSlot(0, 2), CtSlot(15, 1));
  mapping.add(CtSlot(27, 7), CtSlot(15, 2));
  mapping.add(CtSlot(26, 7), CtSlot(15, 3));
  mapping.add(CtSlot(26, 2), CtSlot(15, 4));
  mapping.add(CtSlot(19, 7), CtSlot(15, 5));
  mapping.add(CtSlot(9, 2), CtSlot(15, 6));
  mapping.add(CtSlot(28, 7), CtSlot(15, 7));
  mapping.add(CtSlot(20, 4), CtSlot(16, 0));
  mapping.add(CtSlot(0, 0), CtSlot(16, 1));
  mapping.add(CtSlot(3, 4), CtSlot(16, 2));
  mapping.add(CtSlot(6, 5), CtSlot(16, 3));
  mapping.add(CtSlot(9, 0), CtSlot(16, 4));
  mapping.add(CtSlot(7, 6), CtSlot(16, 5));
  mapping.add(CtSlot(2, 3), CtSlot(16, 6));
  mapping.add(CtSlot(18, 6), CtSlot(16, 7));
  mapping.add(CtSlot(21, 1), CtSlot(17, 0));
  mapping.add(CtSlot(25, 0), CtSlot(17, 1));
  mapping.add(CtSlot(7, 2), CtSlot(17, 2));
  mapping.add(CtSlot(23, 4), CtSlot(17, 3));
  mapping.add(CtSlot(23, 6), CtSlot(17, 4));
  mapping.add(CtSlot(14, 6), CtSlot(17, 5));
  mapping.add(CtSlot(21, 6), CtSlot(17, 6));
  mapping.add(CtSlot(15, 2), CtSlot(17, 7));
  mapping.add(CtSlot(0, 3), CtSlot(18, 0));
  mapping.add(CtSlot(12, 1), CtSlot(18, 1));
  mapping.add(CtSlot(9, 5), CtSlot(18, 2));
  mapping.add(CtSlot(3, 0), CtSlot(18, 3));
  mapping.add(CtSlot(7, 5), CtSlot(18, 4));
  mapping.add(CtSlot(7, 3), CtSlot(18, 5));
  mapping.add(CtSlot(28, 7), CtSlot(18, 6));
  mapping.add(CtSlot(20, 7), CtSlot(18, 7));
  mapping.add(CtSlot(2, 1), CtSlot(19, 0));
  mapping.add(CtSlot(23, 4), CtSlot(19, 1));
  mapping.add(CtSlot(8, 7), CtSlot(19, 2));
  mapping.add(CtSlot(22, 7), CtSlot(19, 3));
  mapping.add(CtSlot(21, 3), CtSlot(19, 4));
  mapping.add(CtSlot(27, 2), CtSlot(19, 5));
  mapping.add(CtSlot(21, 3), CtSlot(19, 6));
  mapping.add(CtSlot(20, 2), CtSlot(19, 7));
  mapping.add(CtSlot(10, 2), CtSlot(20, 0));
  mapping.add(CtSlot(28, 6), CtSlot(20, 1));
  mapping.add(CtSlot(27, 2), CtSlot(20, 2));
  mapping.add(CtSlot(10, 2), CtSlot(20, 3));
  mapping.add(CtSlot(15, 3), CtSlot(20, 4));
  mapping.add(CtSlot(17, 6), CtSlot(20, 5));
  mapping.add(CtSlot(26, 0), CtSlot(20, 6));
  mapping.add(CtSlot(10, 3), CtSlot(20, 7));
  mapping.add(CtSlot(14, 3), CtSlot(21, 0));
  mapping.add(CtSlot(18, 0), CtSlot(21, 1));
  mapping.add(CtSlot(26, 6), CtSlot(21, 2));
  mapping.add(CtSlot(8, 5), CtSlot(21, 3));
  mapping.add(CtSlot(10, 4), CtSlot(21, 4));
  mapping.add(CtSlot(16, 1), CtSlot(21, 5));
  mapping.add(CtSlot(11, 4), CtSlot(21, 6));
  mapping.add(CtSlot(8, 3), CtSlot(21, 7));
  mapping.add(CtSlot(12, 3), CtSlot(22, 0));
  mapping.add(CtSlot(15, 7), CtSlot(22, 1));
  mapping.add(CtSlot(28, 3), CtSlot(22, 2));
  mapping.add(CtSlot(15, 5), CtSlot(22, 3));
  mapping.add(CtSlot(5, 2), CtSlot(22, 4));
  mapping.add(CtSlot(14, 7), CtSlot(22, 5));
  mapping.add(CtSlot(24, 4), CtSlot(22, 6));
  mapping.add(CtSlot(11, 1), CtSlot(22, 7));
  mapping.add(CtSlot(10, 3), CtSlot(23, 0));
  mapping.add(CtSlot(11, 7), CtSlot(23, 1));
  mapping.add(CtSlot(1, 5), CtSlot(23, 2));
  mapping.add(CtSlot(12, 1), CtSlot(23, 3));
  mapping.add(CtSlot(25, 2), CtSlot(23, 4));
  mapping.add(CtSlot(15, 7), CtSlot(23, 5));
  mapping.add(CtSlot(16, 2), CtSlot(23, 6));
  mapping.add(CtSlot(0, 3), CtSlot(23, 7));
  mapping.add(CtSlot(3, 6), CtSlot(24, 0));
  mapping.add(CtSlot(27, 7), CtSlot(24, 1));
  mapping.add(CtSlot(24, 1), CtSlot(24, 2));
  mapping.add(CtSlot(10, 7), CtSlot(24, 3));
  mapping.add(CtSlot(18, 1), CtSlot(24, 4));
  mapping.add(CtSlot(18, 3), CtSlot(24, 5));
  mapping.add(CtSlot(0, 7), CtSlot(24, 6));
  mapping.add(CtSlot(4, 0), CtSlot(24, 7));
  mapping.add(CtSlot(10, 3), CtSlot(25, 0));
  mapping.add(CtSlot(18, 1), CtSlot(25, 1));
  mapping.add(CtSlot(6, 7), CtSlot(25, 2));
  mapping.add(CtSlot(15, 3), CtSlot(25, 3));
  mapping.add(CtSlot(3, 2), CtSlot(25, 4));
  mapping.add(CtSlot(17, 4), CtSlot(25, 5));
  mapping.add(CtSlot(18, 4), CtSlot(25, 6));
  mapping.add(CtSlot(13, 2), CtSlot(25, 7));
  mapping.add(CtSlot(4, 1), CtSlot(26, 0));
  mapping.add(CtSlot(23, 0), CtSlot(26, 1));
  mapping.add(CtSlot(22, 7), CtSlot(26, 2));
  mapping.add(CtSlot(7, 6), CtSlot(26, 3));
  mapping.add(CtSlot(16, 3), CtSlot(26, 4));
  mapping.add(CtSlot(4, 5), CtSlot(26, 5));
  mapping.add(CtSlot(15, 5), CtSlot(26, 6));
  mapping.add(CtSlot(11, 0), CtSlot(26, 7));
  mapping.add(CtSlot(26, 7), CtSlot(27, 0));
  mapping.add(CtSlot(26, 7), CtSlot(27, 1));
  mapping.add(CtSlot(4, 7), CtSlot(27, 2));
  mapping.add(CtSlot(6, 7), CtSlot(27, 3));
  mapping.add(CtSlot(7, 1), CtSlot(27, 4));
  mapping.add(CtSlot(26, 6), CtSlot(27, 5));
  mapping.add(CtSlot(6, 7), CtSlot(27, 6));
  mapping.add(CtSlot(2, 7), CtSlot(27, 7));
  mapping.add(CtSlot(7, 7), CtSlot(28, 0));
  mapping.add(CtSlot(26, 1), CtSlot(28, 1));
  mapping.add(CtSlot(24, 0), CtSlot(28, 2));
  mapping.add(CtSlot(15, 5), CtSlot(28, 3));
  mapping.add(CtSlot(17, 6), CtSlot(28, 4));
  mapping.add(CtSlot(15, 3), CtSlot(28, 5));
  mapping.add(CtSlot(7, 4), CtSlot(28, 6));
  mapping.add(CtSlot(28, 0), CtSlot(28, 7));
  mapping.add(CtSlot(24, 0), CtSlot(29, 0));
  mapping.add(CtSlot(2, 1), CtSlot(29, 1));
  mapping.add(CtSlot(24, 7), CtSlot(29, 2));
  mapping.add(CtSlot(12, 0), CtSlot(29, 3));
  mapping.add(CtSlot(13, 7), CtSlot(29, 4));
  mapping.add(CtSlot(20, 1), CtSlot(29, 5));
  mapping.add(CtSlot(9, 6), CtSlot(29, 6));
  mapping.add(CtSlot(16, 3), CtSlot(29, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_41) {
  int64_t numCts = 30;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(22, 2), CtSlot(0, 0));
  mapping.add(CtSlot(26, 7), CtSlot(0, 1));
  mapping.add(CtSlot(21, 5), CtSlot(0, 2));
  mapping.add(CtSlot(7, 1), CtSlot(0, 3));
  mapping.add(CtSlot(24, 0), CtSlot(0, 4));
  mapping.add(CtSlot(13, 3), CtSlot(0, 5));
  mapping.add(CtSlot(10, 3), CtSlot(0, 6));
  mapping.add(CtSlot(18, 5), CtSlot(0, 7));
  mapping.add(CtSlot(24, 1), CtSlot(1, 0));
  mapping.add(CtSlot(1, 1), CtSlot(1, 1));
  mapping.add(CtSlot(26, 5), CtSlot(1, 2));
  mapping.add(CtSlot(29, 0), CtSlot(1, 3));
  mapping.add(CtSlot(26, 0), CtSlot(1, 4));
  mapping.add(CtSlot(5, 4), CtSlot(1, 5));
  mapping.add(CtSlot(27, 1), CtSlot(1, 6));
  mapping.add(CtSlot(22, 7), CtSlot(1, 7));
  mapping.add(CtSlot(7, 2), CtSlot(2, 0));
  mapping.add(CtSlot(29, 2), CtSlot(2, 1));
  mapping.add(CtSlot(28, 1), CtSlot(2, 2));
  mapping.add(CtSlot(22, 1), CtSlot(2, 3));
  mapping.add(CtSlot(8, 0), CtSlot(2, 4));
  mapping.add(CtSlot(16, 3), CtSlot(2, 5));
  mapping.add(CtSlot(10, 7), CtSlot(2, 6));
  mapping.add(CtSlot(6, 5), CtSlot(2, 7));
  mapping.add(CtSlot(1, 5), CtSlot(3, 0));
  mapping.add(CtSlot(26, 0), CtSlot(3, 1));
  mapping.add(CtSlot(22, 4), CtSlot(3, 2));
  mapping.add(CtSlot(23, 2), CtSlot(3, 3));
  mapping.add(CtSlot(16, 7), CtSlot(3, 4));
  mapping.add(CtSlot(0, 0), CtSlot(3, 5));
  mapping.add(CtSlot(16, 2), CtSlot(3, 6));
  mapping.add(CtSlot(20, 2), CtSlot(3, 7));
  mapping.add(CtSlot(21, 1), CtSlot(4, 0));
  mapping.add(CtSlot(12, 3), CtSlot(4, 1));
  mapping.add(CtSlot(4, 4), CtSlot(4, 2));
  mapping.add(CtSlot(29, 7), CtSlot(4, 3));
  mapping.add(CtSlot(9, 5), CtSlot(4, 4));
  mapping.add(CtSlot(5, 2), CtSlot(4, 5));
  mapping.add(CtSlot(25, 0), CtSlot(4, 6));
  mapping.add(CtSlot(4, 2), CtSlot(4, 7));
  mapping.add(CtSlot(12, 3), CtSlot(5, 0));
  mapping.add(CtSlot(26, 2), CtSlot(5, 1));
  mapping.add(CtSlot(29, 0), CtSlot(5, 2));
  mapping.add(CtSlot(4, 5), CtSlot(5, 3));
  mapping.add(CtSlot(5, 6), CtSlot(5, 4));
  mapping.add(CtSlot(20, 5), CtSlot(5, 5));
  mapping.add(CtSlot(2, 7), CtSlot(5, 6));
  mapping.add(CtSlot(9, 0), CtSlot(5, 7));
  mapping.add(CtSlot(2, 2), CtSlot(6, 0));
  mapping.add(CtSlot(7, 1), CtSlot(6, 1));
  mapping.add(CtSlot(13, 3), CtSlot(6, 2));
  mapping.add(CtSlot(8, 1), CtSlot(6, 3));
  mapping.add(CtSlot(29, 2), CtSlot(6, 4));
  mapping.add(CtSlot(26, 5), CtSlot(6, 5));
  mapping.add(CtSlot(4, 1), CtSlot(6, 6));
  mapping.add(CtSlot(26, 3), CtSlot(6, 7));
  mapping.add(CtSlot(22, 3), CtSlot(7, 0));
  mapping.add(CtSlot(12, 1), CtSlot(7, 1));
  mapping.add(CtSlot(22, 2), CtSlot(7, 2));
  mapping.add(CtSlot(10, 5), CtSlot(7, 3));
  mapping.add(CtSlot(1, 1), CtSlot(7, 4));
  mapping.add(CtSlot(20, 1), CtSlot(7, 5));
  mapping.add(CtSlot(11, 5), CtSlot(7, 6));
  mapping.add(CtSlot(20, 3), CtSlot(7, 7));
  mapping.add(CtSlot(10, 1), CtSlot(8, 0));
  mapping.add(CtSlot(21, 0), CtSlot(8, 1));
  mapping.add(CtSlot(22, 3), CtSlot(8, 2));
  mapping.add(CtSlot(1, 5), CtSlot(8, 3));
  mapping.add(CtSlot(23, 5), CtSlot(8, 4));
  mapping.add(CtSlot(1, 1), CtSlot(8, 5));
  mapping.add(CtSlot(3, 4), CtSlot(8, 6));
  mapping.add(CtSlot(26, 1), CtSlot(8, 7));
  mapping.add(CtSlot(3, 7), CtSlot(9, 0));
  mapping.add(CtSlot(28, 2), CtSlot(9, 1));
  mapping.add(CtSlot(12, 1), CtSlot(9, 2));
  mapping.add(CtSlot(4, 0), CtSlot(9, 3));
  mapping.add(CtSlot(10, 0), CtSlot(9, 4));
  mapping.add(CtSlot(19, 0), CtSlot(9, 5));
  mapping.add(CtSlot(8, 5), CtSlot(9, 6));
  mapping.add(CtSlot(9, 5), CtSlot(9, 7));
  mapping.add(CtSlot(8, 3), CtSlot(10, 0));
  mapping.add(CtSlot(14, 5), CtSlot(10, 1));
  mapping.add(CtSlot(1, 4), CtSlot(10, 2));
  mapping.add(CtSlot(23, 5), CtSlot(10, 3));
  mapping.add(CtSlot(12, 2), CtSlot(10, 4));
  mapping.add(CtSlot(24, 3), CtSlot(10, 5));
  mapping.add(CtSlot(22, 6), CtSlot(10, 6));
  mapping.add(CtSlot(4, 4), CtSlot(10, 7));
  mapping.add(CtSlot(26, 2), CtSlot(11, 0));
  mapping.add(CtSlot(7, 0), CtSlot(11, 1));
  mapping.add(CtSlot(2, 5), CtSlot(11, 2));
  mapping.add(CtSlot(0, 0), CtSlot(11, 3));
  mapping.add(CtSlot(1, 7), CtSlot(11, 4));
  mapping.add(CtSlot(13, 7), CtSlot(11, 5));
  mapping.add(CtSlot(21, 6), CtSlot(11, 6));
  mapping.add(CtSlot(11, 3), CtSlot(11, 7));
  mapping.add(CtSlot(24, 0), CtSlot(12, 0));
  mapping.add(CtSlot(8, 0), CtSlot(12, 1));
  mapping.add(CtSlot(6, 2), CtSlot(12, 2));
  mapping.add(CtSlot(13, 0), CtSlot(12, 3));
  mapping.add(CtSlot(16, 4), CtSlot(12, 4));
  mapping.add(CtSlot(20, 4), CtSlot(12, 5));
  mapping.add(CtSlot(10, 6), CtSlot(12, 6));
  mapping.add(CtSlot(19, 5), CtSlot(12, 7));
  mapping.add(CtSlot(23, 6), CtSlot(13, 0));
  mapping.add(CtSlot(28, 5), CtSlot(13, 1));
  mapping.add(CtSlot(19, 2), CtSlot(13, 2));
  mapping.add(CtSlot(18, 3), CtSlot(13, 3));
  mapping.add(CtSlot(18, 4), CtSlot(13, 4));
  mapping.add(CtSlot(17, 4), CtSlot(13, 5));
  mapping.add(CtSlot(9, 7), CtSlot(13, 6));
  mapping.add(CtSlot(10, 7), CtSlot(13, 7));
  mapping.add(CtSlot(7, 5), CtSlot(14, 0));
  mapping.add(CtSlot(15, 2), CtSlot(14, 1));
  mapping.add(CtSlot(0, 0), CtSlot(14, 2));
  mapping.add(CtSlot(8, 4), CtSlot(14, 3));
  mapping.add(CtSlot(17, 5), CtSlot(14, 4));
  mapping.add(CtSlot(0, 2), CtSlot(14, 5));
  mapping.add(CtSlot(5, 7), CtSlot(14, 6));
  mapping.add(CtSlot(12, 3), CtSlot(14, 7));
  mapping.add(CtSlot(10, 1), CtSlot(15, 0));
  mapping.add(CtSlot(0, 2), CtSlot(15, 1));
  mapping.add(CtSlot(27, 7), CtSlot(15, 2));
  mapping.add(CtSlot(26, 7), CtSlot(15, 3));
  mapping.add(CtSlot(26, 2), CtSlot(15, 4));
  mapping.add(CtSlot(19, 7), CtSlot(15, 5));
  mapping.add(CtSlot(9, 2), CtSlot(15, 6));
  mapping.add(CtSlot(28, 7), CtSlot(15, 7));
  mapping.add(CtSlot(20, 4), CtSlot(16, 0));
  mapping.add(CtSlot(0, 0), CtSlot(16, 1));
  mapping.add(CtSlot(3, 4), CtSlot(16, 2));
  mapping.add(CtSlot(6, 5), CtSlot(16, 3));
  mapping.add(CtSlot(9, 0), CtSlot(16, 4));
  mapping.add(CtSlot(7, 6), CtSlot(16, 5));
  mapping.add(CtSlot(2, 3), CtSlot(16, 6));
  mapping.add(CtSlot(18, 6), CtSlot(16, 7));
  mapping.add(CtSlot(21, 1), CtSlot(17, 0));
  mapping.add(CtSlot(25, 0), CtSlot(17, 1));
  mapping.add(CtSlot(7, 2), CtSlot(17, 2));
  mapping.add(CtSlot(23, 4), CtSlot(17, 3));
  mapping.add(CtSlot(23, 6), CtSlot(17, 4));
  mapping.add(CtSlot(14, 6), CtSlot(17, 5));
  mapping.add(CtSlot(21, 6), CtSlot(17, 6));
  mapping.add(CtSlot(15, 2), CtSlot(17, 7));
  mapping.add(CtSlot(0, 3), CtSlot(18, 0));
  mapping.add(CtSlot(12, 1), CtSlot(18, 1));
  mapping.add(CtSlot(9, 5), CtSlot(18, 2));
  mapping.add(CtSlot(3, 0), CtSlot(18, 3));
  mapping.add(CtSlot(7, 5), CtSlot(18, 4));
  mapping.add(CtSlot(7, 3), CtSlot(18, 5));
  mapping.add(CtSlot(28, 7), CtSlot(18, 6));
  mapping.add(CtSlot(20, 7), CtSlot(18, 7));
  mapping.add(CtSlot(2, 1), CtSlot(19, 0));
  mapping.add(CtSlot(23, 4), CtSlot(19, 1));
  mapping.add(CtSlot(8, 7), CtSlot(19, 2));
  mapping.add(CtSlot(22, 7), CtSlot(19, 3));
  mapping.add(CtSlot(21, 3), CtSlot(19, 4));
  mapping.add(CtSlot(27, 2), CtSlot(19, 5));
  mapping.add(CtSlot(21, 3), CtSlot(19, 6));
  mapping.add(CtSlot(20, 2), CtSlot(19, 7));
  mapping.add(CtSlot(10, 2), CtSlot(20, 0));
  mapping.add(CtSlot(28, 6), CtSlot(20, 1));
  mapping.add(CtSlot(27, 2), CtSlot(20, 2));
  mapping.add(CtSlot(10, 2), CtSlot(20, 3));
  mapping.add(CtSlot(15, 3), CtSlot(20, 4));
  mapping.add(CtSlot(17, 6), CtSlot(20, 5));
  mapping.add(CtSlot(26, 0), CtSlot(20, 6));
  mapping.add(CtSlot(10, 3), CtSlot(20, 7));
  mapping.add(CtSlot(14, 3), CtSlot(21, 0));
  mapping.add(CtSlot(18, 0), CtSlot(21, 1));
  mapping.add(CtSlot(26, 6), CtSlot(21, 2));
  mapping.add(CtSlot(8, 5), CtSlot(21, 3));
  mapping.add(CtSlot(10, 4), CtSlot(21, 4));
  mapping.add(CtSlot(16, 1), CtSlot(21, 5));
  mapping.add(CtSlot(11, 4), CtSlot(21, 6));
  mapping.add(CtSlot(8, 3), CtSlot(21, 7));
  mapping.add(CtSlot(12, 3), CtSlot(22, 0));
  mapping.add(CtSlot(15, 7), CtSlot(22, 1));
  mapping.add(CtSlot(28, 3), CtSlot(22, 2));
  mapping.add(CtSlot(15, 5), CtSlot(22, 3));
  mapping.add(CtSlot(5, 2), CtSlot(22, 4));
  mapping.add(CtSlot(14, 7), CtSlot(22, 5));
  mapping.add(CtSlot(24, 4), CtSlot(22, 6));
  mapping.add(CtSlot(11, 1), CtSlot(22, 7));
  mapping.add(CtSlot(10, 3), CtSlot(23, 0));
  mapping.add(CtSlot(11, 7), CtSlot(23, 1));
  mapping.add(CtSlot(1, 5), CtSlot(23, 2));
  mapping.add(CtSlot(12, 1), CtSlot(23, 3));
  mapping.add(CtSlot(25, 2), CtSlot(23, 4));
  mapping.add(CtSlot(15, 7), CtSlot(23, 5));
  mapping.add(CtSlot(16, 2), CtSlot(23, 6));
  mapping.add(CtSlot(0, 3), CtSlot(23, 7));
  mapping.add(CtSlot(3, 6), CtSlot(24, 0));
  mapping.add(CtSlot(27, 7), CtSlot(24, 1));
  mapping.add(CtSlot(24, 1), CtSlot(24, 2));
  mapping.add(CtSlot(10, 7), CtSlot(24, 3));
  mapping.add(CtSlot(18, 1), CtSlot(24, 4));
  mapping.add(CtSlot(18, 3), CtSlot(24, 5));
  mapping.add(CtSlot(0, 7), CtSlot(24, 6));
  mapping.add(CtSlot(4, 0), CtSlot(24, 7));
  mapping.add(CtSlot(10, 3), CtSlot(25, 0));
  mapping.add(CtSlot(18, 1), CtSlot(25, 1));
  mapping.add(CtSlot(6, 7), CtSlot(25, 2));
  mapping.add(CtSlot(15, 3), CtSlot(25, 3));
  mapping.add(CtSlot(3, 2), CtSlot(25, 4));
  mapping.add(CtSlot(17, 4), CtSlot(25, 5));
  mapping.add(CtSlot(18, 4), CtSlot(25, 6));
  mapping.add(CtSlot(13, 2), CtSlot(25, 7));
  mapping.add(CtSlot(4, 1), CtSlot(26, 0));
  mapping.add(CtSlot(23, 0), CtSlot(26, 1));
  mapping.add(CtSlot(22, 7), CtSlot(26, 2));
  mapping.add(CtSlot(7, 6), CtSlot(26, 3));
  mapping.add(CtSlot(16, 3), CtSlot(26, 4));
  mapping.add(CtSlot(4, 5), CtSlot(26, 5));
  mapping.add(CtSlot(15, 5), CtSlot(26, 6));
  mapping.add(CtSlot(11, 0), CtSlot(26, 7));
  mapping.add(CtSlot(26, 7), CtSlot(27, 0));
  mapping.add(CtSlot(26, 7), CtSlot(27, 1));
  mapping.add(CtSlot(4, 7), CtSlot(27, 2));
  mapping.add(CtSlot(6, 7), CtSlot(27, 3));
  mapping.add(CtSlot(7, 1), CtSlot(27, 4));
  mapping.add(CtSlot(26, 6), CtSlot(27, 5));
  mapping.add(CtSlot(6, 7), CtSlot(27, 6));
  mapping.add(CtSlot(2, 7), CtSlot(27, 7));
  mapping.add(CtSlot(7, 7), CtSlot(28, 0));
  mapping.add(CtSlot(26, 1), CtSlot(28, 1));
  mapping.add(CtSlot(24, 0), CtSlot(28, 2));
  mapping.add(CtSlot(15, 5), CtSlot(28, 3));
  mapping.add(CtSlot(17, 6), CtSlot(28, 4));
  mapping.add(CtSlot(15, 3), CtSlot(28, 5));
  mapping.add(CtSlot(7, 4), CtSlot(28, 6));
  mapping.add(CtSlot(28, 0), CtSlot(28, 7));
  mapping.add(CtSlot(24, 0), CtSlot(29, 0));
  mapping.add(CtSlot(2, 1), CtSlot(29, 1));
  mapping.add(CtSlot(24, 7), CtSlot(29, 2));
  mapping.add(CtSlot(12, 0), CtSlot(29, 3));
  mapping.add(CtSlot(13, 7), CtSlot(29, 4));
  mapping.add(CtSlot(20, 1), CtSlot(29, 5));
  mapping.add(CtSlot(9, 6), CtSlot(29, 6));
  mapping.add(CtSlot(16, 3), CtSlot(29, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_42) {
  int64_t numCts = 30;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(22, 2), CtSlot(0, 0));
  mapping.add(CtSlot(26, 7), CtSlot(0, 1));
  mapping.add(CtSlot(21, 5), CtSlot(0, 2));
  mapping.add(CtSlot(7, 1), CtSlot(0, 3));
  mapping.add(CtSlot(24, 0), CtSlot(0, 4));
  mapping.add(CtSlot(13, 3), CtSlot(0, 5));
  mapping.add(CtSlot(10, 3), CtSlot(0, 6));
  mapping.add(CtSlot(18, 5), CtSlot(0, 7));
  mapping.add(CtSlot(24, 1), CtSlot(1, 0));
  mapping.add(CtSlot(1, 1), CtSlot(1, 1));
  mapping.add(CtSlot(26, 5), CtSlot(1, 2));
  mapping.add(CtSlot(29, 0), CtSlot(1, 3));
  mapping.add(CtSlot(26, 0), CtSlot(1, 4));
  mapping.add(CtSlot(5, 4), CtSlot(1, 5));
  mapping.add(CtSlot(27, 1), CtSlot(1, 6));
  mapping.add(CtSlot(22, 7), CtSlot(1, 7));
  mapping.add(CtSlot(7, 2), CtSlot(2, 0));
  mapping.add(CtSlot(29, 2), CtSlot(2, 1));
  mapping.add(CtSlot(28, 1), CtSlot(2, 2));
  mapping.add(CtSlot(22, 1), CtSlot(2, 3));
  mapping.add(CtSlot(8, 0), CtSlot(2, 4));
  mapping.add(CtSlot(16, 3), CtSlot(2, 5));
  mapping.add(CtSlot(10, 7), CtSlot(2, 6));
  mapping.add(CtSlot(6, 5), CtSlot(2, 7));
  mapping.add(CtSlot(1, 5), CtSlot(3, 0));
  mapping.add(CtSlot(26, 0), CtSlot(3, 1));
  mapping.add(CtSlot(22, 4), CtSlot(3, 2));
  mapping.add(CtSlot(23, 2), CtSlot(3, 3));
  mapping.add(CtSlot(16, 7), CtSlot(3, 4));
  mapping.add(CtSlot(0, 0), CtSlot(3, 5));
  mapping.add(CtSlot(16, 2), CtSlot(3, 6));
  mapping.add(CtSlot(20, 0), CtSlot(3, 7));
  mapping.add(CtSlot(21, 1), CtSlot(4, 0));
  mapping.add(CtSlot(12, 3), CtSlot(4, 1));
  mapping.add(CtSlot(4, 4), CtSlot(4, 2));
  mapping.add(CtSlot(29, 7), CtSlot(4, 3));
  mapping.add(CtSlot(9, 5), CtSlot(4, 4));
  mapping.add(CtSlot(5, 2), CtSlot(4, 5));
  mapping.add(CtSlot(25, 0), CtSlot(4, 6));
  mapping.add(CtSlot(4, 2), CtSlot(4, 7));
  mapping.add(CtSlot(12, 3), CtSlot(5, 0));
  mapping.add(CtSlot(26, 2), CtSlot(5, 1));
  mapping.add(CtSlot(29, 0), CtSlot(5, 2));
  mapping.add(CtSlot(4, 5), CtSlot(5, 3));
  mapping.add(CtSlot(5, 6), CtSlot(5, 4));
  mapping.add(CtSlot(20, 5), CtSlot(5, 5));
  mapping.add(CtSlot(2, 7), CtSlot(5, 6));
  mapping.add(CtSlot(9, 0), CtSlot(5, 7));
  mapping.add(CtSlot(2, 2), CtSlot(6, 0));
  mapping.add(CtSlot(7, 1), CtSlot(6, 1));
  mapping.add(CtSlot(13, 3), CtSlot(6, 2));
  mapping.add(CtSlot(8, 1), CtSlot(6, 3));
  mapping.add(CtSlot(29, 2), CtSlot(6, 4));
  mapping.add(CtSlot(26, 5), CtSlot(6, 5));
  mapping.add(CtSlot(4, 1), CtSlot(6, 6));
  mapping.add(CtSlot(26, 3), CtSlot(6, 7));
  mapping.add(CtSlot(22, 3), CtSlot(7, 0));
  mapping.add(CtSlot(12, 1), CtSlot(7, 1));
  mapping.add(CtSlot(22, 2), CtSlot(7, 2));
  mapping.add(CtSlot(10, 5), CtSlot(7, 3));
  mapping.add(CtSlot(1, 1), CtSlot(7, 4));
  mapping.add(CtSlot(20, 1), CtSlot(7, 5));
  mapping.add(CtSlot(11, 5), CtSlot(7, 6));
  mapping.add(CtSlot(20, 3), CtSlot(7, 7));
  mapping.add(CtSlot(10, 1), CtSlot(8, 0));
  mapping.add(CtSlot(21, 0), CtSlot(8, 1));
  mapping.add(CtSlot(22, 3), CtSlot(8, 2));
  mapping.add(CtSlot(1, 5), CtSlot(8, 3));
  mapping.add(CtSlot(23, 5), CtSlot(8, 4));
  mapping.add(CtSlot(1, 1), CtSlot(8, 5));
  mapping.add(CtSlot(3, 4), CtSlot(8, 6));
  mapping.add(CtSlot(26, 1), CtSlot(8, 7));
  mapping.add(CtSlot(3, 7), CtSlot(9, 0));
  mapping.add(CtSlot(28, 2), CtSlot(9, 1));
  mapping.add(CtSlot(12, 1), CtSlot(9, 2));
  mapping.add(CtSlot(4, 0), CtSlot(9, 3));
  mapping.add(CtSlot(10, 0), CtSlot(9, 4));
  mapping.add(CtSlot(19, 0), CtSlot(9, 5));
  mapping.add(CtSlot(8, 5), CtSlot(9, 6));
  mapping.add(CtSlot(9, 5), CtSlot(9, 7));
  mapping.add(CtSlot(8, 3), CtSlot(10, 0));
  mapping.add(CtSlot(14, 5), CtSlot(10, 1));
  mapping.add(CtSlot(1, 4), CtSlot(10, 2));
  mapping.add(CtSlot(23, 5), CtSlot(10, 3));
  mapping.add(CtSlot(12, 2), CtSlot(10, 4));
  mapping.add(CtSlot(24, 3), CtSlot(10, 5));
  mapping.add(CtSlot(22, 6), CtSlot(10, 6));
  mapping.add(CtSlot(4, 4), CtSlot(10, 7));
  mapping.add(CtSlot(26, 2), CtSlot(11, 0));
  mapping.add(CtSlot(7, 0), CtSlot(11, 1));
  mapping.add(CtSlot(2, 5), CtSlot(11, 2));
  mapping.add(CtSlot(0, 0), CtSlot(11, 3));
  mapping.add(CtSlot(1, 7), CtSlot(11, 4));
  mapping.add(CtSlot(13, 7), CtSlot(11, 5));
  mapping.add(CtSlot(21, 6), CtSlot(11, 6));
  mapping.add(CtSlot(11, 3), CtSlot(11, 7));
  mapping.add(CtSlot(24, 0), CtSlot(12, 0));
  mapping.add(CtSlot(8, 0), CtSlot(12, 1));
  mapping.add(CtSlot(6, 2), CtSlot(12, 2));
  mapping.add(CtSlot(13, 0), CtSlot(12, 3));
  mapping.add(CtSlot(16, 4), CtSlot(12, 4));
  mapping.add(CtSlot(20, 4), CtSlot(12, 5));
  mapping.add(CtSlot(10, 6), CtSlot(12, 6));
  mapping.add(CtSlot(19, 5), CtSlot(12, 7));
  mapping.add(CtSlot(23, 6), CtSlot(13, 0));
  mapping.add(CtSlot(28, 5), CtSlot(13, 1));
  mapping.add(CtSlot(19, 2), CtSlot(13, 2));
  mapping.add(CtSlot(18, 3), CtSlot(13, 3));
  mapping.add(CtSlot(18, 4), CtSlot(13, 4));
  mapping.add(CtSlot(17, 4), CtSlot(13, 5));
  mapping.add(CtSlot(9, 7), CtSlot(13, 6));
  mapping.add(CtSlot(10, 7), CtSlot(13, 7));
  mapping.add(CtSlot(7, 5), CtSlot(14, 0));
  mapping.add(CtSlot(15, 2), CtSlot(14, 1));
  mapping.add(CtSlot(0, 0), CtSlot(14, 2));
  mapping.add(CtSlot(8, 4), CtSlot(14, 3));
  mapping.add(CtSlot(17, 5), CtSlot(14, 4));
  mapping.add(CtSlot(0, 2), CtSlot(14, 5));
  mapping.add(CtSlot(5, 7), CtSlot(14, 6));
  mapping.add(CtSlot(12, 3), CtSlot(14, 7));
  mapping.add(CtSlot(10, 1), CtSlot(15, 0));
  mapping.add(CtSlot(0, 2), CtSlot(15, 1));
  mapping.add(CtSlot(27, 7), CtSlot(15, 2));
  mapping.add(CtSlot(26, 7), CtSlot(15, 3));
  mapping.add(CtSlot(26, 2), CtSlot(15, 4));
  mapping.add(CtSlot(19, 7), CtSlot(15, 5));
  mapping.add(CtSlot(9, 2), CtSlot(15, 6));
  mapping.add(CtSlot(28, 7), CtSlot(15, 7));
  mapping.add(CtSlot(20, 4), CtSlot(16, 0));
  mapping.add(CtSlot(0, 0), CtSlot(16, 1));
  mapping.add(CtSlot(3, 4), CtSlot(16, 2));
  mapping.add(CtSlot(6, 5), CtSlot(16, 3));
  mapping.add(CtSlot(9, 0), CtSlot(16, 4));
  mapping.add(CtSlot(7, 6), CtSlot(16, 5));
  mapping.add(CtSlot(2, 3), CtSlot(16, 6));
  mapping.add(CtSlot(18, 6), CtSlot(16, 7));
  mapping.add(CtSlot(21, 1), CtSlot(17, 0));
  mapping.add(CtSlot(25, 0), CtSlot(17, 1));
  mapping.add(CtSlot(7, 2), CtSlot(17, 2));
  mapping.add(CtSlot(23, 4), CtSlot(17, 3));
  mapping.add(CtSlot(23, 6), CtSlot(17, 4));
  mapping.add(CtSlot(14, 6), CtSlot(17, 5));
  mapping.add(CtSlot(21, 6), CtSlot(17, 6));
  mapping.add(CtSlot(15, 2), CtSlot(17, 7));
  mapping.add(CtSlot(0, 3), CtSlot(18, 0));
  mapping.add(CtSlot(12, 1), CtSlot(18, 1));
  mapping.add(CtSlot(9, 5), CtSlot(18, 2));
  mapping.add(CtSlot(3, 0), CtSlot(18, 3));
  mapping.add(CtSlot(7, 5), CtSlot(18, 4));
  mapping.add(CtSlot(7, 3), CtSlot(18, 5));
  mapping.add(CtSlot(28, 7), CtSlot(18, 6));
  mapping.add(CtSlot(20, 7), CtSlot(18, 7));
  mapping.add(CtSlot(2, 1), CtSlot(19, 0));
  mapping.add(CtSlot(23, 4), CtSlot(19, 1));
  mapping.add(CtSlot(8, 7), CtSlot(19, 2));
  mapping.add(CtSlot(22, 7), CtSlot(19, 3));
  mapping.add(CtSlot(21, 3), CtSlot(19, 4));
  mapping.add(CtSlot(27, 2), CtSlot(19, 5));
  mapping.add(CtSlot(21, 3), CtSlot(19, 6));
  mapping.add(CtSlot(20, 2), CtSlot(19, 7));
  mapping.add(CtSlot(10, 2), CtSlot(20, 0));
  mapping.add(CtSlot(28, 6), CtSlot(20, 1));
  mapping.add(CtSlot(27, 2), CtSlot(20, 2));
  mapping.add(CtSlot(10, 2), CtSlot(20, 3));
  mapping.add(CtSlot(15, 3), CtSlot(20, 4));
  mapping.add(CtSlot(17, 6), CtSlot(20, 5));
  mapping.add(CtSlot(26, 0), CtSlot(20, 6));
  mapping.add(CtSlot(10, 3), CtSlot(20, 7));
  mapping.add(CtSlot(14, 3), CtSlot(21, 0));
  mapping.add(CtSlot(18, 0), CtSlot(21, 1));
  mapping.add(CtSlot(26, 6), CtSlot(21, 2));
  mapping.add(CtSlot(8, 5), CtSlot(21, 3));
  mapping.add(CtSlot(10, 4), CtSlot(21, 4));
  mapping.add(CtSlot(16, 1), CtSlot(21, 5));
  mapping.add(CtSlot(11, 4), CtSlot(21, 6));
  mapping.add(CtSlot(8, 3), CtSlot(21, 7));
  mapping.add(CtSlot(12, 3), CtSlot(22, 0));
  mapping.add(CtSlot(15, 7), CtSlot(22, 1));
  mapping.add(CtSlot(28, 3), CtSlot(22, 2));
  mapping.add(CtSlot(15, 5), CtSlot(22, 3));
  mapping.add(CtSlot(5, 2), CtSlot(22, 4));
  mapping.add(CtSlot(14, 7), CtSlot(22, 5));
  mapping.add(CtSlot(24, 4), CtSlot(22, 6));
  mapping.add(CtSlot(11, 1), CtSlot(22, 7));
  mapping.add(CtSlot(10, 3), CtSlot(23, 0));
  mapping.add(CtSlot(11, 7), CtSlot(23, 1));
  mapping.add(CtSlot(1, 5), CtSlot(23, 2));
  mapping.add(CtSlot(12, 1), CtSlot(23, 3));
  mapping.add(CtSlot(25, 2), CtSlot(23, 4));
  mapping.add(CtSlot(15, 7), CtSlot(23, 5));
  mapping.add(CtSlot(16, 2), CtSlot(23, 6));
  mapping.add(CtSlot(0, 3), CtSlot(23, 7));
  mapping.add(CtSlot(3, 6), CtSlot(24, 0));
  mapping.add(CtSlot(27, 7), CtSlot(24, 1));
  mapping.add(CtSlot(24, 1), CtSlot(24, 2));
  mapping.add(CtSlot(10, 7), CtSlot(24, 3));
  mapping.add(CtSlot(18, 1), CtSlot(24, 4));
  mapping.add(CtSlot(18, 3), CtSlot(24, 5));
  mapping.add(CtSlot(0, 7), CtSlot(24, 6));
  mapping.add(CtSlot(4, 0), CtSlot(24, 7));
  mapping.add(CtSlot(10, 3), CtSlot(25, 0));
  mapping.add(CtSlot(18, 1), CtSlot(25, 1));
  mapping.add(CtSlot(6, 7), CtSlot(25, 2));
  mapping.add(CtSlot(15, 3), CtSlot(25, 3));
  mapping.add(CtSlot(3, 2), CtSlot(25, 4));
  mapping.add(CtSlot(17, 4), CtSlot(25, 5));
  mapping.add(CtSlot(18, 4), CtSlot(25, 6));
  mapping.add(CtSlot(13, 2), CtSlot(25, 7));
  mapping.add(CtSlot(4, 1), CtSlot(26, 0));
  mapping.add(CtSlot(23, 0), CtSlot(26, 1));
  mapping.add(CtSlot(22, 7), CtSlot(26, 2));
  mapping.add(CtSlot(7, 6), CtSlot(26, 3));
  mapping.add(CtSlot(16, 3), CtSlot(26, 4));
  mapping.add(CtSlot(4, 5), CtSlot(26, 5));
  mapping.add(CtSlot(15, 5), CtSlot(26, 6));
  mapping.add(CtSlot(11, 0), CtSlot(26, 7));
  mapping.add(CtSlot(26, 7), CtSlot(27, 0));
  mapping.add(CtSlot(26, 7), CtSlot(27, 1));
  mapping.add(CtSlot(4, 7), CtSlot(27, 2));
  mapping.add(CtSlot(6, 7), CtSlot(27, 3));
  mapping.add(CtSlot(7, 1), CtSlot(27, 4));
  mapping.add(CtSlot(26, 6), CtSlot(27, 5));
  mapping.add(CtSlot(6, 7), CtSlot(27, 6));
  mapping.add(CtSlot(2, 7), CtSlot(27, 7));
  mapping.add(CtSlot(7, 7), CtSlot(28, 0));
  mapping.add(CtSlot(26, 1), CtSlot(28, 1));
  mapping.add(CtSlot(24, 0), CtSlot(28, 2));
  mapping.add(CtSlot(15, 5), CtSlot(28, 3));
  mapping.add(CtSlot(17, 6), CtSlot(28, 4));
  mapping.add(CtSlot(15, 3), CtSlot(28, 5));
  mapping.add(CtSlot(7, 4), CtSlot(28, 6));
  mapping.add(CtSlot(28, 0), CtSlot(28, 7));
  mapping.add(CtSlot(24, 0), CtSlot(29, 0));
  mapping.add(CtSlot(2, 1), CtSlot(29, 1));
  mapping.add(CtSlot(24, 7), CtSlot(29, 2));
  mapping.add(CtSlot(12, 0), CtSlot(29, 3));
  mapping.add(CtSlot(13, 7), CtSlot(29, 4));
  mapping.add(CtSlot(20, 1), CtSlot(29, 5));
  mapping.add(CtSlot(9, 6), CtSlot(29, 6));
  mapping.add(CtSlot(16, 3), CtSlot(29, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_43) {
  int64_t numCts = 30;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(22, 2), CtSlot(0, 0));
  mapping.add(CtSlot(26, 7), CtSlot(0, 1));
  mapping.add(CtSlot(21, 5), CtSlot(0, 2));
  mapping.add(CtSlot(7, 1), CtSlot(0, 3));
  mapping.add(CtSlot(24, 0), CtSlot(0, 4));
  mapping.add(CtSlot(13, 3), CtSlot(0, 5));
  mapping.add(CtSlot(10, 3), CtSlot(0, 6));
  mapping.add(CtSlot(18, 5), CtSlot(0, 7));
  mapping.add(CtSlot(24, 1), CtSlot(1, 0));
  mapping.add(CtSlot(1, 1), CtSlot(1, 1));
  mapping.add(CtSlot(26, 5), CtSlot(1, 2));
  mapping.add(CtSlot(29, 0), CtSlot(1, 3));
  mapping.add(CtSlot(26, 0), CtSlot(1, 4));
  mapping.add(CtSlot(5, 4), CtSlot(1, 5));
  mapping.add(CtSlot(27, 1), CtSlot(1, 6));
  mapping.add(CtSlot(22, 7), CtSlot(1, 7));
  mapping.add(CtSlot(7, 2), CtSlot(2, 0));
  mapping.add(CtSlot(29, 2), CtSlot(2, 1));
  mapping.add(CtSlot(28, 1), CtSlot(2, 2));
  mapping.add(CtSlot(22, 1), CtSlot(2, 3));
  mapping.add(CtSlot(8, 0), CtSlot(2, 4));
  mapping.add(CtSlot(16, 3), CtSlot(2, 5));
  mapping.add(CtSlot(10, 7), CtSlot(2, 6));
  mapping.add(CtSlot(6, 5), CtSlot(2, 7));
  mapping.add(CtSlot(1, 5), CtSlot(3, 0));
  mapping.add(CtSlot(26, 0), CtSlot(3, 1));
  mapping.add(CtSlot(22, 4), CtSlot(3, 2));
  mapping.add(CtSlot(23, 2), CtSlot(3, 3));
  mapping.add(CtSlot(16, 7), CtSlot(3, 4));
  mapping.add(CtSlot(0, 0), CtSlot(3, 5));
  mapping.add(CtSlot(16, 2), CtSlot(3, 6));
  mapping.add(CtSlot(20, 0), CtSlot(3, 7));
  mapping.add(CtSlot(21, 1), CtSlot(4, 0));
  mapping.add(CtSlot(12, 3), CtSlot(4, 1));
  mapping.add(CtSlot(4, 4), CtSlot(4, 2));
  mapping.add(CtSlot(29, 7), CtSlot(4, 3));
  mapping.add(CtSlot(9, 5), CtSlot(4, 4));
  mapping.add(CtSlot(5, 2), CtSlot(4, 5));
  mapping.add(CtSlot(25, 0), CtSlot(4, 6));
  mapping.add(CtSlot(4, 2), CtSlot(4, 7));
  mapping.add(CtSlot(12, 3), CtSlot(5, 0));
  mapping.add(CtSlot(26, 2), CtSlot(5, 1));
  mapping.add(CtSlot(29, 0), CtSlot(5, 2));
  mapping.add(CtSlot(4, 5), CtSlot(5, 3));
  mapping.add(CtSlot(5, 6), CtSlot(5, 4));
  mapping.add(CtSlot(20, 5), CtSlot(5, 5));
  mapping.add(CtSlot(2, 7), CtSlot(5, 6));
  mapping.add(CtSlot(9, 0), CtSlot(5, 7));
  mapping.add(CtSlot(2, 2), CtSlot(6, 0));
  mapping.add(CtSlot(7, 1), CtSlot(6, 1));
  mapping.add(CtSlot(13, 3), CtSlot(6, 2));
  mapping.add(CtSlot(8, 1), CtSlot(6, 3));
  mapping.add(CtSlot(29, 2), CtSlot(6, 4));
  mapping.add(CtSlot(26, 5), CtSlot(6, 5));
  mapping.add(CtSlot(4, 1), CtSlot(6, 6));
  mapping.add(CtSlot(26, 3), CtSlot(6, 7));
  mapping.add(CtSlot(22, 3), CtSlot(7, 0));
  mapping.add(CtSlot(12, 1), CtSlot(7, 1));
  mapping.add(CtSlot(22, 2), CtSlot(7, 2));
  mapping.add(CtSlot(10, 5), CtSlot(7, 3));
  mapping.add(CtSlot(1, 1), CtSlot(7, 4));
  mapping.add(CtSlot(20, 1), CtSlot(7, 5));
  mapping.add(CtSlot(11, 5), CtSlot(7, 6));
  mapping.add(CtSlot(20, 3), CtSlot(7, 7));
  mapping.add(CtSlot(10, 1), CtSlot(8, 0));
  mapping.add(CtSlot(21, 0), CtSlot(8, 1));
  mapping.add(CtSlot(22, 3), CtSlot(8, 2));
  mapping.add(CtSlot(1, 5), CtSlot(8, 3));
  mapping.add(CtSlot(23, 5), CtSlot(8, 4));
  mapping.add(CtSlot(1, 1), CtSlot(8, 5));
  mapping.add(CtSlot(3, 4), CtSlot(8, 6));
  mapping.add(CtSlot(26, 1), CtSlot(8, 7));
  mapping.add(CtSlot(3, 7), CtSlot(9, 0));
  mapping.add(CtSlot(28, 2), CtSlot(9, 1));
  mapping.add(CtSlot(12, 1), CtSlot(9, 2));
  mapping.add(CtSlot(4, 0), CtSlot(9, 3));
  mapping.add(CtSlot(10, 0), CtSlot(9, 4));
  mapping.add(CtSlot(19, 0), CtSlot(9, 5));
  mapping.add(CtSlot(8, 5), CtSlot(9, 6));
  mapping.add(CtSlot(9, 5), CtSlot(9, 7));
  mapping.add(CtSlot(8, 3), CtSlot(10, 0));
  mapping.add(CtSlot(14, 5), CtSlot(10, 1));
  mapping.add(CtSlot(1, 4), CtSlot(10, 2));
  mapping.add(CtSlot(23, 5), CtSlot(10, 3));
  mapping.add(CtSlot(12, 2), CtSlot(10, 4));
  mapping.add(CtSlot(24, 3), CtSlot(10, 5));
  mapping.add(CtSlot(22, 6), CtSlot(10, 6));
  mapping.add(CtSlot(4, 4), CtSlot(10, 7));
  mapping.add(CtSlot(26, 2), CtSlot(11, 0));
  mapping.add(CtSlot(7, 0), CtSlot(11, 1));
  mapping.add(CtSlot(2, 5), CtSlot(11, 2));
  mapping.add(CtSlot(0, 3), CtSlot(11, 3));
  mapping.add(CtSlot(1, 7), CtSlot(11, 4));
  mapping.add(CtSlot(13, 7), CtSlot(11, 5));
  mapping.add(CtSlot(21, 6), CtSlot(11, 6));
  mapping.add(CtSlot(11, 3), CtSlot(11, 7));
  mapping.add(CtSlot(24, 0), CtSlot(12, 0));
  mapping.add(CtSlot(8, 0), CtSlot(12, 1));
  mapping.add(CtSlot(6, 2), CtSlot(12, 2));
  mapping.add(CtSlot(13, 0), CtSlot(12, 3));
  mapping.add(CtSlot(16, 4), CtSlot(12, 4));
  mapping.add(CtSlot(20, 4), CtSlot(12, 5));
  mapping.add(CtSlot(10, 6), CtSlot(12, 6));
  mapping.add(CtSlot(19, 5), CtSlot(12, 7));
  mapping.add(CtSlot(23, 6), CtSlot(13, 0));
  mapping.add(CtSlot(28, 5), CtSlot(13, 1));
  mapping.add(CtSlot(19, 2), CtSlot(13, 2));
  mapping.add(CtSlot(18, 3), CtSlot(13, 3));
  mapping.add(CtSlot(18, 4), CtSlot(13, 4));
  mapping.add(CtSlot(17, 4), CtSlot(13, 5));
  mapping.add(CtSlot(9, 7), CtSlot(13, 6));
  mapping.add(CtSlot(10, 7), CtSlot(13, 7));
  mapping.add(CtSlot(7, 5), CtSlot(14, 0));
  mapping.add(CtSlot(15, 2), CtSlot(14, 1));
  mapping.add(CtSlot(0, 0), CtSlot(14, 2));
  mapping.add(CtSlot(8, 4), CtSlot(14, 3));
  mapping.add(CtSlot(17, 5), CtSlot(14, 4));
  mapping.add(CtSlot(0, 2), CtSlot(14, 5));
  mapping.add(CtSlot(5, 7), CtSlot(14, 6));
  mapping.add(CtSlot(12, 3), CtSlot(14, 7));
  mapping.add(CtSlot(10, 1), CtSlot(15, 0));
  mapping.add(CtSlot(0, 2), CtSlot(15, 1));
  mapping.add(CtSlot(27, 7), CtSlot(15, 2));
  mapping.add(CtSlot(26, 7), CtSlot(15, 3));
  mapping.add(CtSlot(26, 2), CtSlot(15, 4));
  mapping.add(CtSlot(19, 7), CtSlot(15, 5));
  mapping.add(CtSlot(9, 2), CtSlot(15, 6));
  mapping.add(CtSlot(28, 7), CtSlot(15, 7));
  mapping.add(CtSlot(20, 4), CtSlot(16, 0));
  mapping.add(CtSlot(0, 0), CtSlot(16, 1));
  mapping.add(CtSlot(3, 4), CtSlot(16, 2));
  mapping.add(CtSlot(6, 5), CtSlot(16, 3));
  mapping.add(CtSlot(9, 0), CtSlot(16, 4));
  mapping.add(CtSlot(7, 6), CtSlot(16, 5));
  mapping.add(CtSlot(2, 3), CtSlot(16, 6));
  mapping.add(CtSlot(18, 6), CtSlot(16, 7));
  mapping.add(CtSlot(21, 1), CtSlot(17, 0));
  mapping.add(CtSlot(25, 0), CtSlot(17, 1));
  mapping.add(CtSlot(7, 2), CtSlot(17, 2));
  mapping.add(CtSlot(23, 4), CtSlot(17, 3));
  mapping.add(CtSlot(23, 6), CtSlot(17, 4));
  mapping.add(CtSlot(14, 6), CtSlot(17, 5));
  mapping.add(CtSlot(21, 6), CtSlot(17, 6));
  mapping.add(CtSlot(15, 2), CtSlot(17, 7));
  mapping.add(CtSlot(0, 3), CtSlot(18, 0));
  mapping.add(CtSlot(12, 1), CtSlot(18, 1));
  mapping.add(CtSlot(9, 5), CtSlot(18, 2));
  mapping.add(CtSlot(3, 0), CtSlot(18, 3));
  mapping.add(CtSlot(7, 5), CtSlot(18, 4));
  mapping.add(CtSlot(7, 3), CtSlot(18, 5));
  mapping.add(CtSlot(28, 7), CtSlot(18, 6));
  mapping.add(CtSlot(20, 7), CtSlot(18, 7));
  mapping.add(CtSlot(2, 1), CtSlot(19, 0));
  mapping.add(CtSlot(23, 4), CtSlot(19, 1));
  mapping.add(CtSlot(8, 7), CtSlot(19, 2));
  mapping.add(CtSlot(22, 7), CtSlot(19, 3));
  mapping.add(CtSlot(21, 3), CtSlot(19, 4));
  mapping.add(CtSlot(27, 2), CtSlot(19, 5));
  mapping.add(CtSlot(21, 3), CtSlot(19, 6));
  mapping.add(CtSlot(20, 2), CtSlot(19, 7));
  mapping.add(CtSlot(10, 2), CtSlot(20, 0));
  mapping.add(CtSlot(28, 6), CtSlot(20, 1));
  mapping.add(CtSlot(27, 2), CtSlot(20, 2));
  mapping.add(CtSlot(10, 2), CtSlot(20, 3));
  mapping.add(CtSlot(15, 3), CtSlot(20, 4));
  mapping.add(CtSlot(17, 6), CtSlot(20, 5));
  mapping.add(CtSlot(26, 0), CtSlot(20, 6));
  mapping.add(CtSlot(10, 3), CtSlot(20, 7));
  mapping.add(CtSlot(14, 3), CtSlot(21, 0));
  mapping.add(CtSlot(18, 0), CtSlot(21, 1));
  mapping.add(CtSlot(26, 6), CtSlot(21, 2));
  mapping.add(CtSlot(8, 5), CtSlot(21, 3));
  mapping.add(CtSlot(10, 4), CtSlot(21, 4));
  mapping.add(CtSlot(16, 1), CtSlot(21, 5));
  mapping.add(CtSlot(11, 4), CtSlot(21, 6));
  mapping.add(CtSlot(8, 3), CtSlot(21, 7));
  mapping.add(CtSlot(12, 3), CtSlot(22, 0));
  mapping.add(CtSlot(15, 7), CtSlot(22, 1));
  mapping.add(CtSlot(28, 3), CtSlot(22, 2));
  mapping.add(CtSlot(15, 5), CtSlot(22, 3));
  mapping.add(CtSlot(5, 2), CtSlot(22, 4));
  mapping.add(CtSlot(14, 7), CtSlot(22, 5));
  mapping.add(CtSlot(24, 4), CtSlot(22, 6));
  mapping.add(CtSlot(11, 1), CtSlot(22, 7));
  mapping.add(CtSlot(10, 3), CtSlot(23, 0));
  mapping.add(CtSlot(11, 7), CtSlot(23, 1));
  mapping.add(CtSlot(1, 5), CtSlot(23, 2));
  mapping.add(CtSlot(12, 1), CtSlot(23, 3));
  mapping.add(CtSlot(25, 2), CtSlot(23, 4));
  mapping.add(CtSlot(15, 7), CtSlot(23, 5));
  mapping.add(CtSlot(16, 2), CtSlot(23, 6));
  mapping.add(CtSlot(0, 3), CtSlot(23, 7));
  mapping.add(CtSlot(3, 6), CtSlot(24, 0));
  mapping.add(CtSlot(27, 7), CtSlot(24, 1));
  mapping.add(CtSlot(24, 1), CtSlot(24, 2));
  mapping.add(CtSlot(10, 7), CtSlot(24, 3));
  mapping.add(CtSlot(18, 1), CtSlot(24, 4));
  mapping.add(CtSlot(18, 3), CtSlot(24, 5));
  mapping.add(CtSlot(0, 7), CtSlot(24, 6));
  mapping.add(CtSlot(4, 0), CtSlot(24, 7));
  mapping.add(CtSlot(10, 3), CtSlot(25, 0));
  mapping.add(CtSlot(18, 1), CtSlot(25, 1));
  mapping.add(CtSlot(6, 7), CtSlot(25, 2));
  mapping.add(CtSlot(15, 3), CtSlot(25, 3));
  mapping.add(CtSlot(3, 2), CtSlot(25, 4));
  mapping.add(CtSlot(17, 4), CtSlot(25, 5));
  mapping.add(CtSlot(18, 4), CtSlot(25, 6));
  mapping.add(CtSlot(13, 2), CtSlot(25, 7));
  mapping.add(CtSlot(4, 1), CtSlot(26, 0));
  mapping.add(CtSlot(23, 0), CtSlot(26, 1));
  mapping.add(CtSlot(22, 7), CtSlot(26, 2));
  mapping.add(CtSlot(7, 6), CtSlot(26, 3));
  mapping.add(CtSlot(16, 3), CtSlot(26, 4));
  mapping.add(CtSlot(4, 5), CtSlot(26, 5));
  mapping.add(CtSlot(15, 5), CtSlot(26, 6));
  mapping.add(CtSlot(11, 0), CtSlot(26, 7));
  mapping.add(CtSlot(26, 7), CtSlot(27, 0));
  mapping.add(CtSlot(26, 7), CtSlot(27, 1));
  mapping.add(CtSlot(4, 7), CtSlot(27, 2));
  mapping.add(CtSlot(6, 7), CtSlot(27, 3));
  mapping.add(CtSlot(7, 1), CtSlot(27, 4));
  mapping.add(CtSlot(26, 6), CtSlot(27, 5));
  mapping.add(CtSlot(6, 7), CtSlot(27, 6));
  mapping.add(CtSlot(2, 7), CtSlot(27, 7));
  mapping.add(CtSlot(7, 7), CtSlot(28, 0));
  mapping.add(CtSlot(26, 1), CtSlot(28, 1));
  mapping.add(CtSlot(24, 0), CtSlot(28, 2));
  mapping.add(CtSlot(15, 5), CtSlot(28, 3));
  mapping.add(CtSlot(17, 6), CtSlot(28, 4));
  mapping.add(CtSlot(15, 3), CtSlot(28, 5));
  mapping.add(CtSlot(7, 4), CtSlot(28, 6));
  mapping.add(CtSlot(28, 0), CtSlot(28, 7));
  mapping.add(CtSlot(24, 0), CtSlot(29, 0));
  mapping.add(CtSlot(2, 1), CtSlot(29, 1));
  mapping.add(CtSlot(24, 7), CtSlot(29, 2));
  mapping.add(CtSlot(12, 0), CtSlot(29, 3));
  mapping.add(CtSlot(13, 7), CtSlot(29, 4));
  mapping.add(CtSlot(20, 1), CtSlot(29, 5));
  mapping.add(CtSlot(9, 6), CtSlot(29, 6));
  mapping.add(CtSlot(16, 3), CtSlot(29, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_44) {
  int64_t numCts = 30;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(22, 2), CtSlot(0, 0));
  mapping.add(CtSlot(26, 7), CtSlot(0, 1));
  mapping.add(CtSlot(21, 5), CtSlot(0, 2));
  mapping.add(CtSlot(7, 1), CtSlot(0, 3));
  mapping.add(CtSlot(24, 0), CtSlot(0, 4));
  mapping.add(CtSlot(13, 3), CtSlot(0, 5));
  mapping.add(CtSlot(10, 3), CtSlot(0, 6));
  mapping.add(CtSlot(18, 5), CtSlot(0, 7));
  mapping.add(CtSlot(24, 1), CtSlot(1, 0));
  mapping.add(CtSlot(1, 1), CtSlot(1, 1));
  mapping.add(CtSlot(26, 5), CtSlot(1, 2));
  mapping.add(CtSlot(29, 0), CtSlot(1, 3));
  mapping.add(CtSlot(26, 0), CtSlot(1, 4));
  mapping.add(CtSlot(5, 4), CtSlot(1, 5));
  mapping.add(CtSlot(27, 1), CtSlot(1, 6));
  mapping.add(CtSlot(22, 7), CtSlot(1, 7));
  mapping.add(CtSlot(7, 2), CtSlot(2, 0));
  mapping.add(CtSlot(29, 2), CtSlot(2, 1));
  mapping.add(CtSlot(28, 1), CtSlot(2, 2));
  mapping.add(CtSlot(22, 1), CtSlot(2, 3));
  mapping.add(CtSlot(8, 0), CtSlot(2, 4));
  mapping.add(CtSlot(16, 3), CtSlot(2, 5));
  mapping.add(CtSlot(10, 7), CtSlot(2, 6));
  mapping.add(CtSlot(6, 5), CtSlot(2, 7));
  mapping.add(CtSlot(1, 5), CtSlot(3, 0));
  mapping.add(CtSlot(26, 0), CtSlot(3, 1));
  mapping.add(CtSlot(22, 4), CtSlot(3, 2));
  mapping.add(CtSlot(23, 2), CtSlot(3, 3));
  mapping.add(CtSlot(16, 7), CtSlot(3, 4));
  mapping.add(CtSlot(0, 0), CtSlot(3, 5));
  mapping.add(CtSlot(16, 2), CtSlot(3, 6));
  mapping.add(CtSlot(20, 0), CtSlot(3, 7));
  mapping.add(CtSlot(21, 1), CtSlot(4, 0));
  mapping.add(CtSlot(12, 3), CtSlot(4, 1));
  mapping.add(CtSlot(4, 4), CtSlot(4, 2));
  mapping.add(CtSlot(29, 7), CtSlot(4, 3));
  mapping.add(CtSlot(9, 5), CtSlot(4, 4));
  mapping.add(CtSlot(5, 2), CtSlot(4, 5));
  mapping.add(CtSlot(25, 0), CtSlot(4, 6));
  mapping.add(CtSlot(4, 2), CtSlot(4, 7));
  mapping.add(CtSlot(12, 3), CtSlot(5, 0));
  mapping.add(CtSlot(26, 2), CtSlot(5, 1));
  mapping.add(CtSlot(29, 0), CtSlot(5, 2));
  mapping.add(CtSlot(4, 5), CtSlot(5, 3));
  mapping.add(CtSlot(5, 6), CtSlot(5, 4));
  mapping.add(CtSlot(20, 5), CtSlot(5, 5));
  mapping.add(CtSlot(2, 7), CtSlot(5, 6));
  mapping.add(CtSlot(9, 0), CtSlot(5, 7));
  mapping.add(CtSlot(2, 2), CtSlot(6, 0));
  mapping.add(CtSlot(7, 1), CtSlot(6, 1));
  mapping.add(CtSlot(13, 3), CtSlot(6, 2));
  mapping.add(CtSlot(8, 1), CtSlot(6, 3));
  mapping.add(CtSlot(29, 2), CtSlot(6, 4));
  mapping.add(CtSlot(26, 5), CtSlot(6, 5));
  mapping.add(CtSlot(4, 1), CtSlot(6, 6));
  mapping.add(CtSlot(26, 3), CtSlot(6, 7));
  mapping.add(CtSlot(22, 3), CtSlot(7, 0));
  mapping.add(CtSlot(12, 1), CtSlot(7, 1));
  mapping.add(CtSlot(22, 2), CtSlot(7, 2));
  mapping.add(CtSlot(10, 5), CtSlot(7, 3));
  mapping.add(CtSlot(1, 1), CtSlot(7, 4));
  mapping.add(CtSlot(20, 1), CtSlot(7, 5));
  mapping.add(CtSlot(11, 5), CtSlot(7, 6));
  mapping.add(CtSlot(20, 3), CtSlot(7, 7));
  mapping.add(CtSlot(10, 1), CtSlot(8, 0));
  mapping.add(CtSlot(21, 0), CtSlot(8, 1));
  mapping.add(CtSlot(22, 3), CtSlot(8, 2));
  mapping.add(CtSlot(1, 5), CtSlot(8, 3));
  mapping.add(CtSlot(23, 5), CtSlot(8, 4));
  mapping.add(CtSlot(1, 1), CtSlot(8, 5));
  mapping.add(CtSlot(3, 4), CtSlot(8, 6));
  mapping.add(CtSlot(26, 1), CtSlot(8, 7));
  mapping.add(CtSlot(3, 7), CtSlot(9, 0));
  mapping.add(CtSlot(28, 2), CtSlot(9, 1));
  mapping.add(CtSlot(12, 1), CtSlot(9, 2));
  mapping.add(CtSlot(4, 0), CtSlot(9, 3));
  mapping.add(CtSlot(10, 0), CtSlot(9, 4));
  mapping.add(CtSlot(19, 0), CtSlot(9, 5));
  mapping.add(CtSlot(8, 5), CtSlot(9, 6));
  mapping.add(CtSlot(9, 5), CtSlot(9, 7));
  mapping.add(CtSlot(8, 3), CtSlot(10, 0));
  mapping.add(CtSlot(14, 5), CtSlot(10, 1));
  mapping.add(CtSlot(1, 0), CtSlot(10, 2));
  mapping.add(CtSlot(23, 5), CtSlot(10, 3));
  mapping.add(CtSlot(12, 2), CtSlot(10, 4));
  mapping.add(CtSlot(24, 3), CtSlot(10, 5));
  mapping.add(CtSlot(22, 6), CtSlot(10, 6));
  mapping.add(CtSlot(4, 4), CtSlot(10, 7));
  mapping.add(CtSlot(26, 2), CtSlot(11, 0));
  mapping.add(CtSlot(7, 0), CtSlot(11, 1));
  mapping.add(CtSlot(2, 5), CtSlot(11, 2));
  mapping.add(CtSlot(0, 3), CtSlot(11, 3));
  mapping.add(CtSlot(1, 7), CtSlot(11, 4));
  mapping.add(CtSlot(13, 7), CtSlot(11, 5));
  mapping.add(CtSlot(21, 6), CtSlot(11, 6));
  mapping.add(CtSlot(11, 3), CtSlot(11, 7));
  mapping.add(CtSlot(24, 0), CtSlot(12, 0));
  mapping.add(CtSlot(8, 0), CtSlot(12, 1));
  mapping.add(CtSlot(6, 2), CtSlot(12, 2));
  mapping.add(CtSlot(13, 0), CtSlot(12, 3));
  mapping.add(CtSlot(16, 4), CtSlot(12, 4));
  mapping.add(CtSlot(20, 4), CtSlot(12, 5));
  mapping.add(CtSlot(10, 6), CtSlot(12, 6));
  mapping.add(CtSlot(19, 5), CtSlot(12, 7));
  mapping.add(CtSlot(23, 6), CtSlot(13, 0));
  mapping.add(CtSlot(28, 5), CtSlot(13, 1));
  mapping.add(CtSlot(19, 2), CtSlot(13, 2));
  mapping.add(CtSlot(18, 3), CtSlot(13, 3));
  mapping.add(CtSlot(18, 4), CtSlot(13, 4));
  mapping.add(CtSlot(17, 4), CtSlot(13, 5));
  mapping.add(CtSlot(9, 7), CtSlot(13, 6));
  mapping.add(CtSlot(10, 7), CtSlot(13, 7));
  mapping.add(CtSlot(7, 5), CtSlot(14, 0));
  mapping.add(CtSlot(15, 2), CtSlot(14, 1));
  mapping.add(CtSlot(0, 0), CtSlot(14, 2));
  mapping.add(CtSlot(8, 4), CtSlot(14, 3));
  mapping.add(CtSlot(17, 5), CtSlot(14, 4));
  mapping.add(CtSlot(0, 2), CtSlot(14, 5));
  mapping.add(CtSlot(5, 7), CtSlot(14, 6));
  mapping.add(CtSlot(12, 3), CtSlot(14, 7));
  mapping.add(CtSlot(10, 1), CtSlot(15, 0));
  mapping.add(CtSlot(0, 2), CtSlot(15, 1));
  mapping.add(CtSlot(27, 7), CtSlot(15, 2));
  mapping.add(CtSlot(26, 7), CtSlot(15, 3));
  mapping.add(CtSlot(26, 2), CtSlot(15, 4));
  mapping.add(CtSlot(19, 7), CtSlot(15, 5));
  mapping.add(CtSlot(9, 2), CtSlot(15, 6));
  mapping.add(CtSlot(28, 7), CtSlot(15, 7));
  mapping.add(CtSlot(20, 4), CtSlot(16, 0));
  mapping.add(CtSlot(0, 0), CtSlot(16, 1));
  mapping.add(CtSlot(3, 4), CtSlot(16, 2));
  mapping.add(CtSlot(6, 5), CtSlot(16, 3));
  mapping.add(CtSlot(9, 0), CtSlot(16, 4));
  mapping.add(CtSlot(7, 6), CtSlot(16, 5));
  mapping.add(CtSlot(2, 3), CtSlot(16, 6));
  mapping.add(CtSlot(18, 6), CtSlot(16, 7));
  mapping.add(CtSlot(21, 1), CtSlot(17, 0));
  mapping.add(CtSlot(25, 0), CtSlot(17, 1));
  mapping.add(CtSlot(7, 2), CtSlot(17, 2));
  mapping.add(CtSlot(23, 4), CtSlot(17, 3));
  mapping.add(CtSlot(23, 6), CtSlot(17, 4));
  mapping.add(CtSlot(14, 6), CtSlot(17, 5));
  mapping.add(CtSlot(21, 6), CtSlot(17, 6));
  mapping.add(CtSlot(15, 2), CtSlot(17, 7));
  mapping.add(CtSlot(0, 3), CtSlot(18, 0));
  mapping.add(CtSlot(12, 1), CtSlot(18, 1));
  mapping.add(CtSlot(9, 5), CtSlot(18, 2));
  mapping.add(CtSlot(3, 0), CtSlot(18, 3));
  mapping.add(CtSlot(7, 5), CtSlot(18, 4));
  mapping.add(CtSlot(7, 3), CtSlot(18, 5));
  mapping.add(CtSlot(28, 7), CtSlot(18, 6));
  mapping.add(CtSlot(20, 7), CtSlot(18, 7));
  mapping.add(CtSlot(2, 1), CtSlot(19, 0));
  mapping.add(CtSlot(23, 4), CtSlot(19, 1));
  mapping.add(CtSlot(8, 7), CtSlot(19, 2));
  mapping.add(CtSlot(22, 7), CtSlot(19, 3));
  mapping.add(CtSlot(21, 3), CtSlot(19, 4));
  mapping.add(CtSlot(27, 2), CtSlot(19, 5));
  mapping.add(CtSlot(21, 3), CtSlot(19, 6));
  mapping.add(CtSlot(20, 2), CtSlot(19, 7));
  mapping.add(CtSlot(10, 2), CtSlot(20, 0));
  mapping.add(CtSlot(28, 6), CtSlot(20, 1));
  mapping.add(CtSlot(27, 2), CtSlot(20, 2));
  mapping.add(CtSlot(10, 2), CtSlot(20, 3));
  mapping.add(CtSlot(15, 3), CtSlot(20, 4));
  mapping.add(CtSlot(17, 6), CtSlot(20, 5));
  mapping.add(CtSlot(26, 0), CtSlot(20, 6));
  mapping.add(CtSlot(10, 3), CtSlot(20, 7));
  mapping.add(CtSlot(14, 3), CtSlot(21, 0));
  mapping.add(CtSlot(18, 0), CtSlot(21, 1));
  mapping.add(CtSlot(26, 6), CtSlot(21, 2));
  mapping.add(CtSlot(8, 5), CtSlot(21, 3));
  mapping.add(CtSlot(10, 4), CtSlot(21, 4));
  mapping.add(CtSlot(16, 1), CtSlot(21, 5));
  mapping.add(CtSlot(11, 4), CtSlot(21, 6));
  mapping.add(CtSlot(8, 3), CtSlot(21, 7));
  mapping.add(CtSlot(12, 3), CtSlot(22, 0));
  mapping.add(CtSlot(15, 7), CtSlot(22, 1));
  mapping.add(CtSlot(28, 3), CtSlot(22, 2));
  mapping.add(CtSlot(15, 5), CtSlot(22, 3));
  mapping.add(CtSlot(5, 2), CtSlot(22, 4));
  mapping.add(CtSlot(14, 7), CtSlot(22, 5));
  mapping.add(CtSlot(24, 4), CtSlot(22, 6));
  mapping.add(CtSlot(11, 1), CtSlot(22, 7));
  mapping.add(CtSlot(10, 3), CtSlot(23, 0));
  mapping.add(CtSlot(11, 7), CtSlot(23, 1));
  mapping.add(CtSlot(1, 5), CtSlot(23, 2));
  mapping.add(CtSlot(12, 1), CtSlot(23, 3));
  mapping.add(CtSlot(25, 2), CtSlot(23, 4));
  mapping.add(CtSlot(15, 7), CtSlot(23, 5));
  mapping.add(CtSlot(16, 2), CtSlot(23, 6));
  mapping.add(CtSlot(0, 3), CtSlot(23, 7));
  mapping.add(CtSlot(3, 6), CtSlot(24, 0));
  mapping.add(CtSlot(27, 7), CtSlot(24, 1));
  mapping.add(CtSlot(24, 1), CtSlot(24, 2));
  mapping.add(CtSlot(10, 7), CtSlot(24, 3));
  mapping.add(CtSlot(18, 1), CtSlot(24, 4));
  mapping.add(CtSlot(18, 3), CtSlot(24, 5));
  mapping.add(CtSlot(0, 7), CtSlot(24, 6));
  mapping.add(CtSlot(4, 0), CtSlot(24, 7));
  mapping.add(CtSlot(10, 3), CtSlot(25, 0));
  mapping.add(CtSlot(18, 1), CtSlot(25, 1));
  mapping.add(CtSlot(6, 7), CtSlot(25, 2));
  mapping.add(CtSlot(15, 3), CtSlot(25, 3));
  mapping.add(CtSlot(3, 2), CtSlot(25, 4));
  mapping.add(CtSlot(17, 4), CtSlot(25, 5));
  mapping.add(CtSlot(18, 4), CtSlot(25, 6));
  mapping.add(CtSlot(13, 2), CtSlot(25, 7));
  mapping.add(CtSlot(4, 1), CtSlot(26, 0));
  mapping.add(CtSlot(23, 0), CtSlot(26, 1));
  mapping.add(CtSlot(22, 7), CtSlot(26, 2));
  mapping.add(CtSlot(7, 6), CtSlot(26, 3));
  mapping.add(CtSlot(16, 3), CtSlot(26, 4));
  mapping.add(CtSlot(4, 5), CtSlot(26, 5));
  mapping.add(CtSlot(15, 5), CtSlot(26, 6));
  mapping.add(CtSlot(11, 0), CtSlot(26, 7));
  mapping.add(CtSlot(26, 7), CtSlot(27, 0));
  mapping.add(CtSlot(26, 7), CtSlot(27, 1));
  mapping.add(CtSlot(4, 7), CtSlot(27, 2));
  mapping.add(CtSlot(6, 7), CtSlot(27, 3));
  mapping.add(CtSlot(7, 1), CtSlot(27, 4));
  mapping.add(CtSlot(26, 6), CtSlot(27, 5));
  mapping.add(CtSlot(6, 7), CtSlot(27, 6));
  mapping.add(CtSlot(2, 7), CtSlot(27, 7));
  mapping.add(CtSlot(7, 7), CtSlot(28, 0));
  mapping.add(CtSlot(26, 1), CtSlot(28, 1));
  mapping.add(CtSlot(24, 0), CtSlot(28, 2));
  mapping.add(CtSlot(15, 5), CtSlot(28, 3));
  mapping.add(CtSlot(17, 6), CtSlot(28, 4));
  mapping.add(CtSlot(15, 3), CtSlot(28, 5));
  mapping.add(CtSlot(7, 4), CtSlot(28, 6));
  mapping.add(CtSlot(28, 0), CtSlot(28, 7));
  mapping.add(CtSlot(24, 0), CtSlot(29, 0));
  mapping.add(CtSlot(2, 1), CtSlot(29, 1));
  mapping.add(CtSlot(24, 7), CtSlot(29, 2));
  mapping.add(CtSlot(12, 0), CtSlot(29, 3));
  mapping.add(CtSlot(13, 7), CtSlot(29, 4));
  mapping.add(CtSlot(20, 1), CtSlot(29, 5));
  mapping.add(CtSlot(9, 6), CtSlot(29, 6));
  mapping.add(CtSlot(16, 3), CtSlot(29, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_45) {
  int64_t numCts = 30;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(22, 2), CtSlot(0, 0));
  mapping.add(CtSlot(26, 7), CtSlot(0, 1));
  mapping.add(CtSlot(21, 5), CtSlot(0, 2));
  mapping.add(CtSlot(7, 1), CtSlot(0, 3));
  mapping.add(CtSlot(24, 0), CtSlot(0, 4));
  mapping.add(CtSlot(13, 3), CtSlot(0, 5));
  mapping.add(CtSlot(10, 3), CtSlot(0, 6));
  mapping.add(CtSlot(18, 5), CtSlot(0, 7));
  mapping.add(CtSlot(24, 1), CtSlot(1, 0));
  mapping.add(CtSlot(1, 1), CtSlot(1, 1));
  mapping.add(CtSlot(26, 5), CtSlot(1, 2));
  mapping.add(CtSlot(29, 0), CtSlot(1, 3));
  mapping.add(CtSlot(26, 0), CtSlot(1, 4));
  mapping.add(CtSlot(5, 4), CtSlot(1, 5));
  mapping.add(CtSlot(27, 1), CtSlot(1, 6));
  mapping.add(CtSlot(22, 7), CtSlot(1, 7));
  mapping.add(CtSlot(7, 2), CtSlot(2, 0));
  mapping.add(CtSlot(29, 2), CtSlot(2, 1));
  mapping.add(CtSlot(28, 1), CtSlot(2, 2));
  mapping.add(CtSlot(22, 1), CtSlot(2, 3));
  mapping.add(CtSlot(8, 0), CtSlot(2, 4));
  mapping.add(CtSlot(16, 3), CtSlot(2, 5));
  mapping.add(CtSlot(10, 7), CtSlot(2, 6));
  mapping.add(CtSlot(6, 5), CtSlot(2, 7));
  mapping.add(CtSlot(1, 5), CtSlot(3, 0));
  mapping.add(CtSlot(26, 0), CtSlot(3, 1));
  mapping.add(CtSlot(22, 4), CtSlot(3, 2));
  mapping.add(CtSlot(23, 2), CtSlot(3, 3));
  mapping.add(CtSlot(16, 7), CtSlot(3, 4));
  mapping.add(CtSlot(0, 0), CtSlot(3, 5));
  mapping.add(CtSlot(16, 2), CtSlot(3, 6));
  mapping.add(CtSlot(20, 0), CtSlot(3, 7));
  mapping.add(CtSlot(21, 1), CtSlot(4, 0));
  mapping.add(CtSlot(12, 3), CtSlot(4, 1));
  mapping.add(CtSlot(4, 4), CtSlot(4, 2));
  mapping.add(CtSlot(29, 7), CtSlot(4, 3));
  mapping.add(CtSlot(9, 5), CtSlot(4, 4));
  mapping.add(CtSlot(5, 2), CtSlot(4, 5));
  mapping.add(CtSlot(25, 0), CtSlot(4, 6));
  mapping.add(CtSlot(4, 2), CtSlot(4, 7));
  mapping.add(CtSlot(12, 3), CtSlot(5, 0));
  mapping.add(CtSlot(26, 2), CtSlot(5, 1));
  mapping.add(CtSlot(29, 0), CtSlot(5, 2));
  mapping.add(CtSlot(4, 5), CtSlot(5, 3));
  mapping.add(CtSlot(5, 6), CtSlot(5, 4));
  mapping.add(CtSlot(20, 5), CtSlot(5, 5));
  mapping.add(CtSlot(2, 7), CtSlot(5, 6));
  mapping.add(CtSlot(9, 0), CtSlot(5, 7));
  mapping.add(CtSlot(2, 2), CtSlot(6, 0));
  mapping.add(CtSlot(7, 1), CtSlot(6, 1));
  mapping.add(CtSlot(13, 3), CtSlot(6, 2));
  mapping.add(CtSlot(8, 1), CtSlot(6, 3));
  mapping.add(CtSlot(29, 2), CtSlot(6, 4));
  mapping.add(CtSlot(26, 5), CtSlot(6, 5));
  mapping.add(CtSlot(4, 1), CtSlot(6, 6));
  mapping.add(CtSlot(26, 3), CtSlot(6, 7));
  mapping.add(CtSlot(22, 3), CtSlot(7, 0));
  mapping.add(CtSlot(12, 1), CtSlot(7, 1));
  mapping.add(CtSlot(22, 2), CtSlot(7, 2));
  mapping.add(CtSlot(10, 5), CtSlot(7, 3));
  mapping.add(CtSlot(1, 1), CtSlot(7, 4));
  mapping.add(CtSlot(20, 1), CtSlot(7, 5));
  mapping.add(CtSlot(11, 5), CtSlot(7, 6));
  mapping.add(CtSlot(20, 3), CtSlot(7, 7));
  mapping.add(CtSlot(10, 1), CtSlot(8, 0));
  mapping.add(CtSlot(21, 0), CtSlot(8, 1));
  mapping.add(CtSlot(22, 3), CtSlot(8, 2));
  mapping.add(CtSlot(1, 5), CtSlot(8, 3));
  mapping.add(CtSlot(23, 5), CtSlot(8, 4));
  mapping.add(CtSlot(1, 1), CtSlot(8, 5));
  mapping.add(CtSlot(3, 4), CtSlot(8, 6));
  mapping.add(CtSlot(26, 1), CtSlot(8, 7));
  mapping.add(CtSlot(3, 7), CtSlot(9, 0));
  mapping.add(CtSlot(28, 2), CtSlot(9, 1));
  mapping.add(CtSlot(12, 1), CtSlot(9, 2));
  mapping.add(CtSlot(4, 0), CtSlot(9, 3));
  mapping.add(CtSlot(10, 0), CtSlot(9, 4));
  mapping.add(CtSlot(19, 0), CtSlot(9, 5));
  mapping.add(CtSlot(8, 5), CtSlot(9, 6));
  mapping.add(CtSlot(9, 5), CtSlot(9, 7));
  mapping.add(CtSlot(8, 3), CtSlot(10, 0));
  mapping.add(CtSlot(14, 5), CtSlot(10, 1));
  mapping.add(CtSlot(1, 0), CtSlot(10, 2));
  mapping.add(CtSlot(23, 5), CtSlot(10, 3));
  mapping.add(CtSlot(12, 2), CtSlot(10, 4));
  mapping.add(CtSlot(24, 3), CtSlot(10, 5));
  mapping.add(CtSlot(22, 6), CtSlot(10, 6));
  mapping.add(CtSlot(4, 4), CtSlot(10, 7));
  mapping.add(CtSlot(26, 2), CtSlot(11, 0));
  mapping.add(CtSlot(7, 0), CtSlot(11, 1));
  mapping.add(CtSlot(2, 5), CtSlot(11, 2));
  mapping.add(CtSlot(0, 3), CtSlot(11, 3));
  mapping.add(CtSlot(1, 7), CtSlot(11, 4));
  mapping.add(CtSlot(13, 7), CtSlot(11, 5));
  mapping.add(CtSlot(21, 6), CtSlot(11, 6));
  mapping.add(CtSlot(11, 3), CtSlot(11, 7));
  mapping.add(CtSlot(24, 0), CtSlot(12, 0));
  mapping.add(CtSlot(8, 0), CtSlot(12, 1));
  mapping.add(CtSlot(6, 2), CtSlot(12, 2));
  mapping.add(CtSlot(13, 0), CtSlot(12, 3));
  mapping.add(CtSlot(16, 4), CtSlot(12, 4));
  mapping.add(CtSlot(20, 4), CtSlot(12, 5));
  mapping.add(CtSlot(10, 6), CtSlot(12, 6));
  mapping.add(CtSlot(19, 5), CtSlot(12, 7));
  mapping.add(CtSlot(23, 6), CtSlot(13, 0));
  mapping.add(CtSlot(28, 5), CtSlot(13, 1));
  mapping.add(CtSlot(19, 2), CtSlot(13, 2));
  mapping.add(CtSlot(18, 3), CtSlot(13, 3));
  mapping.add(CtSlot(18, 4), CtSlot(13, 4));
  mapping.add(CtSlot(17, 4), CtSlot(13, 5));
  mapping.add(CtSlot(9, 7), CtSlot(13, 6));
  mapping.add(CtSlot(10, 7), CtSlot(13, 7));
  mapping.add(CtSlot(7, 5), CtSlot(14, 0));
  mapping.add(CtSlot(15, 2), CtSlot(14, 1));
  mapping.add(CtSlot(0, 0), CtSlot(14, 2));
  mapping.add(CtSlot(8, 4), CtSlot(14, 3));
  mapping.add(CtSlot(17, 5), CtSlot(14, 4));
  mapping.add(CtSlot(0, 2), CtSlot(14, 5));
  mapping.add(CtSlot(5, 7), CtSlot(14, 6));
  mapping.add(CtSlot(10, 3), CtSlot(14, 7));
  mapping.add(CtSlot(10, 1), CtSlot(15, 0));
  mapping.add(CtSlot(0, 2), CtSlot(15, 1));
  mapping.add(CtSlot(27, 7), CtSlot(15, 2));
  mapping.add(CtSlot(26, 7), CtSlot(15, 3));
  mapping.add(CtSlot(26, 2), CtSlot(15, 4));
  mapping.add(CtSlot(19, 7), CtSlot(15, 5));
  mapping.add(CtSlot(9, 2), CtSlot(15, 6));
  mapping.add(CtSlot(28, 7), CtSlot(15, 7));
  mapping.add(CtSlot(20, 4), CtSlot(16, 0));
  mapping.add(CtSlot(0, 0), CtSlot(16, 1));
  mapping.add(CtSlot(3, 4), CtSlot(16, 2));
  mapping.add(CtSlot(6, 5), CtSlot(16, 3));
  mapping.add(CtSlot(9, 0), CtSlot(16, 4));
  mapping.add(CtSlot(7, 6), CtSlot(16, 5));
  mapping.add(CtSlot(2, 3), CtSlot(16, 6));
  mapping.add(CtSlot(18, 6), CtSlot(16, 7));
  mapping.add(CtSlot(21, 1), CtSlot(17, 0));
  mapping.add(CtSlot(25, 0), CtSlot(17, 1));
  mapping.add(CtSlot(7, 2), CtSlot(17, 2));
  mapping.add(CtSlot(23, 4), CtSlot(17, 3));
  mapping.add(CtSlot(23, 6), CtSlot(17, 4));
  mapping.add(CtSlot(14, 6), CtSlot(17, 5));
  mapping.add(CtSlot(21, 6), CtSlot(17, 6));
  mapping.add(CtSlot(15, 2), CtSlot(17, 7));
  mapping.add(CtSlot(0, 3), CtSlot(18, 0));
  mapping.add(CtSlot(12, 1), CtSlot(18, 1));
  mapping.add(CtSlot(9, 5), CtSlot(18, 2));
  mapping.add(CtSlot(3, 0), CtSlot(18, 3));
  mapping.add(CtSlot(7, 5), CtSlot(18, 4));
  mapping.add(CtSlot(7, 3), CtSlot(18, 5));
  mapping.add(CtSlot(28, 7), CtSlot(18, 6));
  mapping.add(CtSlot(20, 7), CtSlot(18, 7));
  mapping.add(CtSlot(2, 1), CtSlot(19, 0));
  mapping.add(CtSlot(23, 4), CtSlot(19, 1));
  mapping.add(CtSlot(8, 7), CtSlot(19, 2));
  mapping.add(CtSlot(22, 7), CtSlot(19, 3));
  mapping.add(CtSlot(21, 3), CtSlot(19, 4));
  mapping.add(CtSlot(27, 2), CtSlot(19, 5));
  mapping.add(CtSlot(21, 3), CtSlot(19, 6));
  mapping.add(CtSlot(20, 2), CtSlot(19, 7));
  mapping.add(CtSlot(10, 2), CtSlot(20, 0));
  mapping.add(CtSlot(28, 6), CtSlot(20, 1));
  mapping.add(CtSlot(27, 2), CtSlot(20, 2));
  mapping.add(CtSlot(10, 2), CtSlot(20, 3));
  mapping.add(CtSlot(15, 3), CtSlot(20, 4));
  mapping.add(CtSlot(17, 6), CtSlot(20, 5));
  mapping.add(CtSlot(26, 0), CtSlot(20, 6));
  mapping.add(CtSlot(10, 3), CtSlot(20, 7));
  mapping.add(CtSlot(14, 3), CtSlot(21, 0));
  mapping.add(CtSlot(18, 0), CtSlot(21, 1));
  mapping.add(CtSlot(26, 6), CtSlot(21, 2));
  mapping.add(CtSlot(8, 5), CtSlot(21, 3));
  mapping.add(CtSlot(10, 4), CtSlot(21, 4));
  mapping.add(CtSlot(16, 1), CtSlot(21, 5));
  mapping.add(CtSlot(11, 4), CtSlot(21, 6));
  mapping.add(CtSlot(8, 3), CtSlot(21, 7));
  mapping.add(CtSlot(12, 3), CtSlot(22, 0));
  mapping.add(CtSlot(15, 7), CtSlot(22, 1));
  mapping.add(CtSlot(28, 3), CtSlot(22, 2));
  mapping.add(CtSlot(15, 5), CtSlot(22, 3));
  mapping.add(CtSlot(5, 2), CtSlot(22, 4));
  mapping.add(CtSlot(14, 7), CtSlot(22, 5));
  mapping.add(CtSlot(24, 4), CtSlot(22, 6));
  mapping.add(CtSlot(11, 1), CtSlot(22, 7));
  mapping.add(CtSlot(10, 3), CtSlot(23, 0));
  mapping.add(CtSlot(11, 7), CtSlot(23, 1));
  mapping.add(CtSlot(1, 5), CtSlot(23, 2));
  mapping.add(CtSlot(12, 1), CtSlot(23, 3));
  mapping.add(CtSlot(25, 2), CtSlot(23, 4));
  mapping.add(CtSlot(15, 7), CtSlot(23, 5));
  mapping.add(CtSlot(16, 2), CtSlot(23, 6));
  mapping.add(CtSlot(0, 3), CtSlot(23, 7));
  mapping.add(CtSlot(3, 6), CtSlot(24, 0));
  mapping.add(CtSlot(27, 7), CtSlot(24, 1));
  mapping.add(CtSlot(24, 1), CtSlot(24, 2));
  mapping.add(CtSlot(10, 7), CtSlot(24, 3));
  mapping.add(CtSlot(18, 1), CtSlot(24, 4));
  mapping.add(CtSlot(18, 3), CtSlot(24, 5));
  mapping.add(CtSlot(0, 7), CtSlot(24, 6));
  mapping.add(CtSlot(4, 0), CtSlot(24, 7));
  mapping.add(CtSlot(10, 3), CtSlot(25, 0));
  mapping.add(CtSlot(18, 1), CtSlot(25, 1));
  mapping.add(CtSlot(6, 7), CtSlot(25, 2));
  mapping.add(CtSlot(15, 3), CtSlot(25, 3));
  mapping.add(CtSlot(3, 2), CtSlot(25, 4));
  mapping.add(CtSlot(17, 4), CtSlot(25, 5));
  mapping.add(CtSlot(18, 4), CtSlot(25, 6));
  mapping.add(CtSlot(13, 2), CtSlot(25, 7));
  mapping.add(CtSlot(4, 1), CtSlot(26, 0));
  mapping.add(CtSlot(23, 0), CtSlot(26, 1));
  mapping.add(CtSlot(22, 7), CtSlot(26, 2));
  mapping.add(CtSlot(7, 6), CtSlot(26, 3));
  mapping.add(CtSlot(16, 3), CtSlot(26, 4));
  mapping.add(CtSlot(4, 5), CtSlot(26, 5));
  mapping.add(CtSlot(15, 5), CtSlot(26, 6));
  mapping.add(CtSlot(11, 0), CtSlot(26, 7));
  mapping.add(CtSlot(26, 7), CtSlot(27, 0));
  mapping.add(CtSlot(26, 7), CtSlot(27, 1));
  mapping.add(CtSlot(4, 7), CtSlot(27, 2));
  mapping.add(CtSlot(6, 7), CtSlot(27, 3));
  mapping.add(CtSlot(7, 1), CtSlot(27, 4));
  mapping.add(CtSlot(26, 6), CtSlot(27, 5));
  mapping.add(CtSlot(6, 7), CtSlot(27, 6));
  mapping.add(CtSlot(2, 7), CtSlot(27, 7));
  mapping.add(CtSlot(7, 7), CtSlot(28, 0));
  mapping.add(CtSlot(26, 1), CtSlot(28, 1));
  mapping.add(CtSlot(24, 0), CtSlot(28, 2));
  mapping.add(CtSlot(15, 5), CtSlot(28, 3));
  mapping.add(CtSlot(17, 6), CtSlot(28, 4));
  mapping.add(CtSlot(15, 3), CtSlot(28, 5));
  mapping.add(CtSlot(7, 4), CtSlot(28, 6));
  mapping.add(CtSlot(28, 0), CtSlot(28, 7));
  mapping.add(CtSlot(24, 0), CtSlot(29, 0));
  mapping.add(CtSlot(2, 1), CtSlot(29, 1));
  mapping.add(CtSlot(24, 7), CtSlot(29, 2));
  mapping.add(CtSlot(12, 0), CtSlot(29, 3));
  mapping.add(CtSlot(13, 7), CtSlot(29, 4));
  mapping.add(CtSlot(20, 1), CtSlot(29, 5));
  mapping.add(CtSlot(9, 6), CtSlot(29, 6));
  mapping.add(CtSlot(16, 3), CtSlot(29, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_46) {
  int64_t numCts = 30;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(22, 2), CtSlot(0, 0));
  mapping.add(CtSlot(26, 7), CtSlot(0, 1));
  mapping.add(CtSlot(21, 5), CtSlot(0, 2));
  mapping.add(CtSlot(7, 1), CtSlot(0, 3));
  mapping.add(CtSlot(24, 0), CtSlot(0, 4));
  mapping.add(CtSlot(13, 3), CtSlot(0, 5));
  mapping.add(CtSlot(10, 3), CtSlot(0, 6));
  mapping.add(CtSlot(18, 5), CtSlot(0, 7));
  mapping.add(CtSlot(24, 1), CtSlot(1, 0));
  mapping.add(CtSlot(1, 1), CtSlot(1, 1));
  mapping.add(CtSlot(26, 5), CtSlot(1, 2));
  mapping.add(CtSlot(29, 0), CtSlot(1, 3));
  mapping.add(CtSlot(26, 0), CtSlot(1, 4));
  mapping.add(CtSlot(5, 4), CtSlot(1, 5));
  mapping.add(CtSlot(27, 1), CtSlot(1, 6));
  mapping.add(CtSlot(22, 7), CtSlot(1, 7));
  mapping.add(CtSlot(7, 2), CtSlot(2, 0));
  mapping.add(CtSlot(29, 2), CtSlot(2, 1));
  mapping.add(CtSlot(28, 1), CtSlot(2, 2));
  mapping.add(CtSlot(22, 1), CtSlot(2, 3));
  mapping.add(CtSlot(8, 0), CtSlot(2, 4));
  mapping.add(CtSlot(16, 3), CtSlot(2, 5));
  mapping.add(CtSlot(10, 7), CtSlot(2, 6));
  mapping.add(CtSlot(6, 5), CtSlot(2, 7));
  mapping.add(CtSlot(1, 5), CtSlot(3, 0));
  mapping.add(CtSlot(26, 0), CtSlot(3, 1));
  mapping.add(CtSlot(22, 4), CtSlot(3, 2));
  mapping.add(CtSlot(23, 2), CtSlot(3, 3));
  mapping.add(CtSlot(16, 7), CtSlot(3, 4));
  mapping.add(CtSlot(0, 0), CtSlot(3, 5));
  mapping.add(CtSlot(16, 2), CtSlot(3, 6));
  mapping.add(CtSlot(20, 0), CtSlot(3, 7));
  mapping.add(CtSlot(21, 1), CtSlot(4, 0));
  mapping.add(CtSlot(12, 3), CtSlot(4, 1));
  mapping.add(CtSlot(4, 4), CtSlot(4, 2));
  mapping.add(CtSlot(29, 7), CtSlot(4, 3));
  mapping.add(CtSlot(9, 5), CtSlot(4, 4));
  mapping.add(CtSlot(5, 2), CtSlot(4, 5));
  mapping.add(CtSlot(25, 0), CtSlot(4, 6));
  mapping.add(CtSlot(4, 2), CtSlot(4, 7));
  mapping.add(CtSlot(12, 3), CtSlot(5, 0));
  mapping.add(CtSlot(26, 2), CtSlot(5, 1));
  mapping.add(CtSlot(29, 0), CtSlot(5, 2));
  mapping.add(CtSlot(4, 5), CtSlot(5, 3));
  mapping.add(CtSlot(5, 6), CtSlot(5, 4));
  mapping.add(CtSlot(20, 5), CtSlot(5, 5));
  mapping.add(CtSlot(2, 7), CtSlot(5, 6));
  mapping.add(CtSlot(9, 0), CtSlot(5, 7));
  mapping.add(CtSlot(2, 2), CtSlot(6, 0));
  mapping.add(CtSlot(7, 1), CtSlot(6, 1));
  mapping.add(CtSlot(13, 3), CtSlot(6, 2));
  mapping.add(CtSlot(8, 1), CtSlot(6, 3));
  mapping.add(CtSlot(29, 2), CtSlot(6, 4));
  mapping.add(CtSlot(26, 5), CtSlot(6, 5));
  mapping.add(CtSlot(4, 1), CtSlot(6, 6));
  mapping.add(CtSlot(26, 3), CtSlot(6, 7));
  mapping.add(CtSlot(22, 3), CtSlot(7, 0));
  mapping.add(CtSlot(12, 1), CtSlot(7, 1));
  mapping.add(CtSlot(22, 2), CtSlot(7, 2));
  mapping.add(CtSlot(10, 5), CtSlot(7, 3));
  mapping.add(CtSlot(1, 1), CtSlot(7, 4));
  mapping.add(CtSlot(20, 1), CtSlot(7, 5));
  mapping.add(CtSlot(11, 5), CtSlot(7, 6));
  mapping.add(CtSlot(20, 3), CtSlot(7, 7));
  mapping.add(CtSlot(10, 1), CtSlot(8, 0));
  mapping.add(CtSlot(21, 0), CtSlot(8, 1));
  mapping.add(CtSlot(22, 3), CtSlot(8, 2));
  mapping.add(CtSlot(1, 5), CtSlot(8, 3));
  mapping.add(CtSlot(23, 5), CtSlot(8, 4));
  mapping.add(CtSlot(1, 1), CtSlot(8, 5));
  mapping.add(CtSlot(3, 4), CtSlot(8, 6));
  mapping.add(CtSlot(26, 1), CtSlot(8, 7));
  mapping.add(CtSlot(3, 7), CtSlot(9, 0));
  mapping.add(CtSlot(28, 2), CtSlot(9, 1));
  mapping.add(CtSlot(12, 1), CtSlot(9, 2));
  mapping.add(CtSlot(4, 0), CtSlot(9, 3));
  mapping.add(CtSlot(10, 0), CtSlot(9, 4));
  mapping.add(CtSlot(19, 0), CtSlot(9, 5));
  mapping.add(CtSlot(8, 5), CtSlot(9, 6));
  mapping.add(CtSlot(9, 5), CtSlot(9, 7));
  mapping.add(CtSlot(8, 3), CtSlot(10, 0));
  mapping.add(CtSlot(14, 5), CtSlot(10, 1));
  mapping.add(CtSlot(1, 0), CtSlot(10, 2));
  mapping.add(CtSlot(23, 5), CtSlot(10, 3));
  mapping.add(CtSlot(12, 2), CtSlot(10, 4));
  mapping.add(CtSlot(24, 3), CtSlot(10, 5));
  mapping.add(CtSlot(22, 6), CtSlot(10, 6));
  mapping.add(CtSlot(4, 4), CtSlot(10, 7));
  mapping.add(CtSlot(26, 2), CtSlot(11, 0));
  mapping.add(CtSlot(7, 0), CtSlot(11, 1));
  mapping.add(CtSlot(2, 5), CtSlot(11, 2));
  mapping.add(CtSlot(0, 3), CtSlot(11, 3));
  mapping.add(CtSlot(1, 7), CtSlot(11, 4));
  mapping.add(CtSlot(13, 7), CtSlot(11, 5));
  mapping.add(CtSlot(21, 6), CtSlot(11, 6));
  mapping.add(CtSlot(11, 3), CtSlot(11, 7));
  mapping.add(CtSlot(24, 0), CtSlot(12, 0));
  mapping.add(CtSlot(8, 0), CtSlot(12, 1));
  mapping.add(CtSlot(6, 2), CtSlot(12, 2));
  mapping.add(CtSlot(13, 0), CtSlot(12, 3));
  mapping.add(CtSlot(16, 4), CtSlot(12, 4));
  mapping.add(CtSlot(20, 4), CtSlot(12, 5));
  mapping.add(CtSlot(10, 6), CtSlot(12, 6));
  mapping.add(CtSlot(19, 5), CtSlot(12, 7));
  mapping.add(CtSlot(23, 6), CtSlot(13, 0));
  mapping.add(CtSlot(28, 5), CtSlot(13, 1));
  mapping.add(CtSlot(19, 2), CtSlot(13, 2));
  mapping.add(CtSlot(18, 3), CtSlot(13, 3));
  mapping.add(CtSlot(18, 4), CtSlot(13, 4));
  mapping.add(CtSlot(17, 4), CtSlot(13, 5));
  mapping.add(CtSlot(9, 7), CtSlot(13, 6));
  mapping.add(CtSlot(10, 7), CtSlot(13, 7));
  mapping.add(CtSlot(7, 5), CtSlot(14, 0));
  mapping.add(CtSlot(15, 2), CtSlot(14, 1));
  mapping.add(CtSlot(0, 0), CtSlot(14, 2));
  mapping.add(CtSlot(8, 4), CtSlot(14, 3));
  mapping.add(CtSlot(17, 5), CtSlot(14, 4));
  mapping.add(CtSlot(0, 2), CtSlot(14, 5));
  mapping.add(CtSlot(5, 7), CtSlot(14, 6));
  mapping.add(CtSlot(10, 3), CtSlot(14, 7));
  mapping.add(CtSlot(10, 1), CtSlot(15, 0));
  mapping.add(CtSlot(0, 2), CtSlot(15, 1));
  mapping.add(CtSlot(27, 7), CtSlot(15, 2));
  mapping.add(CtSlot(26, 7), CtSlot(15, 3));
  mapping.add(CtSlot(26, 2), CtSlot(15, 4));
  mapping.add(CtSlot(19, 7), CtSlot(15, 5));
  mapping.add(CtSlot(9, 2), CtSlot(15, 6));
  mapping.add(CtSlot(28, 7), CtSlot(15, 7));
  mapping.add(CtSlot(20, 4), CtSlot(16, 0));
  mapping.add(CtSlot(0, 0), CtSlot(16, 1));
  mapping.add(CtSlot(3, 4), CtSlot(16, 2));
  mapping.add(CtSlot(6, 5), CtSlot(16, 3));
  mapping.add(CtSlot(9, 0), CtSlot(16, 4));
  mapping.add(CtSlot(7, 6), CtSlot(16, 5));
  mapping.add(CtSlot(2, 3), CtSlot(16, 6));
  mapping.add(CtSlot(18, 6), CtSlot(16, 7));
  mapping.add(CtSlot(21, 1), CtSlot(17, 0));
  mapping.add(CtSlot(25, 0), CtSlot(17, 1));
  mapping.add(CtSlot(7, 2), CtSlot(17, 2));
  mapping.add(CtSlot(23, 4), CtSlot(17, 3));
  mapping.add(CtSlot(23, 6), CtSlot(17, 4));
  mapping.add(CtSlot(14, 6), CtSlot(17, 5));
  mapping.add(CtSlot(21, 6), CtSlot(17, 6));
  mapping.add(CtSlot(15, 2), CtSlot(17, 7));
  mapping.add(CtSlot(0, 3), CtSlot(18, 0));
  mapping.add(CtSlot(12, 1), CtSlot(18, 1));
  mapping.add(CtSlot(9, 5), CtSlot(18, 2));
  mapping.add(CtSlot(3, 0), CtSlot(18, 3));
  mapping.add(CtSlot(7, 5), CtSlot(18, 4));
  mapping.add(CtSlot(7, 3), CtSlot(18, 5));
  mapping.add(CtSlot(28, 7), CtSlot(18, 6));
  mapping.add(CtSlot(20, 7), CtSlot(18, 7));
  mapping.add(CtSlot(2, 1), CtSlot(19, 0));
  mapping.add(CtSlot(23, 4), CtSlot(19, 1));
  mapping.add(CtSlot(8, 7), CtSlot(19, 2));
  mapping.add(CtSlot(22, 7), CtSlot(19, 3));
  mapping.add(CtSlot(21, 3), CtSlot(19, 4));
  mapping.add(CtSlot(27, 2), CtSlot(19, 5));
  mapping.add(CtSlot(21, 3), CtSlot(19, 6));
  mapping.add(CtSlot(20, 2), CtSlot(19, 7));
  mapping.add(CtSlot(10, 2), CtSlot(20, 0));
  mapping.add(CtSlot(28, 6), CtSlot(20, 1));
  mapping.add(CtSlot(27, 2), CtSlot(20, 2));
  mapping.add(CtSlot(10, 2), CtSlot(20, 3));
  mapping.add(CtSlot(15, 3), CtSlot(20, 4));
  mapping.add(CtSlot(17, 6), CtSlot(20, 5));
  mapping.add(CtSlot(26, 0), CtSlot(20, 6));
  mapping.add(CtSlot(10, 3), CtSlot(20, 7));
  mapping.add(CtSlot(14, 3), CtSlot(21, 0));
  mapping.add(CtSlot(18, 0), CtSlot(21, 1));
  mapping.add(CtSlot(26, 6), CtSlot(21, 2));
  mapping.add(CtSlot(8, 5), CtSlot(21, 3));
  mapping.add(CtSlot(10, 4), CtSlot(21, 4));
  mapping.add(CtSlot(16, 1), CtSlot(21, 5));
  mapping.add(CtSlot(11, 4), CtSlot(21, 6));
  mapping.add(CtSlot(8, 3), CtSlot(21, 7));
  mapping.add(CtSlot(12, 3), CtSlot(22, 0));
  mapping.add(CtSlot(15, 7), CtSlot(22, 1));
  mapping.add(CtSlot(28, 3), CtSlot(22, 2));
  mapping.add(CtSlot(15, 5), CtSlot(22, 3));
  mapping.add(CtSlot(5, 2), CtSlot(22, 4));
  mapping.add(CtSlot(14, 7), CtSlot(22, 5));
  mapping.add(CtSlot(24, 4), CtSlot(22, 6));
  mapping.add(CtSlot(11, 1), CtSlot(22, 7));
  mapping.add(CtSlot(10, 3), CtSlot(23, 0));
  mapping.add(CtSlot(11, 7), CtSlot(23, 1));
  mapping.add(CtSlot(1, 5), CtSlot(23, 2));
  mapping.add(CtSlot(12, 1), CtSlot(23, 3));
  mapping.add(CtSlot(25, 2), CtSlot(23, 4));
  mapping.add(CtSlot(15, 7), CtSlot(23, 5));
  mapping.add(CtSlot(16, 2), CtSlot(23, 6));
  mapping.add(CtSlot(0, 3), CtSlot(23, 7));
  mapping.add(CtSlot(3, 6), CtSlot(24, 0));
  mapping.add(CtSlot(27, 7), CtSlot(24, 1));
  mapping.add(CtSlot(24, 1), CtSlot(24, 2));
  mapping.add(CtSlot(10, 7), CtSlot(24, 3));
  mapping.add(CtSlot(18, 1), CtSlot(24, 4));
  mapping.add(CtSlot(18, 3), CtSlot(24, 5));
  mapping.add(CtSlot(0, 7), CtSlot(24, 6));
  mapping.add(CtSlot(4, 0), CtSlot(24, 7));
  mapping.add(CtSlot(10, 3), CtSlot(25, 0));
  mapping.add(CtSlot(18, 1), CtSlot(25, 1));
  mapping.add(CtSlot(6, 7), CtSlot(25, 2));
  mapping.add(CtSlot(15, 3), CtSlot(25, 3));
  mapping.add(CtSlot(3, 2), CtSlot(25, 4));
  mapping.add(CtSlot(17, 4), CtSlot(25, 5));
  mapping.add(CtSlot(18, 4), CtSlot(25, 6));
  mapping.add(CtSlot(13, 2), CtSlot(25, 7));
  mapping.add(CtSlot(4, 1), CtSlot(26, 0));
  mapping.add(CtSlot(23, 0), CtSlot(26, 1));
  mapping.add(CtSlot(22, 7), CtSlot(26, 2));
  mapping.add(CtSlot(7, 6), CtSlot(26, 3));
  mapping.add(CtSlot(16, 3), CtSlot(26, 4));
  mapping.add(CtSlot(4, 5), CtSlot(26, 5));
  mapping.add(CtSlot(15, 5), CtSlot(26, 6));
  mapping.add(CtSlot(11, 0), CtSlot(26, 7));
  mapping.add(CtSlot(26, 7), CtSlot(27, 0));
  mapping.add(CtSlot(26, 7), CtSlot(27, 1));
  mapping.add(CtSlot(4, 7), CtSlot(27, 2));
  mapping.add(CtSlot(6, 7), CtSlot(27, 3));
  mapping.add(CtSlot(7, 1), CtSlot(27, 4));
  mapping.add(CtSlot(26, 6), CtSlot(27, 5));
  mapping.add(CtSlot(6, 7), CtSlot(27, 6));
  mapping.add(CtSlot(2, 7), CtSlot(27, 7));
  mapping.add(CtSlot(7, 7), CtSlot(28, 0));
  mapping.add(CtSlot(26, 1), CtSlot(28, 1));
  mapping.add(CtSlot(24, 0), CtSlot(28, 2));
  mapping.add(CtSlot(15, 5), CtSlot(28, 3));
  mapping.add(CtSlot(17, 6), CtSlot(28, 4));
  mapping.add(CtSlot(15, 3), CtSlot(28, 5));
  mapping.add(CtSlot(7, 4), CtSlot(28, 6));
  mapping.add(CtSlot(28, 0), CtSlot(28, 7));
  mapping.add(CtSlot(24, 0), CtSlot(29, 0));
  mapping.add(CtSlot(2, 1), CtSlot(29, 1));
  mapping.add(CtSlot(24, 7), CtSlot(29, 2));
  mapping.add(CtSlot(12, 0), CtSlot(29, 3));
  mapping.add(CtSlot(13, 7), CtSlot(29, 4));
  mapping.add(CtSlot(20, 1), CtSlot(29, 5));
  mapping.add(CtSlot(9, 6), CtSlot(29, 6));
  mapping.add(CtSlot(0, 3), CtSlot(29, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_47) {
  int64_t numCts = 1;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 6), CtSlot(0, 0));
  mapping.add(CtSlot(0, 2), CtSlot(0, 1));
  mapping.add(CtSlot(0, 6), CtSlot(0, 2));
  mapping.add(CtSlot(0, 6), CtSlot(0, 3));
  mapping.add(CtSlot(0, 3), CtSlot(0, 4));
  mapping.add(CtSlot(0, 2), CtSlot(0, 5));
  mapping.add(CtSlot(0, 0), CtSlot(0, 6));
  mapping.add(CtSlot(0, 3), CtSlot(0, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_48) {
  int64_t numCts = 1;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 0), CtSlot(0, 0));
  mapping.add(CtSlot(0, 2), CtSlot(0, 1));
  mapping.add(CtSlot(0, 6), CtSlot(0, 2));
  mapping.add(CtSlot(0, 6), CtSlot(0, 3));
  mapping.add(CtSlot(0, 3), CtSlot(0, 4));
  mapping.add(CtSlot(0, 2), CtSlot(0, 5));
  mapping.add(CtSlot(0, 0), CtSlot(0, 6));
  mapping.add(CtSlot(0, 3), CtSlot(0, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_49) {
  int64_t numCts = 1;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 0), CtSlot(0, 0));
  mapping.add(CtSlot(0, 2), CtSlot(0, 1));
  mapping.add(CtSlot(0, 6), CtSlot(0, 2));
  mapping.add(CtSlot(0, 6), CtSlot(0, 3));
  mapping.add(CtSlot(0, 2), CtSlot(0, 4));
  mapping.add(CtSlot(0, 2), CtSlot(0, 5));
  mapping.add(CtSlot(0, 0), CtSlot(0, 6));
  mapping.add(CtSlot(0, 3), CtSlot(0, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_50) {
  int64_t numCts = 1;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 0), CtSlot(0, 0));
  mapping.add(CtSlot(0, 2), CtSlot(0, 1));
  mapping.add(CtSlot(0, 6), CtSlot(0, 2));
  mapping.add(CtSlot(0, 6), CtSlot(0, 3));
  mapping.add(CtSlot(0, 2), CtSlot(0, 4));
  mapping.add(CtSlot(0, 2), CtSlot(0, 5));
  mapping.add(CtSlot(0, 6), CtSlot(0, 6));
  mapping.add(CtSlot(0, 3), CtSlot(0, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_51) {
  int64_t numCts = 15;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(4, 5), CtSlot(0, 0));
  mapping.add(CtSlot(12, 5), CtSlot(0, 1));
  mapping.add(CtSlot(1, 2), CtSlot(0, 2));
  mapping.add(CtSlot(14, 4), CtSlot(0, 3));
  mapping.add(CtSlot(3, 0), CtSlot(0, 4));
  mapping.add(CtSlot(13, 0), CtSlot(0, 5));
  mapping.add(CtSlot(3, 3), CtSlot(0, 6));
  mapping.add(CtSlot(11, 0), CtSlot(0, 7));
  mapping.add(CtSlot(12, 5), CtSlot(1, 0));
  mapping.add(CtSlot(12, 0), CtSlot(1, 1));
  mapping.add(CtSlot(11, 3), CtSlot(1, 2));
  mapping.add(CtSlot(5, 2), CtSlot(1, 3));
  mapping.add(CtSlot(11, 6), CtSlot(1, 4));
  mapping.add(CtSlot(12, 0), CtSlot(1, 5));
  mapping.add(CtSlot(10, 4), CtSlot(1, 6));
  mapping.add(CtSlot(8, 5), CtSlot(1, 7));
  mapping.add(CtSlot(3, 6), CtSlot(2, 0));
  mapping.add(CtSlot(2, 7), CtSlot(2, 1));
  mapping.add(CtSlot(11, 1), CtSlot(2, 2));
  mapping.add(CtSlot(12, 1), CtSlot(2, 3));
  mapping.add(CtSlot(13, 0), CtSlot(2, 4));
  mapping.add(CtSlot(4, 3), CtSlot(2, 5));
  mapping.add(CtSlot(3, 7), CtSlot(2, 6));
  mapping.add(CtSlot(7, 5), CtSlot(2, 7));
  mapping.add(CtSlot(6, 7), CtSlot(3, 0));
  mapping.add(CtSlot(11, 3), CtSlot(3, 1));
  mapping.add(CtSlot(9, 0), CtSlot(3, 2));
  mapping.add(CtSlot(14, 5), CtSlot(3, 3));
  mapping.add(CtSlot(3, 3), CtSlot(3, 4));
  mapping.add(CtSlot(11, 5), CtSlot(3, 5));
  mapping.add(CtSlot(8, 3), CtSlot(3, 6));
  mapping.add(CtSlot(6, 0), CtSlot(3, 7));
  mapping.add(CtSlot(6, 4), CtSlot(4, 0));
  mapping.add(CtSlot(6, 4), CtSlot(4, 1));
  mapping.add(CtSlot(14, 4), CtSlot(4, 2));
  mapping.add(CtSlot(0, 0), CtSlot(4, 3));
  mapping.add(CtSlot(11, 6), CtSlot(4, 4));
  mapping.add(CtSlot(9, 2), CtSlot(4, 5));
  mapping.add(CtSlot(11, 7), CtSlot(4, 6));
  mapping.add(CtSlot(5, 0), CtSlot(4, 7));
  mapping.add(CtSlot(1, 5), CtSlot(5, 0));
  mapping.add(CtSlot(4, 1), CtSlot(5, 1));
  mapping.add(CtSlot(4, 4), CtSlot(5, 2));
  mapping.add(CtSlot(7, 0), CtSlot(5, 3));
  mapping.add(CtSlot(11, 5), CtSlot(5, 4));
  mapping.add(CtSlot(7, 7), CtSlot(5, 5));
  mapping.add(CtSlot(7, 6), CtSlot(5, 6));
  mapping.add(CtSlot(12, 0), CtSlot(5, 7));
  mapping.add(CtSlot(3, 0), CtSlot(6, 0));
  mapping.add(CtSlot(1, 3), CtSlot(6, 1));
  mapping.add(CtSlot(5, 7), CtSlot(6, 2));
  mapping.add(CtSlot(0, 6), CtSlot(6, 3));
  mapping.add(CtSlot(4, 5), CtSlot(6, 4));
  mapping.add(CtSlot(11, 3), CtSlot(6, 5));
  mapping.add(CtSlot(2, 3), CtSlot(6, 6));
  mapping.add(CtSlot(4, 6), CtSlot(6, 7));
  mapping.add(CtSlot(8, 6), CtSlot(7, 0));
  mapping.add(CtSlot(7, 2), CtSlot(7, 1));
  mapping.add(CtSlot(5, 2), CtSlot(7, 2));
  mapping.add(CtSlot(4, 4), CtSlot(7, 3));
  mapping.add(CtSlot(6, 4), CtSlot(7, 4));
  mapping.add(CtSlot(8, 0), CtSlot(7, 5));
  mapping.add(CtSlot(4, 7), CtSlot(7, 6));
  mapping.add(CtSlot(10, 7), CtSlot(7, 7));
  mapping.add(CtSlot(0, 3), CtSlot(8, 0));
  mapping.add(CtSlot(14, 0), CtSlot(8, 1));
  mapping.add(CtSlot(5, 0), CtSlot(8, 2));
  mapping.add(CtSlot(9, 7), CtSlot(8, 3));
  mapping.add(CtSlot(3, 3), CtSlot(8, 4));
  mapping.add(CtSlot(10, 6), CtSlot(8, 5));
  mapping.add(CtSlot(14, 4), CtSlot(8, 6));
  mapping.add(CtSlot(12, 6), CtSlot(8, 7));
  mapping.add(CtSlot(10, 4), CtSlot(9, 0));
  mapping.add(CtSlot(0, 3), CtSlot(9, 1));
  mapping.add(CtSlot(10, 3), CtSlot(9, 2));
  mapping.add(CtSlot(8, 5), CtSlot(9, 3));
  mapping.add(CtSlot(7, 7), CtSlot(9, 4));
  mapping.add(CtSlot(12, 4), CtSlot(9, 5));
  mapping.add(CtSlot(0, 2), CtSlot(9, 6));
  mapping.add(CtSlot(7, 7), CtSlot(9, 7));
  mapping.add(CtSlot(13, 6), CtSlot(10, 0));
  mapping.add(CtSlot(10, 1), CtSlot(10, 1));
  mapping.add(CtSlot(2, 1), CtSlot(10, 2));
  mapping.add(CtSlot(7, 3), CtSlot(10, 3));
  mapping.add(CtSlot(14, 7), CtSlot(10, 4));
  mapping.add(CtSlot(5, 1), CtSlot(10, 5));
  mapping.add(CtSlot(9, 6), CtSlot(10, 6));
  mapping.add(CtSlot(0, 6), CtSlot(10, 7));
  mapping.add(CtSlot(9, 5), CtSlot(11, 0));
  mapping.add(CtSlot(9, 7), CtSlot(11, 1));
  mapping.add(CtSlot(7, 0), CtSlot(11, 2));
  mapping.add(CtSlot(6, 3), CtSlot(11, 3));
  mapping.add(CtSlot(6, 6), CtSlot(11, 4));
  mapping.add(CtSlot(10, 1), CtSlot(11, 5));
  mapping.add(CtSlot(1, 2), CtSlot(11, 6));
  mapping.add(CtSlot(4, 3), CtSlot(11, 7));
  mapping.add(CtSlot(4, 2), CtSlot(12, 0));
  mapping.add(CtSlot(1, 5), CtSlot(12, 1));
  mapping.add(CtSlot(13, 0), CtSlot(12, 2));
  mapping.add(CtSlot(7, 5), CtSlot(12, 3));
  mapping.add(CtSlot(12, 7), CtSlot(12, 4));
  mapping.add(CtSlot(7, 5), CtSlot(12, 5));
  mapping.add(CtSlot(11, 0), CtSlot(12, 6));
  mapping.add(CtSlot(10, 0), CtSlot(12, 7));
  mapping.add(CtSlot(6, 6), CtSlot(13, 0));
  mapping.add(CtSlot(2, 0), CtSlot(13, 1));
  mapping.add(CtSlot(8, 4), CtSlot(13, 2));
  mapping.add(CtSlot(2, 3), CtSlot(13, 3));
  mapping.add(CtSlot(5, 4), CtSlot(13, 4));
  mapping.add(CtSlot(1, 6), CtSlot(13, 5));
  mapping.add(CtSlot(3, 0), CtSlot(13, 6));
  mapping.add(CtSlot(1, 4), CtSlot(13, 7));
  mapping.add(CtSlot(4, 1), CtSlot(14, 0));
  mapping.add(CtSlot(9, 7), CtSlot(14, 1));
  mapping.add(CtSlot(13, 0), CtSlot(14, 2));
  mapping.add(CtSlot(3, 3), CtSlot(14, 3));
  mapping.add(CtSlot(12, 2), CtSlot(14, 4));
  mapping.add(CtSlot(6, 2), CtSlot(14, 5));
  mapping.add(CtSlot(11, 6), CtSlot(14, 6));
  mapping.add(CtSlot(12, 4), CtSlot(14, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_52) {
  int64_t numCts = 15;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(4, 5), CtSlot(0, 0));
  mapping.add(CtSlot(12, 5), CtSlot(0, 1));
  mapping.add(CtSlot(1, 2), CtSlot(0, 2));
  mapping.add(CtSlot(14, 4), CtSlot(0, 3));
  mapping.add(CtSlot(3, 0), CtSlot(0, 4));
  mapping.add(CtSlot(13, 0), CtSlot(0, 5));
  mapping.add(CtSlot(3, 3), CtSlot(0, 6));
  mapping.add(CtSlot(11, 0), CtSlot(0, 7));
  mapping.add(CtSlot(12, 5), CtSlot(1, 0));
  mapping.add(CtSlot(12, 0), CtSlot(1, 1));
  mapping.add(CtSlot(11, 3), CtSlot(1, 2));
  mapping.add(CtSlot(5, 2), CtSlot(1, 3));
  mapping.add(CtSlot(11, 6), CtSlot(1, 4));
  mapping.add(CtSlot(12, 0), CtSlot(1, 5));
  mapping.add(CtSlot(10, 4), CtSlot(1, 6));
  mapping.add(CtSlot(8, 5), CtSlot(1, 7));
  mapping.add(CtSlot(3, 6), CtSlot(2, 0));
  mapping.add(CtSlot(2, 7), CtSlot(2, 1));
  mapping.add(CtSlot(11, 1), CtSlot(2, 2));
  mapping.add(CtSlot(12, 1), CtSlot(2, 3));
  mapping.add(CtSlot(13, 0), CtSlot(2, 4));
  mapping.add(CtSlot(4, 3), CtSlot(2, 5));
  mapping.add(CtSlot(3, 7), CtSlot(2, 6));
  mapping.add(CtSlot(7, 5), CtSlot(2, 7));
  mapping.add(CtSlot(6, 7), CtSlot(3, 0));
  mapping.add(CtSlot(11, 3), CtSlot(3, 1));
  mapping.add(CtSlot(9, 0), CtSlot(3, 2));
  mapping.add(CtSlot(14, 5), CtSlot(3, 3));
  mapping.add(CtSlot(3, 3), CtSlot(3, 4));
  mapping.add(CtSlot(11, 5), CtSlot(3, 5));
  mapping.add(CtSlot(8, 3), CtSlot(3, 6));
  mapping.add(CtSlot(6, 0), CtSlot(3, 7));
  mapping.add(CtSlot(6, 4), CtSlot(4, 0));
  mapping.add(CtSlot(6, 4), CtSlot(4, 1));
  mapping.add(CtSlot(14, 0), CtSlot(4, 2));
  mapping.add(CtSlot(0, 0), CtSlot(4, 3));
  mapping.add(CtSlot(11, 6), CtSlot(4, 4));
  mapping.add(CtSlot(9, 2), CtSlot(4, 5));
  mapping.add(CtSlot(11, 7), CtSlot(4, 6));
  mapping.add(CtSlot(5, 0), CtSlot(4, 7));
  mapping.add(CtSlot(1, 5), CtSlot(5, 0));
  mapping.add(CtSlot(4, 1), CtSlot(5, 1));
  mapping.add(CtSlot(4, 4), CtSlot(5, 2));
  mapping.add(CtSlot(7, 0), CtSlot(5, 3));
  mapping.add(CtSlot(11, 5), CtSlot(5, 4));
  mapping.add(CtSlot(7, 7), CtSlot(5, 5));
  mapping.add(CtSlot(7, 6), CtSlot(5, 6));
  mapping.add(CtSlot(12, 0), CtSlot(5, 7));
  mapping.add(CtSlot(3, 0), CtSlot(6, 0));
  mapping.add(CtSlot(1, 3), CtSlot(6, 1));
  mapping.add(CtSlot(5, 7), CtSlot(6, 2));
  mapping.add(CtSlot(0, 6), CtSlot(6, 3));
  mapping.add(CtSlot(4, 5), CtSlot(6, 4));
  mapping.add(CtSlot(11, 3), CtSlot(6, 5));
  mapping.add(CtSlot(2, 3), CtSlot(6, 6));
  mapping.add(CtSlot(4, 6), CtSlot(6, 7));
  mapping.add(CtSlot(8, 6), CtSlot(7, 0));
  mapping.add(CtSlot(7, 2), CtSlot(7, 1));
  mapping.add(CtSlot(5, 2), CtSlot(7, 2));
  mapping.add(CtSlot(4, 4), CtSlot(7, 3));
  mapping.add(CtSlot(6, 4), CtSlot(7, 4));
  mapping.add(CtSlot(8, 0), CtSlot(7, 5));
  mapping.add(CtSlot(4, 7), CtSlot(7, 6));
  mapping.add(CtSlot(10, 7), CtSlot(7, 7));
  mapping.add(CtSlot(0, 3), CtSlot(8, 0));
  mapping.add(CtSlot(14, 0), CtSlot(8, 1));
  mapping.add(CtSlot(5, 0), CtSlot(8, 2));
  mapping.add(CtSlot(9, 7), CtSlot(8, 3));
  mapping.add(CtSlot(3, 3), CtSlot(8, 4));
  mapping.add(CtSlot(10, 6), CtSlot(8, 5));
  mapping.add(CtSlot(14, 4), CtSlot(8, 6));
  mapping.add(CtSlot(12, 6), CtSlot(8, 7));
  mapping.add(CtSlot(10, 4), CtSlot(9, 0));
  mapping.add(CtSlot(0, 3), CtSlot(9, 1));
  mapping.add(CtSlot(10, 3), CtSlot(9, 2));
  mapping.add(CtSlot(8, 5), CtSlot(9, 3));
  mapping.add(CtSlot(7, 7), CtSlot(9, 4));
  mapping.add(CtSlot(12, 4), CtSlot(9, 5));
  mapping.add(CtSlot(0, 2), CtSlot(9, 6));
  mapping.add(CtSlot(7, 7), CtSlot(9, 7));
  mapping.add(CtSlot(13, 6), CtSlot(10, 0));
  mapping.add(CtSlot(10, 1), CtSlot(10, 1));
  mapping.add(CtSlot(2, 1), CtSlot(10, 2));
  mapping.add(CtSlot(7, 3), CtSlot(10, 3));
  mapping.add(CtSlot(14, 7), CtSlot(10, 4));
  mapping.add(CtSlot(5, 1), CtSlot(10, 5));
  mapping.add(CtSlot(9, 6), CtSlot(10, 6));
  mapping.add(CtSlot(0, 6), CtSlot(10, 7));
  mapping.add(CtSlot(9, 5), CtSlot(11, 0));
  mapping.add(CtSlot(9, 7), CtSlot(11, 1));
  mapping.add(CtSlot(7, 0), CtSlot(11, 2));
  mapping.add(CtSlot(6, 3), CtSlot(11, 3));
  mapping.add(CtSlot(6, 6), CtSlot(11, 4));
  mapping.add(CtSlot(10, 1), CtSlot(11, 5));
  mapping.add(CtSlot(1, 2), CtSlot(11, 6));
  mapping.add(CtSlot(4, 3), CtSlot(11, 7));
  mapping.add(CtSlot(4, 2), CtSlot(12, 0));
  mapping.add(CtSlot(1, 5), CtSlot(12, 1));
  mapping.add(CtSlot(13, 0), CtSlot(12, 2));
  mapping.add(CtSlot(7, 5), CtSlot(12, 3));
  mapping.add(CtSlot(12, 7), CtSlot(12, 4));
  mapping.add(CtSlot(7, 5), CtSlot(12, 5));
  mapping.add(CtSlot(11, 0), CtSlot(12, 6));
  mapping.add(CtSlot(10, 0), CtSlot(12, 7));
  mapping.add(CtSlot(6, 6), CtSlot(13, 0));
  mapping.add(CtSlot(2, 0), CtSlot(13, 1));
  mapping.add(CtSlot(8, 4), CtSlot(13, 2));
  mapping.add(CtSlot(2, 3), CtSlot(13, 3));
  mapping.add(CtSlot(5, 4), CtSlot(13, 4));
  mapping.add(CtSlot(1, 6), CtSlot(13, 5));
  mapping.add(CtSlot(3, 0), CtSlot(13, 6));
  mapping.add(CtSlot(1, 4), CtSlot(13, 7));
  mapping.add(CtSlot(4, 1), CtSlot(14, 0));
  mapping.add(CtSlot(9, 7), CtSlot(14, 1));
  mapping.add(CtSlot(13, 0), CtSlot(14, 2));
  mapping.add(CtSlot(3, 3), CtSlot(14, 3));
  mapping.add(CtSlot(12, 2), CtSlot(14, 4));
  mapping.add(CtSlot(6, 2), CtSlot(14, 5));
  mapping.add(CtSlot(11, 6), CtSlot(14, 6));
  mapping.add(CtSlot(12, 4), CtSlot(14, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_53) {
  int64_t numCts = 15;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(4, 5), CtSlot(0, 0));
  mapping.add(CtSlot(12, 5), CtSlot(0, 1));
  mapping.add(CtSlot(1, 2), CtSlot(0, 2));
  mapping.add(CtSlot(14, 4), CtSlot(0, 3));
  mapping.add(CtSlot(3, 0), CtSlot(0, 4));
  mapping.add(CtSlot(13, 0), CtSlot(0, 5));
  mapping.add(CtSlot(3, 3), CtSlot(0, 6));
  mapping.add(CtSlot(11, 0), CtSlot(0, 7));
  mapping.add(CtSlot(12, 5), CtSlot(1, 0));
  mapping.add(CtSlot(12, 0), CtSlot(1, 1));
  mapping.add(CtSlot(11, 3), CtSlot(1, 2));
  mapping.add(CtSlot(5, 2), CtSlot(1, 3));
  mapping.add(CtSlot(11, 6), CtSlot(1, 4));
  mapping.add(CtSlot(12, 0), CtSlot(1, 5));
  mapping.add(CtSlot(10, 4), CtSlot(1, 6));
  mapping.add(CtSlot(8, 5), CtSlot(1, 7));
  mapping.add(CtSlot(3, 6), CtSlot(2, 0));
  mapping.add(CtSlot(2, 7), CtSlot(2, 1));
  mapping.add(CtSlot(11, 1), CtSlot(2, 2));
  mapping.add(CtSlot(12, 1), CtSlot(2, 3));
  mapping.add(CtSlot(13, 0), CtSlot(2, 4));
  mapping.add(CtSlot(4, 3), CtSlot(2, 5));
  mapping.add(CtSlot(3, 7), CtSlot(2, 6));
  mapping.add(CtSlot(7, 5), CtSlot(2, 7));
  mapping.add(CtSlot(6, 7), CtSlot(3, 0));
  mapping.add(CtSlot(11, 3), CtSlot(3, 1));
  mapping.add(CtSlot(9, 0), CtSlot(3, 2));
  mapping.add(CtSlot(14, 5), CtSlot(3, 3));
  mapping.add(CtSlot(3, 3), CtSlot(3, 4));
  mapping.add(CtSlot(11, 5), CtSlot(3, 5));
  mapping.add(CtSlot(8, 3), CtSlot(3, 6));
  mapping.add(CtSlot(6, 0), CtSlot(3, 7));
  mapping.add(CtSlot(6, 4), CtSlot(4, 0));
  mapping.add(CtSlot(6, 4), CtSlot(4, 1));
  mapping.add(CtSlot(14, 0), CtSlot(4, 2));
  mapping.add(CtSlot(0, 0), CtSlot(4, 3));
  mapping.add(CtSlot(11, 6), CtSlot(4, 4));
  mapping.add(CtSlot(9, 2), CtSlot(4, 5));
  mapping.add(CtSlot(11, 7), CtSlot(4, 6));
  mapping.add(CtSlot(5, 0), CtSlot(4, 7));
  mapping.add(CtSlot(1, 5), CtSlot(5, 0));
  mapping.add(CtSlot(4, 1), CtSlot(5, 1));
  mapping.add(CtSlot(4, 4), CtSlot(5, 2));
  mapping.add(CtSlot(7, 0), CtSlot(5, 3));
  mapping.add(CtSlot(11, 5), CtSlot(5, 4));
  mapping.add(CtSlot(7, 7), CtSlot(5, 5));
  mapping.add(CtSlot(7, 6), CtSlot(5, 6));
  mapping.add(CtSlot(12, 0), CtSlot(5, 7));
  mapping.add(CtSlot(3, 0), CtSlot(6, 0));
  mapping.add(CtSlot(1, 3), CtSlot(6, 1));
  mapping.add(CtSlot(5, 7), CtSlot(6, 2));
  mapping.add(CtSlot(0, 6), CtSlot(6, 3));
  mapping.add(CtSlot(4, 5), CtSlot(6, 4));
  mapping.add(CtSlot(11, 3), CtSlot(6, 5));
  mapping.add(CtSlot(2, 3), CtSlot(6, 6));
  mapping.add(CtSlot(4, 6), CtSlot(6, 7));
  mapping.add(CtSlot(8, 0), CtSlot(7, 0));
  mapping.add(CtSlot(7, 2), CtSlot(7, 1));
  mapping.add(CtSlot(5, 2), CtSlot(7, 2));
  mapping.add(CtSlot(4, 4), CtSlot(7, 3));
  mapping.add(CtSlot(6, 4), CtSlot(7, 4));
  mapping.add(CtSlot(8, 0), CtSlot(7, 5));
  mapping.add(CtSlot(4, 7), CtSlot(7, 6));
  mapping.add(CtSlot(10, 7), CtSlot(7, 7));
  mapping.add(CtSlot(0, 3), CtSlot(8, 0));
  mapping.add(CtSlot(14, 0), CtSlot(8, 1));
  mapping.add(CtSlot(5, 0), CtSlot(8, 2));
  mapping.add(CtSlot(9, 7), CtSlot(8, 3));
  mapping.add(CtSlot(3, 3), CtSlot(8, 4));
  mapping.add(CtSlot(10, 6), CtSlot(8, 5));
  mapping.add(CtSlot(14, 4), CtSlot(8, 6));
  mapping.add(CtSlot(12, 6), CtSlot(8, 7));
  mapping.add(CtSlot(10, 4), CtSlot(9, 0));
  mapping.add(CtSlot(0, 3), CtSlot(9, 1));
  mapping.add(CtSlot(10, 3), CtSlot(9, 2));
  mapping.add(CtSlot(8, 5), CtSlot(9, 3));
  mapping.add(CtSlot(7, 7), CtSlot(9, 4));
  mapping.add(CtSlot(12, 4), CtSlot(9, 5));
  mapping.add(CtSlot(0, 2), CtSlot(9, 6));
  mapping.add(CtSlot(7, 7), CtSlot(9, 7));
  mapping.add(CtSlot(13, 6), CtSlot(10, 0));
  mapping.add(CtSlot(10, 1), CtSlot(10, 1));
  mapping.add(CtSlot(2, 1), CtSlot(10, 2));
  mapping.add(CtSlot(7, 3), CtSlot(10, 3));
  mapping.add(CtSlot(14, 7), CtSlot(10, 4));
  mapping.add(CtSlot(5, 1), CtSlot(10, 5));
  mapping.add(CtSlot(9, 6), CtSlot(10, 6));
  mapping.add(CtSlot(0, 6), CtSlot(10, 7));
  mapping.add(CtSlot(9, 5), CtSlot(11, 0));
  mapping.add(CtSlot(9, 7), CtSlot(11, 1));
  mapping.add(CtSlot(7, 0), CtSlot(11, 2));
  mapping.add(CtSlot(6, 3), CtSlot(11, 3));
  mapping.add(CtSlot(6, 6), CtSlot(11, 4));
  mapping.add(CtSlot(10, 1), CtSlot(11, 5));
  mapping.add(CtSlot(1, 2), CtSlot(11, 6));
  mapping.add(CtSlot(4, 3), CtSlot(11, 7));
  mapping.add(CtSlot(4, 2), CtSlot(12, 0));
  mapping.add(CtSlot(1, 5), CtSlot(12, 1));
  mapping.add(CtSlot(13, 0), CtSlot(12, 2));
  mapping.add(CtSlot(7, 5), CtSlot(12, 3));
  mapping.add(CtSlot(12, 7), CtSlot(12, 4));
  mapping.add(CtSlot(7, 5), CtSlot(12, 5));
  mapping.add(CtSlot(11, 0), CtSlot(12, 6));
  mapping.add(CtSlot(10, 0), CtSlot(12, 7));
  mapping.add(CtSlot(6, 6), CtSlot(13, 0));
  mapping.add(CtSlot(2, 0), CtSlot(13, 1));
  mapping.add(CtSlot(8, 4), CtSlot(13, 2));
  mapping.add(CtSlot(2, 3), CtSlot(13, 3));
  mapping.add(CtSlot(5, 4), CtSlot(13, 4));
  mapping.add(CtSlot(1, 6), CtSlot(13, 5));
  mapping.add(CtSlot(3, 0), CtSlot(13, 6));
  mapping.add(CtSlot(1, 4), CtSlot(13, 7));
  mapping.add(CtSlot(4, 1), CtSlot(14, 0));
  mapping.add(CtSlot(9, 7), CtSlot(14, 1));
  mapping.add(CtSlot(13, 0), CtSlot(14, 2));
  mapping.add(CtSlot(3, 3), CtSlot(14, 3));
  mapping.add(CtSlot(12, 2), CtSlot(14, 4));
  mapping.add(CtSlot(6, 2), CtSlot(14, 5));
  mapping.add(CtSlot(11, 6), CtSlot(14, 6));
  mapping.add(CtSlot(12, 4), CtSlot(14, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_54) {
  int64_t numCts = 15;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(4, 5), CtSlot(0, 0));
  mapping.add(CtSlot(12, 5), CtSlot(0, 1));
  mapping.add(CtSlot(1, 2), CtSlot(0, 2));
  mapping.add(CtSlot(14, 4), CtSlot(0, 3));
  mapping.add(CtSlot(3, 0), CtSlot(0, 4));
  mapping.add(CtSlot(13, 0), CtSlot(0, 5));
  mapping.add(CtSlot(3, 3), CtSlot(0, 6));
  mapping.add(CtSlot(11, 0), CtSlot(0, 7));
  mapping.add(CtSlot(12, 5), CtSlot(1, 0));
  mapping.add(CtSlot(12, 0), CtSlot(1, 1));
  mapping.add(CtSlot(11, 3), CtSlot(1, 2));
  mapping.add(CtSlot(5, 2), CtSlot(1, 3));
  mapping.add(CtSlot(11, 6), CtSlot(1, 4));
  mapping.add(CtSlot(12, 0), CtSlot(1, 5));
  mapping.add(CtSlot(10, 4), CtSlot(1, 6));
  mapping.add(CtSlot(8, 5), CtSlot(1, 7));
  mapping.add(CtSlot(3, 6), CtSlot(2, 0));
  mapping.add(CtSlot(2, 7), CtSlot(2, 1));
  mapping.add(CtSlot(11, 1), CtSlot(2, 2));
  mapping.add(CtSlot(12, 1), CtSlot(2, 3));
  mapping.add(CtSlot(13, 0), CtSlot(2, 4));
  mapping.add(CtSlot(4, 3), CtSlot(2, 5));
  mapping.add(CtSlot(3, 7), CtSlot(2, 6));
  mapping.add(CtSlot(7, 5), CtSlot(2, 7));
  mapping.add(CtSlot(6, 7), CtSlot(3, 0));
  mapping.add(CtSlot(11, 3), CtSlot(3, 1));
  mapping.add(CtSlot(9, 0), CtSlot(3, 2));
  mapping.add(CtSlot(14, 5), CtSlot(3, 3));
  mapping.add(CtSlot(3, 3), CtSlot(3, 4));
  mapping.add(CtSlot(11, 5), CtSlot(3, 5));
  mapping.add(CtSlot(8, 3), CtSlot(3, 6));
  mapping.add(CtSlot(6, 0), CtSlot(3, 7));
  mapping.add(CtSlot(6, 4), CtSlot(4, 0));
  mapping.add(CtSlot(6, 4), CtSlot(4, 1));
  mapping.add(CtSlot(14, 0), CtSlot(4, 2));
  mapping.add(CtSlot(0, 0), CtSlot(4, 3));
  mapping.add(CtSlot(11, 6), CtSlot(4, 4));
  mapping.add(CtSlot(9, 2), CtSlot(4, 5));
  mapping.add(CtSlot(11, 7), CtSlot(4, 6));
  mapping.add(CtSlot(5, 0), CtSlot(4, 7));
  mapping.add(CtSlot(1, 5), CtSlot(5, 0));
  mapping.add(CtSlot(4, 1), CtSlot(5, 1));
  mapping.add(CtSlot(4, 6), CtSlot(5, 2));
  mapping.add(CtSlot(7, 0), CtSlot(5, 3));
  mapping.add(CtSlot(11, 5), CtSlot(5, 4));
  mapping.add(CtSlot(7, 7), CtSlot(5, 5));
  mapping.add(CtSlot(7, 6), CtSlot(5, 6));
  mapping.add(CtSlot(12, 0), CtSlot(5, 7));
  mapping.add(CtSlot(3, 0), CtSlot(6, 0));
  mapping.add(CtSlot(1, 3), CtSlot(6, 1));
  mapping.add(CtSlot(5, 7), CtSlot(6, 2));
  mapping.add(CtSlot(0, 6), CtSlot(6, 3));
  mapping.add(CtSlot(4, 5), CtSlot(6, 4));
  mapping.add(CtSlot(11, 3), CtSlot(6, 5));
  mapping.add(CtSlot(2, 3), CtSlot(6, 6));
  mapping.add(CtSlot(4, 6), CtSlot(6, 7));
  mapping.add(CtSlot(8, 0), CtSlot(7, 0));
  mapping.add(CtSlot(7, 2), CtSlot(7, 1));
  mapping.add(CtSlot(5, 2), CtSlot(7, 2));
  mapping.add(CtSlot(4, 4), CtSlot(7, 3));
  mapping.add(CtSlot(6, 4), CtSlot(7, 4));
  mapping.add(CtSlot(8, 0), CtSlot(7, 5));
  mapping.add(CtSlot(4, 7), CtSlot(7, 6));
  mapping.add(CtSlot(10, 7), CtSlot(7, 7));
  mapping.add(CtSlot(0, 3), CtSlot(8, 0));
  mapping.add(CtSlot(14, 0), CtSlot(8, 1));
  mapping.add(CtSlot(5, 0), CtSlot(8, 2));
  mapping.add(CtSlot(9, 7), CtSlot(8, 3));
  mapping.add(CtSlot(3, 3), CtSlot(8, 4));
  mapping.add(CtSlot(10, 6), CtSlot(8, 5));
  mapping.add(CtSlot(14, 4), CtSlot(8, 6));
  mapping.add(CtSlot(12, 6), CtSlot(8, 7));
  mapping.add(CtSlot(10, 4), CtSlot(9, 0));
  mapping.add(CtSlot(0, 3), CtSlot(9, 1));
  mapping.add(CtSlot(10, 3), CtSlot(9, 2));
  mapping.add(CtSlot(8, 5), CtSlot(9, 3));
  mapping.add(CtSlot(7, 7), CtSlot(9, 4));
  mapping.add(CtSlot(12, 4), CtSlot(9, 5));
  mapping.add(CtSlot(0, 2), CtSlot(9, 6));
  mapping.add(CtSlot(7, 7), CtSlot(9, 7));
  mapping.add(CtSlot(13, 6), CtSlot(10, 0));
  mapping.add(CtSlot(10, 1), CtSlot(10, 1));
  mapping.add(CtSlot(2, 1), CtSlot(10, 2));
  mapping.add(CtSlot(7, 3), CtSlot(10, 3));
  mapping.add(CtSlot(14, 7), CtSlot(10, 4));
  mapping.add(CtSlot(5, 1), CtSlot(10, 5));
  mapping.add(CtSlot(9, 6), CtSlot(10, 6));
  mapping.add(CtSlot(0, 6), CtSlot(10, 7));
  mapping.add(CtSlot(9, 5), CtSlot(11, 0));
  mapping.add(CtSlot(9, 7), CtSlot(11, 1));
  mapping.add(CtSlot(7, 0), CtSlot(11, 2));
  mapping.add(CtSlot(6, 3), CtSlot(11, 3));
  mapping.add(CtSlot(6, 6), CtSlot(11, 4));
  mapping.add(CtSlot(10, 1), CtSlot(11, 5));
  mapping.add(CtSlot(1, 2), CtSlot(11, 6));
  mapping.add(CtSlot(4, 3), CtSlot(11, 7));
  mapping.add(CtSlot(4, 2), CtSlot(12, 0));
  mapping.add(CtSlot(1, 5), CtSlot(12, 1));
  mapping.add(CtSlot(13, 0), CtSlot(12, 2));
  mapping.add(CtSlot(7, 5), CtSlot(12, 3));
  mapping.add(CtSlot(12, 7), CtSlot(12, 4));
  mapping.add(CtSlot(7, 5), CtSlot(12, 5));
  mapping.add(CtSlot(11, 0), CtSlot(12, 6));
  mapping.add(CtSlot(10, 0), CtSlot(12, 7));
  mapping.add(CtSlot(6, 6), CtSlot(13, 0));
  mapping.add(CtSlot(2, 0), CtSlot(13, 1));
  mapping.add(CtSlot(8, 4), CtSlot(13, 2));
  mapping.add(CtSlot(2, 3), CtSlot(13, 3));
  mapping.add(CtSlot(5, 4), CtSlot(13, 4));
  mapping.add(CtSlot(1, 6), CtSlot(13, 5));
  mapping.add(CtSlot(3, 0), CtSlot(13, 6));
  mapping.add(CtSlot(1, 4), CtSlot(13, 7));
  mapping.add(CtSlot(4, 1), CtSlot(14, 0));
  mapping.add(CtSlot(9, 7), CtSlot(14, 1));
  mapping.add(CtSlot(13, 0), CtSlot(14, 2));
  mapping.add(CtSlot(3, 3), CtSlot(14, 3));
  mapping.add(CtSlot(12, 2), CtSlot(14, 4));
  mapping.add(CtSlot(6, 2), CtSlot(14, 5));
  mapping.add(CtSlot(11, 6), CtSlot(14, 6));
  mapping.add(CtSlot(12, 4), CtSlot(14, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_55) {
  int64_t numCts = 15;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(4, 5), CtSlot(0, 0));
  mapping.add(CtSlot(12, 5), CtSlot(0, 1));
  mapping.add(CtSlot(1, 2), CtSlot(0, 2));
  mapping.add(CtSlot(14, 4), CtSlot(0, 3));
  mapping.add(CtSlot(3, 0), CtSlot(0, 4));
  mapping.add(CtSlot(13, 0), CtSlot(0, 5));
  mapping.add(CtSlot(3, 3), CtSlot(0, 6));
  mapping.add(CtSlot(11, 0), CtSlot(0, 7));
  mapping.add(CtSlot(12, 5), CtSlot(1, 0));
  mapping.add(CtSlot(12, 0), CtSlot(1, 1));
  mapping.add(CtSlot(11, 3), CtSlot(1, 2));
  mapping.add(CtSlot(5, 2), CtSlot(1, 3));
  mapping.add(CtSlot(11, 6), CtSlot(1, 4));
  mapping.add(CtSlot(12, 0), CtSlot(1, 5));
  mapping.add(CtSlot(10, 4), CtSlot(1, 6));
  mapping.add(CtSlot(8, 5), CtSlot(1, 7));
  mapping.add(CtSlot(3, 6), CtSlot(2, 0));
  mapping.add(CtSlot(2, 7), CtSlot(2, 1));
  mapping.add(CtSlot(11, 1), CtSlot(2, 2));
  mapping.add(CtSlot(12, 1), CtSlot(2, 3));
  mapping.add(CtSlot(13, 0), CtSlot(2, 4));
  mapping.add(CtSlot(4, 3), CtSlot(2, 5));
  mapping.add(CtSlot(3, 7), CtSlot(2, 6));
  mapping.add(CtSlot(7, 5), CtSlot(2, 7));
  mapping.add(CtSlot(6, 7), CtSlot(3, 0));
  mapping.add(CtSlot(11, 3), CtSlot(3, 1));
  mapping.add(CtSlot(9, 0), CtSlot(3, 2));
  mapping.add(CtSlot(14, 5), CtSlot(3, 3));
  mapping.add(CtSlot(3, 3), CtSlot(3, 4));
  mapping.add(CtSlot(11, 5), CtSlot(3, 5));
  mapping.add(CtSlot(8, 3), CtSlot(3, 6));
  mapping.add(CtSlot(6, 0), CtSlot(3, 7));
  mapping.add(CtSlot(6, 4), CtSlot(4, 0));
  mapping.add(CtSlot(6, 4), CtSlot(4, 1));
  mapping.add(CtSlot(14, 0), CtSlot(4, 2));
  mapping.add(CtSlot(0, 0), CtSlot(4, 3));
  mapping.add(CtSlot(11, 6), CtSlot(4, 4));
  mapping.add(CtSlot(9, 2), CtSlot(4, 5));
  mapping.add(CtSlot(11, 7), CtSlot(4, 6));
  mapping.add(CtSlot(5, 0), CtSlot(4, 7));
  mapping.add(CtSlot(1, 5), CtSlot(5, 0));
  mapping.add(CtSlot(4, 1), CtSlot(5, 1));
  mapping.add(CtSlot(4, 6), CtSlot(5, 2));
  mapping.add(CtSlot(7, 0), CtSlot(5, 3));
  mapping.add(CtSlot(11, 5), CtSlot(5, 4));
  mapping.add(CtSlot(7, 7), CtSlot(5, 5));
  mapping.add(CtSlot(7, 6), CtSlot(5, 6));
  mapping.add(CtSlot(12, 0), CtSlot(5, 7));
  mapping.add(CtSlot(3, 0), CtSlot(6, 0));
  mapping.add(CtSlot(1, 3), CtSlot(6, 1));
  mapping.add(CtSlot(5, 7), CtSlot(6, 2));
  mapping.add(CtSlot(0, 6), CtSlot(6, 3));
  mapping.add(CtSlot(4, 5), CtSlot(6, 4));
  mapping.add(CtSlot(11, 3), CtSlot(6, 5));
  mapping.add(CtSlot(2, 3), CtSlot(6, 6));
  mapping.add(CtSlot(4, 6), CtSlot(6, 7));
  mapping.add(CtSlot(8, 0), CtSlot(7, 0));
  mapping.add(CtSlot(7, 2), CtSlot(7, 1));
  mapping.add(CtSlot(5, 2), CtSlot(7, 2));
  mapping.add(CtSlot(4, 4), CtSlot(7, 3));
  mapping.add(CtSlot(6, 4), CtSlot(7, 4));
  mapping.add(CtSlot(8, 0), CtSlot(7, 5));
  mapping.add(CtSlot(4, 7), CtSlot(7, 6));
  mapping.add(CtSlot(10, 7), CtSlot(7, 7));
  mapping.add(CtSlot(0, 3), CtSlot(8, 0));
  mapping.add(CtSlot(14, 0), CtSlot(8, 1));
  mapping.add(CtSlot(5, 0), CtSlot(8, 2));
  mapping.add(CtSlot(9, 7), CtSlot(8, 3));
  mapping.add(CtSlot(3, 3), CtSlot(8, 4));
  mapping.add(CtSlot(10, 6), CtSlot(8, 5));
  mapping.add(CtSlot(14, 4), CtSlot(8, 6));
  mapping.add(CtSlot(12, 6), CtSlot(8, 7));
  mapping.add(CtSlot(10, 4), CtSlot(9, 0));
  mapping.add(CtSlot(0, 3), CtSlot(9, 1));
  mapping.add(CtSlot(10, 3), CtSlot(9, 2));
  mapping.add(CtSlot(8, 5), CtSlot(9, 3));
  mapping.add(CtSlot(7, 7), CtSlot(9, 4));
  mapping.add(CtSlot(12, 4), CtSlot(9, 5));
  mapping.add(CtSlot(0, 2), CtSlot(9, 6));
  mapping.add(CtSlot(7, 7), CtSlot(9, 7));
  mapping.add(CtSlot(13, 6), CtSlot(10, 0));
  mapping.add(CtSlot(7, 1), CtSlot(10, 1));
  mapping.add(CtSlot(2, 1), CtSlot(10, 2));
  mapping.add(CtSlot(7, 3), CtSlot(10, 3));
  mapping.add(CtSlot(14, 7), CtSlot(10, 4));
  mapping.add(CtSlot(5, 1), CtSlot(10, 5));
  mapping.add(CtSlot(9, 6), CtSlot(10, 6));
  mapping.add(CtSlot(0, 6), CtSlot(10, 7));
  mapping.add(CtSlot(9, 5), CtSlot(11, 0));
  mapping.add(CtSlot(9, 7), CtSlot(11, 1));
  mapping.add(CtSlot(7, 0), CtSlot(11, 2));
  mapping.add(CtSlot(6, 3), CtSlot(11, 3));
  mapping.add(CtSlot(6, 6), CtSlot(11, 4));
  mapping.add(CtSlot(10, 1), CtSlot(11, 5));
  mapping.add(CtSlot(1, 2), CtSlot(11, 6));
  mapping.add(CtSlot(4, 3), CtSlot(11, 7));
  mapping.add(CtSlot(4, 2), CtSlot(12, 0));
  mapping.add(CtSlot(1, 5), CtSlot(12, 1));
  mapping.add(CtSlot(13, 0), CtSlot(12, 2));
  mapping.add(CtSlot(7, 5), CtSlot(12, 3));
  mapping.add(CtSlot(12, 7), CtSlot(12, 4));
  mapping.add(CtSlot(7, 5), CtSlot(12, 5));
  mapping.add(CtSlot(11, 0), CtSlot(12, 6));
  mapping.add(CtSlot(10, 0), CtSlot(12, 7));
  mapping.add(CtSlot(6, 6), CtSlot(13, 0));
  mapping.add(CtSlot(2, 0), CtSlot(13, 1));
  mapping.add(CtSlot(8, 4), CtSlot(13, 2));
  mapping.add(CtSlot(2, 3), CtSlot(13, 3));
  mapping.add(CtSlot(5, 4), CtSlot(13, 4));
  mapping.add(CtSlot(1, 6), CtSlot(13, 5));
  mapping.add(CtSlot(3, 0), CtSlot(13, 6));
  mapping.add(CtSlot(1, 4), CtSlot(13, 7));
  mapping.add(CtSlot(4, 1), CtSlot(14, 0));
  mapping.add(CtSlot(9, 7), CtSlot(14, 1));
  mapping.add(CtSlot(13, 0), CtSlot(14, 2));
  mapping.add(CtSlot(3, 3), CtSlot(14, 3));
  mapping.add(CtSlot(12, 2), CtSlot(14, 4));
  mapping.add(CtSlot(6, 2), CtSlot(14, 5));
  mapping.add(CtSlot(11, 6), CtSlot(14, 6));
  mapping.add(CtSlot(12, 4), CtSlot(14, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_56) {
  int64_t numCts = 15;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(4, 5), CtSlot(0, 0));
  mapping.add(CtSlot(12, 5), CtSlot(0, 1));
  mapping.add(CtSlot(1, 2), CtSlot(0, 2));
  mapping.add(CtSlot(14, 4), CtSlot(0, 3));
  mapping.add(CtSlot(3, 0), CtSlot(0, 4));
  mapping.add(CtSlot(13, 0), CtSlot(0, 5));
  mapping.add(CtSlot(3, 3), CtSlot(0, 6));
  mapping.add(CtSlot(11, 0), CtSlot(0, 7));
  mapping.add(CtSlot(12, 5), CtSlot(1, 0));
  mapping.add(CtSlot(12, 0), CtSlot(1, 1));
  mapping.add(CtSlot(11, 3), CtSlot(1, 2));
  mapping.add(CtSlot(5, 2), CtSlot(1, 3));
  mapping.add(CtSlot(11, 6), CtSlot(1, 4));
  mapping.add(CtSlot(12, 0), CtSlot(1, 5));
  mapping.add(CtSlot(10, 4), CtSlot(1, 6));
  mapping.add(CtSlot(8, 5), CtSlot(1, 7));
  mapping.add(CtSlot(3, 6), CtSlot(2, 0));
  mapping.add(CtSlot(2, 7), CtSlot(2, 1));
  mapping.add(CtSlot(11, 1), CtSlot(2, 2));
  mapping.add(CtSlot(12, 1), CtSlot(2, 3));
  mapping.add(CtSlot(13, 0), CtSlot(2, 4));
  mapping.add(CtSlot(4, 3), CtSlot(2, 5));
  mapping.add(CtSlot(3, 7), CtSlot(2, 6));
  mapping.add(CtSlot(7, 5), CtSlot(2, 7));
  mapping.add(CtSlot(6, 7), CtSlot(3, 0));
  mapping.add(CtSlot(11, 3), CtSlot(3, 1));
  mapping.add(CtSlot(9, 0), CtSlot(3, 2));
  mapping.add(CtSlot(14, 5), CtSlot(3, 3));
  mapping.add(CtSlot(3, 3), CtSlot(3, 4));
  mapping.add(CtSlot(11, 5), CtSlot(3, 5));
  mapping.add(CtSlot(8, 3), CtSlot(3, 6));
  mapping.add(CtSlot(6, 0), CtSlot(3, 7));
  mapping.add(CtSlot(6, 4), CtSlot(4, 0));
  mapping.add(CtSlot(6, 4), CtSlot(4, 1));
  mapping.add(CtSlot(14, 0), CtSlot(4, 2));
  mapping.add(CtSlot(0, 0), CtSlot(4, 3));
  mapping.add(CtSlot(11, 6), CtSlot(4, 4));
  mapping.add(CtSlot(9, 2), CtSlot(4, 5));
  mapping.add(CtSlot(11, 7), CtSlot(4, 6));
  mapping.add(CtSlot(5, 0), CtSlot(4, 7));
  mapping.add(CtSlot(1, 5), CtSlot(5, 0));
  mapping.add(CtSlot(4, 1), CtSlot(5, 1));
  mapping.add(CtSlot(4, 6), CtSlot(5, 2));
  mapping.add(CtSlot(7, 0), CtSlot(5, 3));
  mapping.add(CtSlot(11, 5), CtSlot(5, 4));
  mapping.add(CtSlot(7, 7), CtSlot(5, 5));
  mapping.add(CtSlot(7, 6), CtSlot(5, 6));
  mapping.add(CtSlot(12, 0), CtSlot(5, 7));
  mapping.add(CtSlot(3, 0), CtSlot(6, 0));
  mapping.add(CtSlot(1, 3), CtSlot(6, 1));
  mapping.add(CtSlot(5, 7), CtSlot(6, 2));
  mapping.add(CtSlot(0, 6), CtSlot(6, 3));
  mapping.add(CtSlot(4, 5), CtSlot(6, 4));
  mapping.add(CtSlot(11, 3), CtSlot(6, 5));
  mapping.add(CtSlot(2, 3), CtSlot(6, 6));
  mapping.add(CtSlot(4, 6), CtSlot(6, 7));
  mapping.add(CtSlot(8, 0), CtSlot(7, 0));
  mapping.add(CtSlot(7, 2), CtSlot(7, 1));
  mapping.add(CtSlot(5, 2), CtSlot(7, 2));
  mapping.add(CtSlot(4, 4), CtSlot(7, 3));
  mapping.add(CtSlot(5, 4), CtSlot(7, 4));
  mapping.add(CtSlot(8, 0), CtSlot(7, 5));
  mapping.add(CtSlot(4, 7), CtSlot(7, 6));
  mapping.add(CtSlot(10, 7), CtSlot(7, 7));
  mapping.add(CtSlot(0, 3), CtSlot(8, 0));
  mapping.add(CtSlot(14, 0), CtSlot(8, 1));
  mapping.add(CtSlot(5, 0), CtSlot(8, 2));
  mapping.add(CtSlot(9, 7), CtSlot(8, 3));
  mapping.add(CtSlot(3, 3), CtSlot(8, 4));
  mapping.add(CtSlot(10, 6), CtSlot(8, 5));
  mapping.add(CtSlot(14, 4), CtSlot(8, 6));
  mapping.add(CtSlot(12, 6), CtSlot(8, 7));
  mapping.add(CtSlot(10, 4), CtSlot(9, 0));
  mapping.add(CtSlot(0, 3), CtSlot(9, 1));
  mapping.add(CtSlot(10, 3), CtSlot(9, 2));
  mapping.add(CtSlot(8, 5), CtSlot(9, 3));
  mapping.add(CtSlot(7, 7), CtSlot(9, 4));
  mapping.add(CtSlot(12, 4), CtSlot(9, 5));
  mapping.add(CtSlot(0, 2), CtSlot(9, 6));
  mapping.add(CtSlot(7, 7), CtSlot(9, 7));
  mapping.add(CtSlot(13, 6), CtSlot(10, 0));
  mapping.add(CtSlot(7, 1), CtSlot(10, 1));
  mapping.add(CtSlot(2, 1), CtSlot(10, 2));
  mapping.add(CtSlot(7, 3), CtSlot(10, 3));
  mapping.add(CtSlot(14, 7), CtSlot(10, 4));
  mapping.add(CtSlot(5, 1), CtSlot(10, 5));
  mapping.add(CtSlot(9, 6), CtSlot(10, 6));
  mapping.add(CtSlot(0, 6), CtSlot(10, 7));
  mapping.add(CtSlot(9, 5), CtSlot(11, 0));
  mapping.add(CtSlot(9, 7), CtSlot(11, 1));
  mapping.add(CtSlot(7, 0), CtSlot(11, 2));
  mapping.add(CtSlot(6, 3), CtSlot(11, 3));
  mapping.add(CtSlot(6, 6), CtSlot(11, 4));
  mapping.add(CtSlot(10, 1), CtSlot(11, 5));
  mapping.add(CtSlot(1, 2), CtSlot(11, 6));
  mapping.add(CtSlot(4, 3), CtSlot(11, 7));
  mapping.add(CtSlot(4, 2), CtSlot(12, 0));
  mapping.add(CtSlot(1, 5), CtSlot(12, 1));
  mapping.add(CtSlot(13, 0), CtSlot(12, 2));
  mapping.add(CtSlot(7, 5), CtSlot(12, 3));
  mapping.add(CtSlot(12, 7), CtSlot(12, 4));
  mapping.add(CtSlot(7, 5), CtSlot(12, 5));
  mapping.add(CtSlot(11, 0), CtSlot(12, 6));
  mapping.add(CtSlot(10, 0), CtSlot(12, 7));
  mapping.add(CtSlot(6, 6), CtSlot(13, 0));
  mapping.add(CtSlot(2, 0), CtSlot(13, 1));
  mapping.add(CtSlot(8, 4), CtSlot(13, 2));
  mapping.add(CtSlot(2, 3), CtSlot(13, 3));
  mapping.add(CtSlot(5, 4), CtSlot(13, 4));
  mapping.add(CtSlot(1, 6), CtSlot(13, 5));
  mapping.add(CtSlot(3, 0), CtSlot(13, 6));
  mapping.add(CtSlot(1, 4), CtSlot(13, 7));
  mapping.add(CtSlot(4, 1), CtSlot(14, 0));
  mapping.add(CtSlot(9, 7), CtSlot(14, 1));
  mapping.add(CtSlot(13, 0), CtSlot(14, 2));
  mapping.add(CtSlot(3, 3), CtSlot(14, 3));
  mapping.add(CtSlot(12, 2), CtSlot(14, 4));
  mapping.add(CtSlot(6, 2), CtSlot(14, 5));
  mapping.add(CtSlot(11, 6), CtSlot(14, 6));
  mapping.add(CtSlot(12, 4), CtSlot(14, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_57) {
  int64_t numCts = 15;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(4, 5), CtSlot(0, 0));
  mapping.add(CtSlot(12, 5), CtSlot(0, 1));
  mapping.add(CtSlot(1, 2), CtSlot(0, 2));
  mapping.add(CtSlot(14, 4), CtSlot(0, 3));
  mapping.add(CtSlot(3, 0), CtSlot(0, 4));
  mapping.add(CtSlot(13, 0), CtSlot(0, 5));
  mapping.add(CtSlot(3, 3), CtSlot(0, 6));
  mapping.add(CtSlot(11, 0), CtSlot(0, 7));
  mapping.add(CtSlot(12, 5), CtSlot(1, 0));
  mapping.add(CtSlot(12, 0), CtSlot(1, 1));
  mapping.add(CtSlot(11, 3), CtSlot(1, 2));
  mapping.add(CtSlot(5, 2), CtSlot(1, 3));
  mapping.add(CtSlot(11, 6), CtSlot(1, 4));
  mapping.add(CtSlot(12, 0), CtSlot(1, 5));
  mapping.add(CtSlot(10, 4), CtSlot(1, 6));
  mapping.add(CtSlot(8, 5), CtSlot(1, 7));
  mapping.add(CtSlot(3, 6), CtSlot(2, 0));
  mapping.add(CtSlot(2, 7), CtSlot(2, 1));
  mapping.add(CtSlot(11, 1), CtSlot(2, 2));
  mapping.add(CtSlot(12, 1), CtSlot(2, 3));
  mapping.add(CtSlot(13, 0), CtSlot(2, 4));
  mapping.add(CtSlot(4, 3), CtSlot(2, 5));
  mapping.add(CtSlot(3, 7), CtSlot(2, 6));
  mapping.add(CtSlot(7, 5), CtSlot(2, 7));
  mapping.add(CtSlot(6, 7), CtSlot(3, 0));
  mapping.add(CtSlot(11, 3), CtSlot(3, 1));
  mapping.add(CtSlot(9, 0), CtSlot(3, 2));
  mapping.add(CtSlot(14, 5), CtSlot(3, 3));
  mapping.add(CtSlot(3, 3), CtSlot(3, 4));
  mapping.add(CtSlot(11, 5), CtSlot(3, 5));
  mapping.add(CtSlot(8, 3), CtSlot(3, 6));
  mapping.add(CtSlot(6, 0), CtSlot(3, 7));
  mapping.add(CtSlot(6, 4), CtSlot(4, 0));
  mapping.add(CtSlot(6, 4), CtSlot(4, 1));
  mapping.add(CtSlot(14, 0), CtSlot(4, 2));
  mapping.add(CtSlot(0, 0), CtSlot(4, 3));
  mapping.add(CtSlot(11, 6), CtSlot(4, 4));
  mapping.add(CtSlot(9, 2), CtSlot(4, 5));
  mapping.add(CtSlot(11, 7), CtSlot(4, 6));
  mapping.add(CtSlot(5, 0), CtSlot(4, 7));
  mapping.add(CtSlot(1, 5), CtSlot(5, 0));
  mapping.add(CtSlot(4, 1), CtSlot(5, 1));
  mapping.add(CtSlot(4, 6), CtSlot(5, 2));
  mapping.add(CtSlot(7, 0), CtSlot(5, 3));
  mapping.add(CtSlot(11, 5), CtSlot(5, 4));
  mapping.add(CtSlot(7, 7), CtSlot(5, 5));
  mapping.add(CtSlot(7, 6), CtSlot(5, 6));
  mapping.add(CtSlot(12, 0), CtSlot(5, 7));
  mapping.add(CtSlot(3, 0), CtSlot(6, 0));
  mapping.add(CtSlot(1, 3), CtSlot(6, 1));
  mapping.add(CtSlot(5, 7), CtSlot(6, 2));
  mapping.add(CtSlot(0, 6), CtSlot(6, 3));
  mapping.add(CtSlot(4, 5), CtSlot(6, 4));
  mapping.add(CtSlot(11, 3), CtSlot(6, 5));
  mapping.add(CtSlot(2, 3), CtSlot(6, 6));
  mapping.add(CtSlot(4, 6), CtSlot(6, 7));
  mapping.add(CtSlot(8, 0), CtSlot(7, 0));
  mapping.add(CtSlot(7, 2), CtSlot(7, 1));
  mapping.add(CtSlot(5, 2), CtSlot(7, 2));
  mapping.add(CtSlot(4, 4), CtSlot(7, 3));
  mapping.add(CtSlot(5, 4), CtSlot(7, 4));
  mapping.add(CtSlot(8, 0), CtSlot(7, 5));
  mapping.add(CtSlot(4, 7), CtSlot(7, 6));
  mapping.add(CtSlot(10, 7), CtSlot(7, 7));
  mapping.add(CtSlot(0, 3), CtSlot(8, 0));
  mapping.add(CtSlot(14, 0), CtSlot(8, 1));
  mapping.add(CtSlot(5, 0), CtSlot(8, 2));
  mapping.add(CtSlot(9, 7), CtSlot(8, 3));
  mapping.add(CtSlot(3, 3), CtSlot(8, 4));
  mapping.add(CtSlot(10, 6), CtSlot(8, 5));
  mapping.add(CtSlot(14, 4), CtSlot(8, 6));
  mapping.add(CtSlot(12, 6), CtSlot(8, 7));
  mapping.add(CtSlot(10, 4), CtSlot(9, 0));
  mapping.add(CtSlot(0, 3), CtSlot(9, 1));
  mapping.add(CtSlot(10, 3), CtSlot(9, 2));
  mapping.add(CtSlot(8, 5), CtSlot(9, 3));
  mapping.add(CtSlot(7, 7), CtSlot(9, 4));
  mapping.add(CtSlot(12, 4), CtSlot(9, 5));
  mapping.add(CtSlot(0, 2), CtSlot(9, 6));
  mapping.add(CtSlot(7, 7), CtSlot(9, 7));
  mapping.add(CtSlot(13, 6), CtSlot(10, 0));
  mapping.add(CtSlot(7, 1), CtSlot(10, 1));
  mapping.add(CtSlot(2, 1), CtSlot(10, 2));
  mapping.add(CtSlot(7, 3), CtSlot(10, 3));
  mapping.add(CtSlot(14, 7), CtSlot(10, 4));
  mapping.add(CtSlot(5, 1), CtSlot(10, 5));
  mapping.add(CtSlot(9, 6), CtSlot(10, 6));
  mapping.add(CtSlot(0, 6), CtSlot(10, 7));
  mapping.add(CtSlot(9, 5), CtSlot(11, 0));
  mapping.add(CtSlot(9, 7), CtSlot(11, 1));
  mapping.add(CtSlot(7, 0), CtSlot(11, 2));
  mapping.add(CtSlot(6, 3), CtSlot(11, 3));
  mapping.add(CtSlot(6, 6), CtSlot(11, 4));
  mapping.add(CtSlot(10, 1), CtSlot(11, 5));
  mapping.add(CtSlot(1, 2), CtSlot(11, 6));
  mapping.add(CtSlot(4, 3), CtSlot(11, 7));
  mapping.add(CtSlot(4, 2), CtSlot(12, 0));
  mapping.add(CtSlot(1, 5), CtSlot(12, 1));
  mapping.add(CtSlot(13, 0), CtSlot(12, 2));
  mapping.add(CtSlot(7, 5), CtSlot(12, 3));
  mapping.add(CtSlot(12, 7), CtSlot(12, 4));
  mapping.add(CtSlot(7, 5), CtSlot(12, 5));
  mapping.add(CtSlot(11, 0), CtSlot(12, 6));
  mapping.add(CtSlot(10, 0), CtSlot(12, 7));
  mapping.add(CtSlot(6, 6), CtSlot(13, 0));
  mapping.add(CtSlot(4, 0), CtSlot(13, 1));
  mapping.add(CtSlot(8, 4), CtSlot(13, 2));
  mapping.add(CtSlot(2, 3), CtSlot(13, 3));
  mapping.add(CtSlot(5, 4), CtSlot(13, 4));
  mapping.add(CtSlot(1, 6), CtSlot(13, 5));
  mapping.add(CtSlot(3, 0), CtSlot(13, 6));
  mapping.add(CtSlot(1, 4), CtSlot(13, 7));
  mapping.add(CtSlot(4, 1), CtSlot(14, 0));
  mapping.add(CtSlot(9, 7), CtSlot(14, 1));
  mapping.add(CtSlot(13, 0), CtSlot(14, 2));
  mapping.add(CtSlot(3, 3), CtSlot(14, 3));
  mapping.add(CtSlot(12, 2), CtSlot(14, 4));
  mapping.add(CtSlot(6, 2), CtSlot(14, 5));
  mapping.add(CtSlot(11, 6), CtSlot(14, 6));
  mapping.add(CtSlot(12, 4), CtSlot(14, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_58) {
  int64_t numCts = 24;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(23, 4), CtSlot(0, 0));
  mapping.add(CtSlot(16, 7), CtSlot(0, 1));
  mapping.add(CtSlot(1, 1), CtSlot(0, 2));
  mapping.add(CtSlot(0, 0), CtSlot(0, 3));
  mapping.add(CtSlot(8, 4), CtSlot(0, 4));
  mapping.add(CtSlot(9, 0), CtSlot(0, 5));
  mapping.add(CtSlot(10, 7), CtSlot(0, 6));
  mapping.add(CtSlot(23, 1), CtSlot(0, 7));
  mapping.add(CtSlot(17, 5), CtSlot(1, 0));
  mapping.add(CtSlot(18, 4), CtSlot(1, 1));
  mapping.add(CtSlot(17, 5), CtSlot(1, 2));
  mapping.add(CtSlot(5, 1), CtSlot(1, 3));
  mapping.add(CtSlot(2, 7), CtSlot(1, 4));
  mapping.add(CtSlot(6, 6), CtSlot(1, 5));
  mapping.add(CtSlot(17, 1), CtSlot(1, 6));
  mapping.add(CtSlot(19, 4), CtSlot(1, 7));
  mapping.add(CtSlot(14, 7), CtSlot(2, 0));
  mapping.add(CtSlot(10, 4), CtSlot(2, 1));
  mapping.add(CtSlot(0, 0), CtSlot(2, 2));
  mapping.add(CtSlot(18, 4), CtSlot(2, 3));
  mapping.add(CtSlot(16, 4), CtSlot(2, 4));
  mapping.add(CtSlot(4, 4), CtSlot(2, 5));
  mapping.add(CtSlot(16, 7), CtSlot(2, 6));
  mapping.add(CtSlot(9, 3), CtSlot(2, 7));
  mapping.add(CtSlot(0, 6), CtSlot(3, 0));
  mapping.add(CtSlot(23, 0), CtSlot(3, 1));
  mapping.add(CtSlot(5, 5), CtSlot(3, 2));
  mapping.add(CtSlot(20, 3), CtSlot(3, 3));
  mapping.add(CtSlot(12, 1), CtSlot(3, 4));
  mapping.add(CtSlot(6, 7), CtSlot(3, 5));
  mapping.add(CtSlot(14, 0), CtSlot(3, 6));
  mapping.add(CtSlot(9, 4), CtSlot(3, 7));
  mapping.add(CtSlot(2, 4), CtSlot(4, 0));
  mapping.add(CtSlot(10, 0), CtSlot(4, 1));
  mapping.add(CtSlot(13, 5), CtSlot(4, 2));
  mapping.add(CtSlot(17, 5), CtSlot(4, 3));
  mapping.add(CtSlot(10, 1), CtSlot(4, 4));
  mapping.add(CtSlot(3, 7), CtSlot(4, 5));
  mapping.add(CtSlot(0, 5), CtSlot(4, 6));
  mapping.add(CtSlot(4, 5), CtSlot(4, 7));
  mapping.add(CtSlot(6, 6), CtSlot(5, 0));
  mapping.add(CtSlot(6, 6), CtSlot(5, 1));
  mapping.add(CtSlot(12, 5), CtSlot(5, 2));
  mapping.add(CtSlot(15, 0), CtSlot(5, 3));
  mapping.add(CtSlot(5, 6), CtSlot(5, 4));
  mapping.add(CtSlot(3, 0), CtSlot(5, 5));
  mapping.add(CtSlot(17, 2), CtSlot(5, 6));
  mapping.add(CtSlot(7, 5), CtSlot(5, 7));
  mapping.add(CtSlot(1, 1), CtSlot(6, 0));
  mapping.add(CtSlot(22, 5), CtSlot(6, 1));
  mapping.add(CtSlot(13, 7), CtSlot(6, 2));
  mapping.add(CtSlot(11, 4), CtSlot(6, 3));
  mapping.add(CtSlot(22, 1), CtSlot(6, 4));
  mapping.add(CtSlot(3, 5), CtSlot(6, 5));
  mapping.add(CtSlot(7, 7), CtSlot(6, 6));
  mapping.add(CtSlot(2, 1), CtSlot(6, 7));
  mapping.add(CtSlot(16, 1), CtSlot(7, 0));
  mapping.add(CtSlot(3, 7), CtSlot(7, 1));
  mapping.add(CtSlot(8, 0), CtSlot(7, 2));
  mapping.add(CtSlot(17, 6), CtSlot(7, 3));
  mapping.add(CtSlot(14, 5), CtSlot(7, 4));
  mapping.add(CtSlot(0, 3), CtSlot(7, 5));
  mapping.add(CtSlot(23, 0), CtSlot(7, 6));
  mapping.add(CtSlot(7, 6), CtSlot(7, 7));
  mapping.add(CtSlot(20, 7), CtSlot(8, 0));
  mapping.add(CtSlot(0, 2), CtSlot(8, 1));
  mapping.add(CtSlot(5, 6), CtSlot(8, 2));
  mapping.add(CtSlot(6, 7), CtSlot(8, 3));
  mapping.add(CtSlot(9, 7), CtSlot(8, 4));
  mapping.add(CtSlot(18, 7), CtSlot(8, 5));
  mapping.add(CtSlot(1, 1), CtSlot(8, 6));
  mapping.add(CtSlot(7, 7), CtSlot(8, 7));
  mapping.add(CtSlot(12, 7), CtSlot(9, 0));
  mapping.add(CtSlot(7, 5), CtSlot(9, 1));
  mapping.add(CtSlot(4, 2), CtSlot(9, 2));
  mapping.add(CtSlot(2, 0), CtSlot(9, 3));
  mapping.add(CtSlot(13, 5), CtSlot(9, 4));
  mapping.add(CtSlot(19, 0), CtSlot(9, 5));
  mapping.add(CtSlot(1, 0), CtSlot(9, 6));
  mapping.add(CtSlot(2, 4), CtSlot(9, 7));
  mapping.add(CtSlot(13, 2), CtSlot(10, 0));
  mapping.add(CtSlot(11, 0), CtSlot(10, 1));
  mapping.add(CtSlot(13, 4), CtSlot(10, 2));
  mapping.add(CtSlot(16, 5), CtSlot(10, 3));
  mapping.add(CtSlot(2, 1), CtSlot(10, 4));
  mapping.add(CtSlot(4, 1), CtSlot(10, 5));
  mapping.add(CtSlot(10, 1), CtSlot(10, 6));
  mapping.add(CtSlot(11, 2), CtSlot(10, 7));
  mapping.add(CtSlot(8, 0), CtSlot(11, 0));
  mapping.add(CtSlot(21, 0), CtSlot(11, 1));
  mapping.add(CtSlot(10, 2), CtSlot(11, 2));
  mapping.add(CtSlot(16, 0), CtSlot(11, 3));
  mapping.add(CtSlot(5, 7), CtSlot(11, 4));
  mapping.add(CtSlot(23, 6), CtSlot(11, 5));
  mapping.add(CtSlot(4, 6), CtSlot(11, 6));
  mapping.add(CtSlot(6, 3), CtSlot(11, 7));
  mapping.add(CtSlot(22, 1), CtSlot(12, 0));
  mapping.add(CtSlot(1, 5), CtSlot(12, 1));
  mapping.add(CtSlot(2, 4), CtSlot(12, 2));
  mapping.add(CtSlot(4, 3), CtSlot(12, 3));
  mapping.add(CtSlot(8, 3), CtSlot(12, 4));
  mapping.add(CtSlot(16, 4), CtSlot(12, 5));
  mapping.add(CtSlot(23, 5), CtSlot(12, 6));
  mapping.add(CtSlot(19, 0), CtSlot(12, 7));
  mapping.add(CtSlot(11, 7), CtSlot(13, 0));
  mapping.add(CtSlot(13, 4), CtSlot(13, 1));
  mapping.add(CtSlot(12, 1), CtSlot(13, 2));
  mapping.add(CtSlot(2, 3), CtSlot(13, 3));
  mapping.add(CtSlot(21, 5), CtSlot(13, 4));
  mapping.add(CtSlot(4, 6), CtSlot(13, 5));
  mapping.add(CtSlot(16, 5), CtSlot(13, 6));
  mapping.add(CtSlot(12, 6), CtSlot(13, 7));
  mapping.add(CtSlot(2, 7), CtSlot(14, 0));
  mapping.add(CtSlot(2, 3), CtSlot(14, 1));
  mapping.add(CtSlot(21, 7), CtSlot(14, 2));
  mapping.add(CtSlot(23, 4), CtSlot(14, 3));
  mapping.add(CtSlot(19, 7), CtSlot(14, 4));
  mapping.add(CtSlot(0, 1), CtSlot(14, 5));
  mapping.add(CtSlot(15, 4), CtSlot(14, 6));
  mapping.add(CtSlot(0, 6), CtSlot(14, 7));
  mapping.add(CtSlot(11, 0), CtSlot(15, 0));
  mapping.add(CtSlot(17, 7), CtSlot(15, 1));
  mapping.add(CtSlot(18, 0), CtSlot(15, 2));
  mapping.add(CtSlot(15, 0), CtSlot(15, 3));
  mapping.add(CtSlot(4, 1), CtSlot(15, 4));
  mapping.add(CtSlot(12, 6), CtSlot(15, 5));
  mapping.add(CtSlot(12, 5), CtSlot(15, 6));
  mapping.add(CtSlot(5, 2), CtSlot(15, 7));
  mapping.add(CtSlot(2, 5), CtSlot(16, 0));
  mapping.add(CtSlot(23, 0), CtSlot(16, 1));
  mapping.add(CtSlot(10, 2), CtSlot(16, 2));
  mapping.add(CtSlot(9, 7), CtSlot(16, 3));
  mapping.add(CtSlot(2, 6), CtSlot(16, 4));
  mapping.add(CtSlot(7, 0), CtSlot(16, 5));
  mapping.add(CtSlot(20, 2), CtSlot(16, 6));
  mapping.add(CtSlot(13, 0), CtSlot(16, 7));
  mapping.add(CtSlot(7, 4), CtSlot(17, 0));
  mapping.add(CtSlot(6, 4), CtSlot(17, 1));
  mapping.add(CtSlot(12, 1), CtSlot(17, 2));
  mapping.add(CtSlot(5, 5), CtSlot(17, 3));
  mapping.add(CtSlot(8, 4), CtSlot(17, 4));
  mapping.add(CtSlot(14, 7), CtSlot(17, 5));
  mapping.add(CtSlot(18, 3), CtSlot(17, 6));
  mapping.add(CtSlot(19, 6), CtSlot(17, 7));
  mapping.add(CtSlot(16, 2), CtSlot(18, 0));
  mapping.add(CtSlot(14, 7), CtSlot(18, 1));
  mapping.add(CtSlot(3, 3), CtSlot(18, 2));
  mapping.add(CtSlot(21, 7), CtSlot(18, 3));
  mapping.add(CtSlot(17, 6), CtSlot(18, 4));
  mapping.add(CtSlot(5, 4), CtSlot(18, 5));
  mapping.add(CtSlot(8, 2), CtSlot(18, 6));
  mapping.add(CtSlot(19, 3), CtSlot(18, 7));
  mapping.add(CtSlot(11, 7), CtSlot(19, 0));
  mapping.add(CtSlot(8, 5), CtSlot(19, 1));
  mapping.add(CtSlot(17, 4), CtSlot(19, 2));
  mapping.add(CtSlot(6, 6), CtSlot(19, 3));
  mapping.add(CtSlot(14, 0), CtSlot(19, 4));
  mapping.add(CtSlot(20, 5), CtSlot(19, 5));
  mapping.add(CtSlot(0, 1), CtSlot(19, 6));
  mapping.add(CtSlot(12, 4), CtSlot(19, 7));
  mapping.add(CtSlot(13, 5), CtSlot(20, 0));
  mapping.add(CtSlot(20, 4), CtSlot(20, 1));
  mapping.add(CtSlot(11, 1), CtSlot(20, 2));
  mapping.add(CtSlot(2, 6), CtSlot(20, 3));
  mapping.add(CtSlot(7, 7), CtSlot(20, 4));
  mapping.add(CtSlot(6, 1), CtSlot(20, 5));
  mapping.add(CtSlot(12, 6), CtSlot(20, 6));
  mapping.add(CtSlot(19, 2), CtSlot(20, 7));
  mapping.add(CtSlot(18, 7), CtSlot(21, 0));
  mapping.add(CtSlot(14, 5), CtSlot(21, 1));
  mapping.add(CtSlot(12, 5), CtSlot(21, 2));
  mapping.add(CtSlot(18, 4), CtSlot(21, 3));
  mapping.add(CtSlot(22, 5), CtSlot(21, 4));
  mapping.add(CtSlot(2, 0), CtSlot(21, 5));
  mapping.add(CtSlot(4, 7), CtSlot(21, 6));
  mapping.add(CtSlot(15, 0), CtSlot(21, 7));
  mapping.add(CtSlot(19, 1), CtSlot(22, 0));
  mapping.add(CtSlot(0, 7), CtSlot(22, 1));
  mapping.add(CtSlot(14, 7), CtSlot(22, 2));
  mapping.add(CtSlot(4, 7), CtSlot(22, 3));
  mapping.add(CtSlot(16, 5), CtSlot(22, 4));
  mapping.add(CtSlot(10, 1), CtSlot(22, 5));
  mapping.add(CtSlot(19, 2), CtSlot(22, 6));
  mapping.add(CtSlot(4, 1), CtSlot(22, 7));
  mapping.add(CtSlot(11, 1), CtSlot(23, 0));
  mapping.add(CtSlot(2, 2), CtSlot(23, 1));
  mapping.add(CtSlot(19, 6), CtSlot(23, 2));
  mapping.add(CtSlot(16, 6), CtSlot(23, 3));
  mapping.add(CtSlot(10, 1), CtSlot(23, 4));
  mapping.add(CtSlot(10, 1), CtSlot(23, 5));
  mapping.add(CtSlot(23, 5), CtSlot(23, 6));
  mapping.add(CtSlot(5, 1), CtSlot(23, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_59) {
  int64_t numCts = 24;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(23, 4), CtSlot(0, 0));
  mapping.add(CtSlot(16, 7), CtSlot(0, 1));
  mapping.add(CtSlot(1, 1), CtSlot(0, 2));
  mapping.add(CtSlot(0, 0), CtSlot(0, 3));
  mapping.add(CtSlot(8, 4), CtSlot(0, 4));
  mapping.add(CtSlot(9, 0), CtSlot(0, 5));
  mapping.add(CtSlot(10, 7), CtSlot(0, 6));
  mapping.add(CtSlot(23, 1), CtSlot(0, 7));
  mapping.add(CtSlot(17, 5), CtSlot(1, 0));
  mapping.add(CtSlot(18, 4), CtSlot(1, 1));
  mapping.add(CtSlot(17, 5), CtSlot(1, 2));
  mapping.add(CtSlot(5, 1), CtSlot(1, 3));
  mapping.add(CtSlot(2, 7), CtSlot(1, 4));
  mapping.add(CtSlot(6, 6), CtSlot(1, 5));
  mapping.add(CtSlot(17, 1), CtSlot(1, 6));
  mapping.add(CtSlot(19, 4), CtSlot(1, 7));
  mapping.add(CtSlot(14, 7), CtSlot(2, 0));
  mapping.add(CtSlot(10, 4), CtSlot(2, 1));
  mapping.add(CtSlot(0, 0), CtSlot(2, 2));
  mapping.add(CtSlot(18, 4), CtSlot(2, 3));
  mapping.add(CtSlot(16, 4), CtSlot(2, 4));
  mapping.add(CtSlot(4, 4), CtSlot(2, 5));
  mapping.add(CtSlot(16, 7), CtSlot(2, 6));
  mapping.add(CtSlot(9, 3), CtSlot(2, 7));
  mapping.add(CtSlot(0, 6), CtSlot(3, 0));
  mapping.add(CtSlot(23, 0), CtSlot(3, 1));
  mapping.add(CtSlot(5, 5), CtSlot(3, 2));
  mapping.add(CtSlot(20, 3), CtSlot(3, 3));
  mapping.add(CtSlot(12, 1), CtSlot(3, 4));
  mapping.add(CtSlot(6, 7), CtSlot(3, 5));
  mapping.add(CtSlot(14, 0), CtSlot(3, 6));
  mapping.add(CtSlot(9, 4), CtSlot(3, 7));
  mapping.add(CtSlot(2, 4), CtSlot(4, 0));
  mapping.add(CtSlot(10, 0), CtSlot(4, 1));
  mapping.add(CtSlot(13, 5), CtSlot(4, 2));
  mapping.add(CtSlot(23, 5), CtSlot(4, 3));
  mapping.add(CtSlot(10, 1), CtSlot(4, 4));
  mapping.add(CtSlot(3, 7), CtSlot(4, 5));
  mapping.add(CtSlot(0, 5), CtSlot(4, 6));
  mapping.add(CtSlot(4, 5), CtSlot(4, 7));
  mapping.add(CtSlot(6, 6), CtSlot(5, 0));
  mapping.add(CtSlot(6, 6), CtSlot(5, 1));
  mapping.add(CtSlot(12, 5), CtSlot(5, 2));
  mapping.add(CtSlot(15, 0), CtSlot(5, 3));
  mapping.add(CtSlot(5, 6), CtSlot(5, 4));
  mapping.add(CtSlot(3, 0), CtSlot(5, 5));
  mapping.add(CtSlot(17, 2), CtSlot(5, 6));
  mapping.add(CtSlot(7, 5), CtSlot(5, 7));
  mapping.add(CtSlot(1, 1), CtSlot(6, 0));
  mapping.add(CtSlot(22, 5), CtSlot(6, 1));
  mapping.add(CtSlot(13, 7), CtSlot(6, 2));
  mapping.add(CtSlot(11, 4), CtSlot(6, 3));
  mapping.add(CtSlot(22, 1), CtSlot(6, 4));
  mapping.add(CtSlot(3, 5), CtSlot(6, 5));
  mapping.add(CtSlot(7, 7), CtSlot(6, 6));
  mapping.add(CtSlot(2, 1), CtSlot(6, 7));
  mapping.add(CtSlot(16, 1), CtSlot(7, 0));
  mapping.add(CtSlot(3, 7), CtSlot(7, 1));
  mapping.add(CtSlot(8, 0), CtSlot(7, 2));
  mapping.add(CtSlot(17, 6), CtSlot(7, 3));
  mapping.add(CtSlot(14, 5), CtSlot(7, 4));
  mapping.add(CtSlot(0, 3), CtSlot(7, 5));
  mapping.add(CtSlot(23, 0), CtSlot(7, 6));
  mapping.add(CtSlot(7, 6), CtSlot(7, 7));
  mapping.add(CtSlot(20, 7), CtSlot(8, 0));
  mapping.add(CtSlot(0, 2), CtSlot(8, 1));
  mapping.add(CtSlot(5, 6), CtSlot(8, 2));
  mapping.add(CtSlot(6, 7), CtSlot(8, 3));
  mapping.add(CtSlot(9, 7), CtSlot(8, 4));
  mapping.add(CtSlot(18, 7), CtSlot(8, 5));
  mapping.add(CtSlot(1, 1), CtSlot(8, 6));
  mapping.add(CtSlot(7, 7), CtSlot(8, 7));
  mapping.add(CtSlot(12, 7), CtSlot(9, 0));
  mapping.add(CtSlot(7, 5), CtSlot(9, 1));
  mapping.add(CtSlot(4, 2), CtSlot(9, 2));
  mapping.add(CtSlot(2, 0), CtSlot(9, 3));
  mapping.add(CtSlot(13, 5), CtSlot(9, 4));
  mapping.add(CtSlot(19, 0), CtSlot(9, 5));
  mapping.add(CtSlot(1, 0), CtSlot(9, 6));
  mapping.add(CtSlot(2, 4), CtSlot(9, 7));
  mapping.add(CtSlot(13, 2), CtSlot(10, 0));
  mapping.add(CtSlot(11, 0), CtSlot(10, 1));
  mapping.add(CtSlot(13, 4), CtSlot(10, 2));
  mapping.add(CtSlot(16, 5), CtSlot(10, 3));
  mapping.add(CtSlot(2, 1), CtSlot(10, 4));
  mapping.add(CtSlot(4, 1), CtSlot(10, 5));
  mapping.add(CtSlot(10, 1), CtSlot(10, 6));
  mapping.add(CtSlot(11, 2), CtSlot(10, 7));
  mapping.add(CtSlot(8, 0), CtSlot(11, 0));
  mapping.add(CtSlot(21, 0), CtSlot(11, 1));
  mapping.add(CtSlot(10, 2), CtSlot(11, 2));
  mapping.add(CtSlot(16, 0), CtSlot(11, 3));
  mapping.add(CtSlot(5, 7), CtSlot(11, 4));
  mapping.add(CtSlot(23, 6), CtSlot(11, 5));
  mapping.add(CtSlot(4, 6), CtSlot(11, 6));
  mapping.add(CtSlot(6, 3), CtSlot(11, 7));
  mapping.add(CtSlot(22, 1), CtSlot(12, 0));
  mapping.add(CtSlot(1, 5), CtSlot(12, 1));
  mapping.add(CtSlot(2, 4), CtSlot(12, 2));
  mapping.add(CtSlot(4, 3), CtSlot(12, 3));
  mapping.add(CtSlot(8, 3), CtSlot(12, 4));
  mapping.add(CtSlot(16, 4), CtSlot(12, 5));
  mapping.add(CtSlot(23, 5), CtSlot(12, 6));
  mapping.add(CtSlot(19, 0), CtSlot(12, 7));
  mapping.add(CtSlot(11, 7), CtSlot(13, 0));
  mapping.add(CtSlot(13, 4), CtSlot(13, 1));
  mapping.add(CtSlot(12, 1), CtSlot(13, 2));
  mapping.add(CtSlot(2, 3), CtSlot(13, 3));
  mapping.add(CtSlot(21, 5), CtSlot(13, 4));
  mapping.add(CtSlot(4, 6), CtSlot(13, 5));
  mapping.add(CtSlot(16, 5), CtSlot(13, 6));
  mapping.add(CtSlot(12, 6), CtSlot(13, 7));
  mapping.add(CtSlot(2, 7), CtSlot(14, 0));
  mapping.add(CtSlot(2, 3), CtSlot(14, 1));
  mapping.add(CtSlot(21, 7), CtSlot(14, 2));
  mapping.add(CtSlot(23, 4), CtSlot(14, 3));
  mapping.add(CtSlot(19, 7), CtSlot(14, 4));
  mapping.add(CtSlot(0, 1), CtSlot(14, 5));
  mapping.add(CtSlot(15, 4), CtSlot(14, 6));
  mapping.add(CtSlot(0, 6), CtSlot(14, 7));
  mapping.add(CtSlot(11, 0), CtSlot(15, 0));
  mapping.add(CtSlot(17, 7), CtSlot(15, 1));
  mapping.add(CtSlot(18, 0), CtSlot(15, 2));
  mapping.add(CtSlot(15, 0), CtSlot(15, 3));
  mapping.add(CtSlot(4, 1), CtSlot(15, 4));
  mapping.add(CtSlot(12, 6), CtSlot(15, 5));
  mapping.add(CtSlot(12, 5), CtSlot(15, 6));
  mapping.add(CtSlot(5, 2), CtSlot(15, 7));
  mapping.add(CtSlot(2, 5), CtSlot(16, 0));
  mapping.add(CtSlot(23, 0), CtSlot(16, 1));
  mapping.add(CtSlot(10, 2), CtSlot(16, 2));
  mapping.add(CtSlot(9, 7), CtSlot(16, 3));
  mapping.add(CtSlot(2, 6), CtSlot(16, 4));
  mapping.add(CtSlot(7, 0), CtSlot(16, 5));
  mapping.add(CtSlot(20, 2), CtSlot(16, 6));
  mapping.add(CtSlot(13, 0), CtSlot(16, 7));
  mapping.add(CtSlot(7, 4), CtSlot(17, 0));
  mapping.add(CtSlot(6, 4), CtSlot(17, 1));
  mapping.add(CtSlot(12, 1), CtSlot(17, 2));
  mapping.add(CtSlot(5, 5), CtSlot(17, 3));
  mapping.add(CtSlot(8, 4), CtSlot(17, 4));
  mapping.add(CtSlot(14, 7), CtSlot(17, 5));
  mapping.add(CtSlot(18, 3), CtSlot(17, 6));
  mapping.add(CtSlot(19, 6), CtSlot(17, 7));
  mapping.add(CtSlot(16, 2), CtSlot(18, 0));
  mapping.add(CtSlot(14, 7), CtSlot(18, 1));
  mapping.add(CtSlot(3, 3), CtSlot(18, 2));
  mapping.add(CtSlot(21, 7), CtSlot(18, 3));
  mapping.add(CtSlot(17, 6), CtSlot(18, 4));
  mapping.add(CtSlot(5, 4), CtSlot(18, 5));
  mapping.add(CtSlot(8, 2), CtSlot(18, 6));
  mapping.add(CtSlot(19, 3), CtSlot(18, 7));
  mapping.add(CtSlot(11, 7), CtSlot(19, 0));
  mapping.add(CtSlot(8, 5), CtSlot(19, 1));
  mapping.add(CtSlot(17, 4), CtSlot(19, 2));
  mapping.add(CtSlot(6, 6), CtSlot(19, 3));
  mapping.add(CtSlot(14, 0), CtSlot(19, 4));
  mapping.add(CtSlot(20, 5), CtSlot(19, 5));
  mapping.add(CtSlot(0, 1), CtSlot(19, 6));
  mapping.add(CtSlot(12, 4), CtSlot(19, 7));
  mapping.add(CtSlot(13, 5), CtSlot(20, 0));
  mapping.add(CtSlot(20, 4), CtSlot(20, 1));
  mapping.add(CtSlot(11, 1), CtSlot(20, 2));
  mapping.add(CtSlot(2, 6), CtSlot(20, 3));
  mapping.add(CtSlot(7, 7), CtSlot(20, 4));
  mapping.add(CtSlot(6, 1), CtSlot(20, 5));
  mapping.add(CtSlot(12, 6), CtSlot(20, 6));
  mapping.add(CtSlot(19, 2), CtSlot(20, 7));
  mapping.add(CtSlot(18, 7), CtSlot(21, 0));
  mapping.add(CtSlot(14, 5), CtSlot(21, 1));
  mapping.add(CtSlot(12, 5), CtSlot(21, 2));
  mapping.add(CtSlot(18, 4), CtSlot(21, 3));
  mapping.add(CtSlot(22, 5), CtSlot(21, 4));
  mapping.add(CtSlot(2, 0), CtSlot(21, 5));
  mapping.add(CtSlot(4, 7), CtSlot(21, 6));
  mapping.add(CtSlot(15, 0), CtSlot(21, 7));
  mapping.add(CtSlot(19, 1), CtSlot(22, 0));
  mapping.add(CtSlot(0, 7), CtSlot(22, 1));
  mapping.add(CtSlot(14, 7), CtSlot(22, 2));
  mapping.add(CtSlot(4, 7), CtSlot(22, 3));
  mapping.add(CtSlot(16, 5), CtSlot(22, 4));
  mapping.add(CtSlot(10, 1), CtSlot(22, 5));
  mapping.add(CtSlot(19, 2), CtSlot(22, 6));
  mapping.add(CtSlot(4, 1), CtSlot(22, 7));
  mapping.add(CtSlot(11, 1), CtSlot(23, 0));
  mapping.add(CtSlot(2, 2), CtSlot(23, 1));
  mapping.add(CtSlot(19, 6), CtSlot(23, 2));
  mapping.add(CtSlot(16, 6), CtSlot(23, 3));
  mapping.add(CtSlot(10, 1), CtSlot(23, 4));
  mapping.add(CtSlot(10, 1), CtSlot(23, 5));
  mapping.add(CtSlot(23, 5), CtSlot(23, 6));
  mapping.add(CtSlot(5, 1), CtSlot(23, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_60) {
  int64_t numCts = 24;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(23, 4), CtSlot(0, 0));
  mapping.add(CtSlot(16, 7), CtSlot(0, 1));
  mapping.add(CtSlot(1, 1), CtSlot(0, 2));
  mapping.add(CtSlot(0, 0), CtSlot(0, 3));
  mapping.add(CtSlot(8, 4), CtSlot(0, 4));
  mapping.add(CtSlot(9, 0), CtSlot(0, 5));
  mapping.add(CtSlot(10, 7), CtSlot(0, 6));
  mapping.add(CtSlot(23, 1), CtSlot(0, 7));
  mapping.add(CtSlot(17, 5), CtSlot(1, 0));
  mapping.add(CtSlot(18, 4), CtSlot(1, 1));
  mapping.add(CtSlot(17, 5), CtSlot(1, 2));
  mapping.add(CtSlot(5, 1), CtSlot(1, 3));
  mapping.add(CtSlot(2, 7), CtSlot(1, 4));
  mapping.add(CtSlot(6, 6), CtSlot(1, 5));
  mapping.add(CtSlot(17, 1), CtSlot(1, 6));
  mapping.add(CtSlot(19, 4), CtSlot(1, 7));
  mapping.add(CtSlot(14, 7), CtSlot(2, 0));
  mapping.add(CtSlot(10, 4), CtSlot(2, 1));
  mapping.add(CtSlot(0, 0), CtSlot(2, 2));
  mapping.add(CtSlot(18, 4), CtSlot(2, 3));
  mapping.add(CtSlot(16, 4), CtSlot(2, 4));
  mapping.add(CtSlot(4, 4), CtSlot(2, 5));
  mapping.add(CtSlot(16, 7), CtSlot(2, 6));
  mapping.add(CtSlot(9, 3), CtSlot(2, 7));
  mapping.add(CtSlot(0, 6), CtSlot(3, 0));
  mapping.add(CtSlot(23, 0), CtSlot(3, 1));
  mapping.add(CtSlot(5, 5), CtSlot(3, 2));
  mapping.add(CtSlot(20, 3), CtSlot(3, 3));
  mapping.add(CtSlot(12, 1), CtSlot(3, 4));
  mapping.add(CtSlot(6, 7), CtSlot(3, 5));
  mapping.add(CtSlot(14, 0), CtSlot(3, 6));
  mapping.add(CtSlot(9, 4), CtSlot(3, 7));
  mapping.add(CtSlot(2, 4), CtSlot(4, 0));
  mapping.add(CtSlot(10, 0), CtSlot(4, 1));
  mapping.add(CtSlot(13, 5), CtSlot(4, 2));
  mapping.add(CtSlot(23, 5), CtSlot(4, 3));
  mapping.add(CtSlot(10, 1), CtSlot(4, 4));
  mapping.add(CtSlot(3, 7), CtSlot(4, 5));
  mapping.add(CtSlot(0, 5), CtSlot(4, 6));
  mapping.add(CtSlot(4, 5), CtSlot(4, 7));
  mapping.add(CtSlot(6, 6), CtSlot(5, 0));
  mapping.add(CtSlot(6, 6), CtSlot(5, 1));
  mapping.add(CtSlot(12, 5), CtSlot(5, 2));
  mapping.add(CtSlot(15, 0), CtSlot(5, 3));
  mapping.add(CtSlot(5, 6), CtSlot(5, 4));
  mapping.add(CtSlot(3, 0), CtSlot(5, 5));
  mapping.add(CtSlot(17, 2), CtSlot(5, 6));
  mapping.add(CtSlot(7, 5), CtSlot(5, 7));
  mapping.add(CtSlot(1, 1), CtSlot(6, 0));
  mapping.add(CtSlot(22, 5), CtSlot(6, 1));
  mapping.add(CtSlot(13, 7), CtSlot(6, 2));
  mapping.add(CtSlot(11, 4), CtSlot(6, 3));
  mapping.add(CtSlot(22, 1), CtSlot(6, 4));
  mapping.add(CtSlot(3, 5), CtSlot(6, 5));
  mapping.add(CtSlot(7, 7), CtSlot(6, 6));
  mapping.add(CtSlot(2, 1), CtSlot(6, 7));
  mapping.add(CtSlot(16, 1), CtSlot(7, 0));
  mapping.add(CtSlot(3, 7), CtSlot(7, 1));
  mapping.add(CtSlot(8, 0), CtSlot(7, 2));
  mapping.add(CtSlot(17, 6), CtSlot(7, 3));
  mapping.add(CtSlot(14, 5), CtSlot(7, 4));
  mapping.add(CtSlot(0, 3), CtSlot(7, 5));
  mapping.add(CtSlot(23, 0), CtSlot(7, 6));
  mapping.add(CtSlot(7, 6), CtSlot(7, 7));
  mapping.add(CtSlot(20, 7), CtSlot(8, 0));
  mapping.add(CtSlot(0, 2), CtSlot(8, 1));
  mapping.add(CtSlot(5, 6), CtSlot(8, 2));
  mapping.add(CtSlot(6, 7), CtSlot(8, 3));
  mapping.add(CtSlot(9, 7), CtSlot(8, 4));
  mapping.add(CtSlot(18, 7), CtSlot(8, 5));
  mapping.add(CtSlot(1, 1), CtSlot(8, 6));
  mapping.add(CtSlot(7, 7), CtSlot(8, 7));
  mapping.add(CtSlot(12, 7), CtSlot(9, 0));
  mapping.add(CtSlot(7, 5), CtSlot(9, 1));
  mapping.add(CtSlot(4, 2), CtSlot(9, 2));
  mapping.add(CtSlot(2, 0), CtSlot(9, 3));
  mapping.add(CtSlot(13, 5), CtSlot(9, 4));
  mapping.add(CtSlot(19, 0), CtSlot(9, 5));
  mapping.add(CtSlot(0, 0), CtSlot(9, 6));
  mapping.add(CtSlot(2, 4), CtSlot(9, 7));
  mapping.add(CtSlot(13, 2), CtSlot(10, 0));
  mapping.add(CtSlot(11, 0), CtSlot(10, 1));
  mapping.add(CtSlot(13, 4), CtSlot(10, 2));
  mapping.add(CtSlot(16, 5), CtSlot(10, 3));
  mapping.add(CtSlot(2, 1), CtSlot(10, 4));
  mapping.add(CtSlot(4, 1), CtSlot(10, 5));
  mapping.add(CtSlot(10, 1), CtSlot(10, 6));
  mapping.add(CtSlot(11, 2), CtSlot(10, 7));
  mapping.add(CtSlot(8, 0), CtSlot(11, 0));
  mapping.add(CtSlot(21, 0), CtSlot(11, 1));
  mapping.add(CtSlot(10, 2), CtSlot(11, 2));
  mapping.add(CtSlot(16, 0), CtSlot(11, 3));
  mapping.add(CtSlot(5, 7), CtSlot(11, 4));
  mapping.add(CtSlot(23, 6), CtSlot(11, 5));
  mapping.add(CtSlot(4, 6), CtSlot(11, 6));
  mapping.add(CtSlot(6, 3), CtSlot(11, 7));
  mapping.add(CtSlot(22, 1), CtSlot(12, 0));
  mapping.add(CtSlot(1, 5), CtSlot(12, 1));
  mapping.add(CtSlot(2, 4), CtSlot(12, 2));
  mapping.add(CtSlot(4, 3), CtSlot(12, 3));
  mapping.add(CtSlot(8, 3), CtSlot(12, 4));
  mapping.add(CtSlot(16, 4), CtSlot(12, 5));
  mapping.add(CtSlot(23, 5), CtSlot(12, 6));
  mapping.add(CtSlot(19, 0), CtSlot(12, 7));
  mapping.add(CtSlot(11, 7), CtSlot(13, 0));
  mapping.add(CtSlot(13, 4), CtSlot(13, 1));
  mapping.add(CtSlot(12, 1), CtSlot(13, 2));
  mapping.add(CtSlot(2, 3), CtSlot(13, 3));
  mapping.add(CtSlot(21, 5), CtSlot(13, 4));
  mapping.add(CtSlot(4, 6), CtSlot(13, 5));
  mapping.add(CtSlot(16, 5), CtSlot(13, 6));
  mapping.add(CtSlot(12, 6), CtSlot(13, 7));
  mapping.add(CtSlot(2, 7), CtSlot(14, 0));
  mapping.add(CtSlot(2, 3), CtSlot(14, 1));
  mapping.add(CtSlot(21, 7), CtSlot(14, 2));
  mapping.add(CtSlot(23, 4), CtSlot(14, 3));
  mapping.add(CtSlot(19, 7), CtSlot(14, 4));
  mapping.add(CtSlot(0, 1), CtSlot(14, 5));
  mapping.add(CtSlot(15, 4), CtSlot(14, 6));
  mapping.add(CtSlot(0, 6), CtSlot(14, 7));
  mapping.add(CtSlot(11, 0), CtSlot(15, 0));
  mapping.add(CtSlot(17, 7), CtSlot(15, 1));
  mapping.add(CtSlot(18, 0), CtSlot(15, 2));
  mapping.add(CtSlot(15, 0), CtSlot(15, 3));
  mapping.add(CtSlot(4, 1), CtSlot(15, 4));
  mapping.add(CtSlot(12, 6), CtSlot(15, 5));
  mapping.add(CtSlot(12, 5), CtSlot(15, 6));
  mapping.add(CtSlot(5, 2), CtSlot(15, 7));
  mapping.add(CtSlot(2, 5), CtSlot(16, 0));
  mapping.add(CtSlot(23, 0), CtSlot(16, 1));
  mapping.add(CtSlot(10, 2), CtSlot(16, 2));
  mapping.add(CtSlot(9, 7), CtSlot(16, 3));
  mapping.add(CtSlot(2, 6), CtSlot(16, 4));
  mapping.add(CtSlot(7, 0), CtSlot(16, 5));
  mapping.add(CtSlot(20, 2), CtSlot(16, 6));
  mapping.add(CtSlot(13, 0), CtSlot(16, 7));
  mapping.add(CtSlot(7, 4), CtSlot(17, 0));
  mapping.add(CtSlot(6, 4), CtSlot(17, 1));
  mapping.add(CtSlot(12, 1), CtSlot(17, 2));
  mapping.add(CtSlot(5, 5), CtSlot(17, 3));
  mapping.add(CtSlot(8, 4), CtSlot(17, 4));
  mapping.add(CtSlot(14, 7), CtSlot(17, 5));
  mapping.add(CtSlot(18, 3), CtSlot(17, 6));
  mapping.add(CtSlot(19, 6), CtSlot(17, 7));
  mapping.add(CtSlot(16, 2), CtSlot(18, 0));
  mapping.add(CtSlot(14, 7), CtSlot(18, 1));
  mapping.add(CtSlot(3, 3), CtSlot(18, 2));
  mapping.add(CtSlot(21, 7), CtSlot(18, 3));
  mapping.add(CtSlot(17, 6), CtSlot(18, 4));
  mapping.add(CtSlot(5, 4), CtSlot(18, 5));
  mapping.add(CtSlot(8, 2), CtSlot(18, 6));
  mapping.add(CtSlot(19, 3), CtSlot(18, 7));
  mapping.add(CtSlot(11, 7), CtSlot(19, 0));
  mapping.add(CtSlot(8, 5), CtSlot(19, 1));
  mapping.add(CtSlot(17, 4), CtSlot(19, 2));
  mapping.add(CtSlot(6, 6), CtSlot(19, 3));
  mapping.add(CtSlot(14, 0), CtSlot(19, 4));
  mapping.add(CtSlot(20, 5), CtSlot(19, 5));
  mapping.add(CtSlot(0, 1), CtSlot(19, 6));
  mapping.add(CtSlot(12, 4), CtSlot(19, 7));
  mapping.add(CtSlot(13, 5), CtSlot(20, 0));
  mapping.add(CtSlot(20, 4), CtSlot(20, 1));
  mapping.add(CtSlot(11, 1), CtSlot(20, 2));
  mapping.add(CtSlot(2, 6), CtSlot(20, 3));
  mapping.add(CtSlot(7, 7), CtSlot(20, 4));
  mapping.add(CtSlot(6, 1), CtSlot(20, 5));
  mapping.add(CtSlot(12, 6), CtSlot(20, 6));
  mapping.add(CtSlot(19, 2), CtSlot(20, 7));
  mapping.add(CtSlot(18, 7), CtSlot(21, 0));
  mapping.add(CtSlot(14, 5), CtSlot(21, 1));
  mapping.add(CtSlot(12, 5), CtSlot(21, 2));
  mapping.add(CtSlot(18, 4), CtSlot(21, 3));
  mapping.add(CtSlot(22, 5), CtSlot(21, 4));
  mapping.add(CtSlot(2, 0), CtSlot(21, 5));
  mapping.add(CtSlot(4, 7), CtSlot(21, 6));
  mapping.add(CtSlot(15, 0), CtSlot(21, 7));
  mapping.add(CtSlot(19, 1), CtSlot(22, 0));
  mapping.add(CtSlot(0, 7), CtSlot(22, 1));
  mapping.add(CtSlot(14, 7), CtSlot(22, 2));
  mapping.add(CtSlot(4, 7), CtSlot(22, 3));
  mapping.add(CtSlot(16, 5), CtSlot(22, 4));
  mapping.add(CtSlot(10, 1), CtSlot(22, 5));
  mapping.add(CtSlot(19, 2), CtSlot(22, 6));
  mapping.add(CtSlot(4, 1), CtSlot(22, 7));
  mapping.add(CtSlot(11, 1), CtSlot(23, 0));
  mapping.add(CtSlot(2, 2), CtSlot(23, 1));
  mapping.add(CtSlot(19, 6), CtSlot(23, 2));
  mapping.add(CtSlot(16, 6), CtSlot(23, 3));
  mapping.add(CtSlot(10, 1), CtSlot(23, 4));
  mapping.add(CtSlot(10, 1), CtSlot(23, 5));
  mapping.add(CtSlot(23, 5), CtSlot(23, 6));
  mapping.add(CtSlot(5, 1), CtSlot(23, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

// TEST(ImplementShiftNetworkTest, TestRANDOM_61) {
//   int64_t numCts = 24;
//   int64_t ctSize = 8;
//   Mapping mapping(ctSize, numCts);
//   mapping.add(CtSlot(23, 4), CtSlot(0, 0));
//   mapping.add(CtSlot(16, 7), CtSlot(0, 1));
//   mapping.add(CtSlot(1, 1), CtSlot(0, 2));
//   mapping.add(CtSlot(0, 0), CtSlot(0, 3));
//   mapping.add(CtSlot(8, 4), CtSlot(0, 4));
//   mapping.add(CtSlot(9, 0), CtSlot(0, 5));
//   mapping.add(CtSlot(10, 7), CtSlot(0, 6));
//   mapping.add(CtSlot(23, 1), CtSlot(0, 7));
//   mapping.add(CtSlot(17, 5), CtSlot(1, 0));
//   mapping.add(CtSlot(18, 4), CtSlot(1, 1));
//   mapping.add(CtSlot(17, 5), CtSlot(1, 2));
//   mapping.add(CtSlot(5, 1), CtSlot(1, 3));
//   mapping.add(CtSlot(2, 7), CtSlot(1, 4));
//   mapping.add(CtSlot(6, 6), CtSlot(1, 5));
//   mapping.add(CtSlot(17, 1), CtSlot(1, 6));
//   mapping.add(CtSlot(19, 4), CtSlot(1, 7));
//   mapping.add(CtSlot(14, 7), CtSlot(2, 0));
//   mapping.add(CtSlot(10, 4), CtSlot(2, 1));
//   mapping.add(CtSlot(0, 0), CtSlot(2, 2));
//   mapping.add(CtSlot(18, 4), CtSlot(2, 3));
//   mapping.add(CtSlot(16, 4), CtSlot(2, 4));
//   mapping.add(CtSlot(4, 4), CtSlot(2, 5));
//   mapping.add(CtSlot(16, 7), CtSlot(2, 6));
//   mapping.add(CtSlot(9, 3), CtSlot(2, 7));
//   mapping.add(CtSlot(0, 6), CtSlot(3, 0));
//   mapping.add(CtSlot(23, 0), CtSlot(3, 1));
//   mapping.add(CtSlot(5, 5), CtSlot(3, 2));
//   mapping.add(CtSlot(20, 3), CtSlot(3, 3));
//   mapping.add(CtSlot(12, 1), CtSlot(3, 4));
//   mapping.add(CtSlot(6, 7), CtSlot(3, 5));
//   mapping.add(CtSlot(14, 0), CtSlot(3, 6));
//   mapping.add(CtSlot(9, 4), CtSlot(3, 7));
//   mapping.add(CtSlot(2, 4), CtSlot(4, 0));
//   mapping.add(CtSlot(10, 0), CtSlot(4, 1));
//   mapping.add(CtSlot(13, 5), CtSlot(4, 2));
//   mapping.add(CtSlot(23, 5), CtSlot(4, 3));
//   mapping.add(CtSlot(10, 1), CtSlot(4, 4));
//   mapping.add(CtSlot(3, 7), CtSlot(4, 5));
//   mapping.add(CtSlot(0, 5), CtSlot(4, 6));
//   mapping.add(CtSlot(4, 5), CtSlot(4, 7));
//   mapping.add(CtSlot(6, 6), CtSlot(5, 0));
//   mapping.add(CtSlot(6, 6), CtSlot(5, 1));
//   mapping.add(CtSlot(12, 5), CtSlot(5, 2));
//   mapping.add(CtSlot(15, 0), CtSlot(5, 3));
//   mapping.add(CtSlot(5, 6), CtSlot(5, 4));
//   mapping.add(CtSlot(3, 0), CtSlot(5, 5));
//   mapping.add(CtSlot(17, 2), CtSlot(5, 6));
//   mapping.add(CtSlot(7, 5), CtSlot(5, 7));
//   mapping.add(CtSlot(1, 1), CtSlot(6, 0));
//   mapping.add(CtSlot(22, 5), CtSlot(6, 1));
//   mapping.add(CtSlot(13, 7), CtSlot(6, 2));
//   mapping.add(CtSlot(11, 4), CtSlot(6, 3));
//   mapping.add(CtSlot(22, 1), CtSlot(6, 4));
//   mapping.add(CtSlot(3, 5), CtSlot(6, 5));
//   mapping.add(CtSlot(7, 7), CtSlot(6, 6));
//   mapping.add(CtSlot(2, 1), CtSlot(6, 7));
//   mapping.add(CtSlot(16, 1), CtSlot(7, 0));
//   mapping.add(CtSlot(3, 7), CtSlot(7, 1));
//   mapping.add(CtSlot(8, 0), CtSlot(7, 2));
//   mapping.add(CtSlot(17, 6), CtSlot(7, 3));
//   mapping.add(CtSlot(14, 5), CtSlot(7, 4));
//   mapping.add(CtSlot(0, 3), CtSlot(7, 5));
//   mapping.add(CtSlot(23, 0), CtSlot(7, 6));
//   mapping.add(CtSlot(7, 6), CtSlot(7, 7));
//   mapping.add(CtSlot(20, 7), CtSlot(8, 0));
//   mapping.add(CtSlot(0, 2), CtSlot(8, 1));
//   mapping.add(CtSlot(5, 6), CtSlot(8, 2));
//   mapping.add(CtSlot(6, 7), CtSlot(8, 3));
//   mapping.add(CtSlot(9, 7), CtSlot(8, 4));
//   mapping.add(CtSlot(18, 7), CtSlot(8, 5));
//   mapping.add(CtSlot(1, 1), CtSlot(8, 6));
//   mapping.add(CtSlot(7, 7), CtSlot(8, 7));
//   mapping.add(CtSlot(12, 7), CtSlot(9, 0));
//   mapping.add(CtSlot(7, 5), CtSlot(9, 1));
//   mapping.add(CtSlot(4, 2), CtSlot(9, 2));
//   mapping.add(CtSlot(2, 0), CtSlot(9, 3));
//   mapping.add(CtSlot(13, 5), CtSlot(9, 4));
//   mapping.add(CtSlot(19, 0), CtSlot(9, 5));
//   mapping.add(CtSlot(0, 0), CtSlot(9, 6));
//   mapping.add(CtSlot(2, 4), CtSlot(9, 7));
//   mapping.add(CtSlot(13, 2), CtSlot(10, 0));
//   mapping.add(CtSlot(11, 0), CtSlot(10, 1));
//   mapping.add(CtSlot(13, 4), CtSlot(10, 2));
//   mapping.add(CtSlot(16, 5), CtSlot(10, 3));
//   mapping.add(CtSlot(2, 1), CtSlot(10, 4));
//   mapping.add(CtSlot(4, 1), CtSlot(10, 5));
//   mapping.add(CtSlot(10, 1), CtSlot(10, 6));
//   mapping.add(CtSlot(11, 2), CtSlot(10, 7));
//   mapping.add(CtSlot(8, 0), CtSlot(11, 0));
//   mapping.add(CtSlot(21, 0), CtSlot(11, 1));
//   mapping.add(CtSlot(10, 2), CtSlot(11, 2));
//   mapping.add(CtSlot(16, 0), CtSlot(11, 3));
//   mapping.add(CtSlot(5, 7), CtSlot(11, 4));
//   mapping.add(CtSlot(23, 6), CtSlot(11, 5));
//   mapping.add(CtSlot(4, 6), CtSlot(11, 6));
//   mapping.add(CtSlot(6, 3), CtSlot(11, 7));
//   mapping.add(CtSlot(22, 1), CtSlot(12, 0));
//   mapping.add(CtSlot(1, 5), CtSlot(12, 1));
//   mapping.add(CtSlot(2, 4), CtSlot(12, 2));
//   mapping.add(CtSlot(4, 3), CtSlot(12, 3));
//   mapping.add(CtSlot(8, 3), CtSlot(12, 4));
//   mapping.add(CtSlot(16, 4), CtSlot(12, 5));
//   mapping.add(CtSlot(23, 5), CtSlot(12, 6));
//   mapping.add(CtSlot(19, 0), CtSlot(12, 7));
//   mapping.add(CtSlot(11, 7), CtSlot(13, 0));
//   mapping.add(CtSlot(13, 4), CtSlot(13, 1));
//   mapping.add(CtSlot(12, 1), CtSlot(13, 2));
//   mapping.add(CtSlot(2, 3), CtSlot(13, 3));
//   mapping.add(CtSlot(21, 5), CtSlot(13, 4));
//   mapping.add(CtSlot(4, 6), CtSlot(13, 5));
//   mapping.add(CtSlot(16, 5), CtSlot(13, 6));
//   mapping.add(CtSlot(12, 6), CtSlot(13, 7));
//   mapping.add(CtSlot(2, 7), CtSlot(14, 0));
//   mapping.add(CtSlot(2, 3), CtSlot(14, 1));
//   mapping.add(CtSlot(21, 7), CtSlot(14, 2));
//   mapping.add(CtSlot(23, 4), CtSlot(14, 3));
//   mapping.add(CtSlot(19, 7), CtSlot(14, 4));
//   mapping.add(CtSlot(0, 1), CtSlot(14, 5));
//   mapping.add(CtSlot(15, 4), CtSlot(14, 6));
//   mapping.add(CtSlot(0, 6), CtSlot(14, 7));
//   mapping.add(CtSlot(11, 0), CtSlot(15, 0));
//   mapping.add(CtSlot(17, 7), CtSlot(15, 1));
//   mapping.add(CtSlot(18, 0), CtSlot(15, 2));
//   mapping.add(CtSlot(15, 0), CtSlot(15, 3));
//   mapping.add(CtSlot(4, 1), CtSlot(15, 4));
//   mapping.add(CtSlot(12, 6), CtSlot(15, 5));
//   mapping.add(CtSlot(12, 5), CtSlot(15, 6));
//   mapping.add(CtSlot(5, 2), CtSlot(15, 7));
//   mapping.add(CtSlot(2, 5), CtSlot(16, 0));
//   mapping.add(CtSlot(23, 0), CtSlot(16, 1));
//   mapping.add(CtSlot(10, 2), CtSlot(16, 2));
//   mapping.add(CtSlot(9, 7), CtSlot(16, 3));
//   mapping.add(CtSlot(2, 6), CtSlot(16, 4));
//   mapping.add(CtSlot(7, 0), CtSlot(16, 5));
//   mapping.add(CtSlot(20, 2), CtSlot(16, 6));
//   mapping.add(CtSlot(13, 0), CtSlot(16, 7));
//   mapping.add(CtSlot(7, 4), CtSlot(17, 0));
//   mapping.add(CtSlot(6, 4), CtSlot(17, 1));
//   mapping.add(CtSlot(12, 1), CtSlot(17, 2));
//   mapping.add(CtSlot(5, 5), CtSlot(17, 3));
//   mapping.add(CtSlot(8, 4), CtSlot(17, 4));
//   mapping.add(CtSlot(14, 7), CtSlot(17, 5));
//   mapping.add(CtSlot(18, 3), CtSlot(17, 6));
//   mapping.add(CtSlot(19, 6), CtSlot(17, 7));
//   mapping.add(CtSlot(16, 2), CtSlot(18, 0));
//   mapping.add(CtSlot(14, 7), CtSlot(18, 1));
//   mapping.add(CtSlot(3, 3), CtSlot(18, 2));
//   mapping.add(CtSlot(21, 7), CtSlot(18, 3));
//   mapping.add(CtSlot(17, 6), CtSlot(18, 4));
//   mapping.add(CtSlot(5, 4), CtSlot(18, 5));
//   mapping.add(CtSlot(8, 2), CtSlot(18, 6));
//   mapping.add(CtSlot(19, 3), CtSlot(18, 7));
//   mapping.add(CtSlot(11, 7), CtSlot(19, 0));
//   mapping.add(CtSlot(8, 5), CtSlot(19, 1));
//   mapping.add(CtSlot(17, 4), CtSlot(19, 2));
//   mapping.add(CtSlot(6, 6), CtSlot(19, 3));
//   mapping.add(CtSlot(14, 0), CtSlot(19, 4));
//   mapping.add(CtSlot(20, 5), CtSlot(19, 5));
//   mapping.add(CtSlot(0, 1), CtSlot(19, 6));
//   mapping.add(CtSlot(12, 4), CtSlot(19, 7));
//   mapping.add(CtSlot(13, 5), CtSlot(20, 0));
//   mapping.add(CtSlot(20, 4), CtSlot(20, 1));
//   mapping.add(CtSlot(11, 1), CtSlot(20, 2));
//   mapping.add(CtSlot(2, 6), CtSlot(20, 3));
//   mapping.add(CtSlot(7, 7), CtSlot(20, 4));
//   mapping.add(CtSlot(6, 1), CtSlot(20, 5));
//   mapping.add(CtSlot(12, 6), CtSlot(20, 6));
//   mapping.add(CtSlot(19, 2), CtSlot(20, 7));
//   mapping.add(CtSlot(18, 7), CtSlot(21, 0));
//   mapping.add(CtSlot(14, 5), CtSlot(21, 1));
//   mapping.add(CtSlot(12, 5), CtSlot(21, 2));
//   mapping.add(CtSlot(18, 4), CtSlot(21, 3));
//   mapping.add(CtSlot(22, 5), CtSlot(21, 4));
//   mapping.add(CtSlot(2, 0), CtSlot(21, 5));
//   mapping.add(CtSlot(4, 7), CtSlot(21, 6));
//   mapping.add(CtSlot(21, 0), CtSlot(21, 7));
//   mapping.add(CtSlot(19, 1), CtSlot(22, 0));
//   mapping.add(CtSlot(0, 7), CtSlot(22, 1));
//   mapping.add(CtSlot(14, 7), CtSlot(22, 2));
//   mapping.add(CtSlot(4, 7), CtSlot(22, 3));
//   mapping.add(CtSlot(16, 5), CtSlot(22, 4));
//   mapping.add(CtSlot(10, 1), CtSlot(22, 5));
//   mapping.add(CtSlot(19, 2), CtSlot(22, 6));
//   mapping.add(CtSlot(4, 1), CtSlot(22, 7));
//   mapping.add(CtSlot(11, 1), CtSlot(23, 0));
//   mapping.add(CtSlot(2, 2), CtSlot(23, 1));
//   mapping.add(CtSlot(19, 6), CtSlot(23, 2));
//   mapping.add(CtSlot(16, 6), CtSlot(23, 3));
//   mapping.add(CtSlot(10, 1), CtSlot(23, 4));
//   mapping.add(CtSlot(10, 1), CtSlot(23, 5));
//   mapping.add(CtSlot(23, 5), CtSlot(23, 6));
//   mapping.add(CtSlot(5, 1), CtSlot(23, 7));
//   VosVosErkinShiftNetworks shiftNetworks;
//   auto scheme = shiftNetworks.findShiftScheme(mapping);
//   simulateShiftNetwork(mapping, scheme, numCts, ctSize);
// }
//
// TEST(ImplementShiftNetworkTest, TestRANDOM_62) {
//   int64_t numCts = 24;
//   int64_t ctSize = 8;
//   Mapping mapping(ctSize, numCts);
//   mapping.add(CtSlot(23, 4), CtSlot(0, 0));
//   mapping.add(CtSlot(16, 7), CtSlot(0, 1));
//   mapping.add(CtSlot(1, 1), CtSlot(0, 2));
//   mapping.add(CtSlot(0, 0), CtSlot(0, 3));
//   mapping.add(CtSlot(8, 4), CtSlot(0, 4));
//   mapping.add(CtSlot(9, 0), CtSlot(0, 5));
//   mapping.add(CtSlot(10, 7), CtSlot(0, 6));
//   mapping.add(CtSlot(23, 1), CtSlot(0, 7));
//   mapping.add(CtSlot(17, 5), CtSlot(1, 0));
//   mapping.add(CtSlot(21, 4), CtSlot(1, 1));
//   mapping.add(CtSlot(17, 5), CtSlot(1, 2));
//   mapping.add(CtSlot(5, 1), CtSlot(1, 3));
//   mapping.add(CtSlot(2, 7), CtSlot(1, 4));
//   mapping.add(CtSlot(6, 6), CtSlot(1, 5));
//   mapping.add(CtSlot(17, 1), CtSlot(1, 6));
//   mapping.add(CtSlot(19, 4), CtSlot(1, 7));
//   mapping.add(CtSlot(14, 7), CtSlot(2, 0));
//   mapping.add(CtSlot(10, 4), CtSlot(2, 1));
//   mapping.add(CtSlot(0, 0), CtSlot(2, 2));
//   mapping.add(CtSlot(18, 4), CtSlot(2, 3));
//   mapping.add(CtSlot(16, 4), CtSlot(2, 4));
//   mapping.add(CtSlot(4, 4), CtSlot(2, 5));
//   mapping.add(CtSlot(16, 7), CtSlot(2, 6));
//   mapping.add(CtSlot(9, 3), CtSlot(2, 7));
//   mapping.add(CtSlot(0, 6), CtSlot(3, 0));
//   mapping.add(CtSlot(23, 0), CtSlot(3, 1));
//   mapping.add(CtSlot(5, 5), CtSlot(3, 2));
//   mapping.add(CtSlot(20, 3), CtSlot(3, 3));
//   mapping.add(CtSlot(12, 1), CtSlot(3, 4));
//   mapping.add(CtSlot(6, 7), CtSlot(3, 5));
//   mapping.add(CtSlot(14, 0), CtSlot(3, 6));
//   mapping.add(CtSlot(9, 4), CtSlot(3, 7));
//   mapping.add(CtSlot(2, 4), CtSlot(4, 0));
//   mapping.add(CtSlot(10, 0), CtSlot(4, 1));
//   mapping.add(CtSlot(13, 5), CtSlot(4, 2));
//   mapping.add(CtSlot(23, 5), CtSlot(4, 3));
//   mapping.add(CtSlot(10, 1), CtSlot(4, 4));
//   mapping.add(CtSlot(3, 7), CtSlot(4, 5));
//   mapping.add(CtSlot(0, 5), CtSlot(4, 6));
//   mapping.add(CtSlot(4, 5), CtSlot(4, 7));
//   mapping.add(CtSlot(6, 6), CtSlot(5, 0));
//   mapping.add(CtSlot(6, 6), CtSlot(5, 1));
//   mapping.add(CtSlot(12, 5), CtSlot(5, 2));
//   mapping.add(CtSlot(15, 0), CtSlot(5, 3));
//   mapping.add(CtSlot(5, 6), CtSlot(5, 4));
//   mapping.add(CtSlot(3, 0), CtSlot(5, 5));
//   mapping.add(CtSlot(17, 2), CtSlot(5, 6));
//   mapping.add(CtSlot(7, 5), CtSlot(5, 7));
//   mapping.add(CtSlot(1, 1), CtSlot(6, 0));
//   mapping.add(CtSlot(22, 5), CtSlot(6, 1));
//   mapping.add(CtSlot(13, 7), CtSlot(6, 2));
//   mapping.add(CtSlot(11, 4), CtSlot(6, 3));
//   mapping.add(CtSlot(22, 1), CtSlot(6, 4));
//   mapping.add(CtSlot(3, 5), CtSlot(6, 5));
//   mapping.add(CtSlot(7, 7), CtSlot(6, 6));
//   mapping.add(CtSlot(2, 1), CtSlot(6, 7));
//   mapping.add(CtSlot(16, 1), CtSlot(7, 0));
//   mapping.add(CtSlot(3, 7), CtSlot(7, 1));
//   mapping.add(CtSlot(8, 0), CtSlot(7, 2));
//   mapping.add(CtSlot(17, 6), CtSlot(7, 3));
//   mapping.add(CtSlot(14, 5), CtSlot(7, 4));
//   mapping.add(CtSlot(0, 3), CtSlot(7, 5));
//   mapping.add(CtSlot(23, 0), CtSlot(7, 6));
//   mapping.add(CtSlot(7, 6), CtSlot(7, 7));
//   mapping.add(CtSlot(20, 7), CtSlot(8, 0));
//   mapping.add(CtSlot(0, 2), CtSlot(8, 1));
//   mapping.add(CtSlot(5, 6), CtSlot(8, 2));
//   mapping.add(CtSlot(6, 7), CtSlot(8, 3));
//   mapping.add(CtSlot(9, 7), CtSlot(8, 4));
//   mapping.add(CtSlot(18, 7), CtSlot(8, 5));
//   mapping.add(CtSlot(1, 1), CtSlot(8, 6));
//   mapping.add(CtSlot(7, 7), CtSlot(8, 7));
//   mapping.add(CtSlot(12, 7), CtSlot(9, 0));
//   mapping.add(CtSlot(7, 5), CtSlot(9, 1));
//   mapping.add(CtSlot(4, 2), CtSlot(9, 2));
//   mapping.add(CtSlot(2, 0), CtSlot(9, 3));
//   mapping.add(CtSlot(13, 5), CtSlot(9, 4));
//   mapping.add(CtSlot(19, 0), CtSlot(9, 5));
//   mapping.add(CtSlot(0, 0), CtSlot(9, 6));
//   mapping.add(CtSlot(2, 4), CtSlot(9, 7));
//   mapping.add(CtSlot(13, 2), CtSlot(10, 0));
//   mapping.add(CtSlot(11, 0), CtSlot(10, 1));
//   mapping.add(CtSlot(13, 4), CtSlot(10, 2));
//   mapping.add(CtSlot(16, 5), CtSlot(10, 3));
//   mapping.add(CtSlot(2, 1), CtSlot(10, 4));
//   mapping.add(CtSlot(4, 1), CtSlot(10, 5));
//   mapping.add(CtSlot(10, 1), CtSlot(10, 6));
//   mapping.add(CtSlot(11, 2), CtSlot(10, 7));
//   mapping.add(CtSlot(8, 0), CtSlot(11, 0));
//   mapping.add(CtSlot(21, 0), CtSlot(11, 1));
//   mapping.add(CtSlot(10, 2), CtSlot(11, 2));
//   mapping.add(CtSlot(16, 0), CtSlot(11, 3));
//   mapping.add(CtSlot(5, 7), CtSlot(11, 4));
//   mapping.add(CtSlot(23, 6), CtSlot(11, 5));
//   mapping.add(CtSlot(4, 6), CtSlot(11, 6));
//   mapping.add(CtSlot(6, 3), CtSlot(11, 7));
//   mapping.add(CtSlot(22, 1), CtSlot(12, 0));
//   mapping.add(CtSlot(1, 5), CtSlot(12, 1));
//   mapping.add(CtSlot(2, 4), CtSlot(12, 2));
//   mapping.add(CtSlot(4, 3), CtSlot(12, 3));
//   mapping.add(CtSlot(8, 3), CtSlot(12, 4));
//   mapping.add(CtSlot(16, 4), CtSlot(12, 5));
//   mapping.add(CtSlot(23, 5), CtSlot(12, 6));
//   mapping.add(CtSlot(19, 0), CtSlot(12, 7));
//   mapping.add(CtSlot(11, 7), CtSlot(13, 0));
//   mapping.add(CtSlot(13, 4), CtSlot(13, 1));
//   mapping.add(CtSlot(12, 1), CtSlot(13, 2));
//   mapping.add(CtSlot(2, 3), CtSlot(13, 3));
//   mapping.add(CtSlot(21, 5), CtSlot(13, 4));
//   mapping.add(CtSlot(4, 6), CtSlot(13, 5));
//   mapping.add(CtSlot(16, 5), CtSlot(13, 6));
//   mapping.add(CtSlot(12, 6), CtSlot(13, 7));
//   mapping.add(CtSlot(2, 7), CtSlot(14, 0));
//   mapping.add(CtSlot(2, 3), CtSlot(14, 1));
//   mapping.add(CtSlot(21, 7), CtSlot(14, 2));
//   mapping.add(CtSlot(23, 4), CtSlot(14, 3));
//   mapping.add(CtSlot(19, 7), CtSlot(14, 4));
//   mapping.add(CtSlot(0, 1), CtSlot(14, 5));
//   mapping.add(CtSlot(15, 4), CtSlot(14, 6));
//   mapping.add(CtSlot(0, 6), CtSlot(14, 7));
//   mapping.add(CtSlot(11, 0), CtSlot(15, 0));
//   mapping.add(CtSlot(17, 7), CtSlot(15, 1));
//   mapping.add(CtSlot(18, 0), CtSlot(15, 2));
//   mapping.add(CtSlot(15, 0), CtSlot(15, 3));
//   mapping.add(CtSlot(4, 1), CtSlot(15, 4));
//   mapping.add(CtSlot(12, 6), CtSlot(15, 5));
//   mapping.add(CtSlot(12, 5), CtSlot(15, 6));
//   mapping.add(CtSlot(5, 2), CtSlot(15, 7));
//   mapping.add(CtSlot(2, 5), CtSlot(16, 0));
//   mapping.add(CtSlot(23, 0), CtSlot(16, 1));
//   mapping.add(CtSlot(10, 2), CtSlot(16, 2));
//   mapping.add(CtSlot(9, 7), CtSlot(16, 3));
//   mapping.add(CtSlot(2, 6), CtSlot(16, 4));
//   mapping.add(CtSlot(7, 0), CtSlot(16, 5));
//   mapping.add(CtSlot(20, 2), CtSlot(16, 6));
//   mapping.add(CtSlot(13, 0), CtSlot(16, 7));
//   mapping.add(CtSlot(7, 4), CtSlot(17, 0));
//   mapping.add(CtSlot(6, 4), CtSlot(17, 1));
//   mapping.add(CtSlot(12, 1), CtSlot(17, 2));
//   mapping.add(CtSlot(5, 5), CtSlot(17, 3));
//   mapping.add(CtSlot(8, 4), CtSlot(17, 4));
//   mapping.add(CtSlot(14, 7), CtSlot(17, 5));
//   mapping.add(CtSlot(18, 3), CtSlot(17, 6));
//   mapping.add(CtSlot(19, 6), CtSlot(17, 7));
//   mapping.add(CtSlot(16, 2), CtSlot(18, 0));
//   mapping.add(CtSlot(14, 7), CtSlot(18, 1));
//   mapping.add(CtSlot(3, 3), CtSlot(18, 2));
//   mapping.add(CtSlot(21, 7), CtSlot(18, 3));
//   mapping.add(CtSlot(17, 6), CtSlot(18, 4));
//   mapping.add(CtSlot(5, 4), CtSlot(18, 5));
//   mapping.add(CtSlot(8, 2), CtSlot(18, 6));
//   mapping.add(CtSlot(19, 3), CtSlot(18, 7));
//   mapping.add(CtSlot(11, 7), CtSlot(19, 0));
//   mapping.add(CtSlot(8, 5), CtSlot(19, 1));
//   mapping.add(CtSlot(17, 4), CtSlot(19, 2));
//   mapping.add(CtSlot(6, 6), CtSlot(19, 3));
//   mapping.add(CtSlot(14, 0), CtSlot(19, 4));
//   mapping.add(CtSlot(20, 5), CtSlot(19, 5));
//   mapping.add(CtSlot(0, 1), CtSlot(19, 6));
//   mapping.add(CtSlot(12, 4), CtSlot(19, 7));
//   mapping.add(CtSlot(13, 5), CtSlot(20, 0));
//   mapping.add(CtSlot(20, 4), CtSlot(20, 1));
//   mapping.add(CtSlot(11, 1), CtSlot(20, 2));
//   mapping.add(CtSlot(2, 6), CtSlot(20, 3));
//   mapping.add(CtSlot(7, 7), CtSlot(20, 4));
//   mapping.add(CtSlot(6, 1), CtSlot(20, 5));
//   mapping.add(CtSlot(12, 6), CtSlot(20, 6));
//   mapping.add(CtSlot(19, 2), CtSlot(20, 7));
//   mapping.add(CtSlot(18, 7), CtSlot(21, 0));
//   mapping.add(CtSlot(14, 5), CtSlot(21, 1));
//   mapping.add(CtSlot(12, 5), CtSlot(21, 2));
//   mapping.add(CtSlot(18, 4), CtSlot(21, 3));
//   mapping.add(CtSlot(22, 5), CtSlot(21, 4));
//   mapping.add(CtSlot(2, 0), CtSlot(21, 5));
//   mapping.add(CtSlot(4, 7), CtSlot(21, 6));
//   mapping.add(CtSlot(21, 0), CtSlot(21, 7));
//   mapping.add(CtSlot(19, 1), CtSlot(22, 0));
//   mapping.add(CtSlot(0, 7), CtSlot(22, 1));
//   mapping.add(CtSlot(14, 7), CtSlot(22, 2));
//   mapping.add(CtSlot(4, 7), CtSlot(22, 3));
//   mapping.add(CtSlot(16, 5), CtSlot(22, 4));
//   mapping.add(CtSlot(10, 1), CtSlot(22, 5));
//   mapping.add(CtSlot(19, 2), CtSlot(22, 6));
//   mapping.add(CtSlot(4, 1), CtSlot(22, 7));
//   mapping.add(CtSlot(11, 1), CtSlot(23, 0));
//   mapping.add(CtSlot(2, 2), CtSlot(23, 1));
//   mapping.add(CtSlot(19, 6), CtSlot(23, 2));
//   mapping.add(CtSlot(16, 6), CtSlot(23, 3));
//   mapping.add(CtSlot(10, 1), CtSlot(23, 4));
//   mapping.add(CtSlot(10, 1), CtSlot(23, 5));
//   mapping.add(CtSlot(23, 5), CtSlot(23, 6));
//   mapping.add(CtSlot(5, 1), CtSlot(23, 7));
//   VosVosErkinShiftNetworks shiftNetworks;
//   auto scheme = shiftNetworks.findShiftScheme(mapping);
//   simulateShiftNetwork(mapping, scheme, numCts, ctSize);
// }

TEST(ImplementShiftNetworkTest, TestRANDOM_63) {
  int64_t numCts = 24;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(23, 4), CtSlot(0, 0));
  mapping.add(CtSlot(16, 7), CtSlot(0, 1));
  mapping.add(CtSlot(1, 1), CtSlot(0, 2));
  mapping.add(CtSlot(0, 0), CtSlot(0, 3));
  mapping.add(CtSlot(8, 4), CtSlot(0, 4));
  mapping.add(CtSlot(9, 0), CtSlot(0, 5));
  mapping.add(CtSlot(10, 7), CtSlot(0, 6));
  mapping.add(CtSlot(23, 1), CtSlot(0, 7));
  mapping.add(CtSlot(17, 5), CtSlot(1, 0));
  mapping.add(CtSlot(21, 4), CtSlot(1, 1));
  mapping.add(CtSlot(17, 5), CtSlot(1, 2));
  mapping.add(CtSlot(5, 1), CtSlot(1, 3));
  mapping.add(CtSlot(2, 7), CtSlot(1, 4));
  mapping.add(CtSlot(6, 6), CtSlot(1, 5));
  mapping.add(CtSlot(17, 1), CtSlot(1, 6));
  mapping.add(CtSlot(19, 4), CtSlot(1, 7));
  mapping.add(CtSlot(14, 7), CtSlot(2, 0));
  mapping.add(CtSlot(10, 4), CtSlot(2, 1));
  mapping.add(CtSlot(0, 0), CtSlot(2, 2));
  mapping.add(CtSlot(18, 4), CtSlot(2, 3));
  mapping.add(CtSlot(16, 4), CtSlot(2, 4));
  mapping.add(CtSlot(4, 4), CtSlot(2, 5));
  mapping.add(CtSlot(16, 7), CtSlot(2, 6));
  mapping.add(CtSlot(9, 3), CtSlot(2, 7));
  mapping.add(CtSlot(0, 6), CtSlot(3, 0));
  mapping.add(CtSlot(23, 0), CtSlot(3, 1));
  mapping.add(CtSlot(5, 5), CtSlot(3, 2));
  mapping.add(CtSlot(20, 3), CtSlot(3, 3));
  mapping.add(CtSlot(12, 1), CtSlot(3, 4));
  mapping.add(CtSlot(6, 7), CtSlot(3, 5));
  mapping.add(CtSlot(14, 0), CtSlot(3, 6));
  mapping.add(CtSlot(9, 4), CtSlot(3, 7));
  mapping.add(CtSlot(2, 4), CtSlot(4, 0));
  mapping.add(CtSlot(10, 0), CtSlot(4, 1));
  mapping.add(CtSlot(13, 5), CtSlot(4, 2));
  mapping.add(CtSlot(23, 5), CtSlot(4, 3));
  mapping.add(CtSlot(10, 1), CtSlot(4, 4));
  mapping.add(CtSlot(3, 7), CtSlot(4, 5));
  mapping.add(CtSlot(0, 5), CtSlot(4, 6));
  mapping.add(CtSlot(4, 5), CtSlot(4, 7));
  mapping.add(CtSlot(6, 6), CtSlot(5, 0));
  mapping.add(CtSlot(6, 6), CtSlot(5, 1));
  mapping.add(CtSlot(12, 5), CtSlot(5, 2));
  mapping.add(CtSlot(15, 0), CtSlot(5, 3));
  mapping.add(CtSlot(5, 6), CtSlot(5, 4));
  mapping.add(CtSlot(3, 0), CtSlot(5, 5));
  mapping.add(CtSlot(17, 2), CtSlot(5, 6));
  mapping.add(CtSlot(7, 5), CtSlot(5, 7));
  mapping.add(CtSlot(1, 1), CtSlot(6, 0));
  mapping.add(CtSlot(22, 5), CtSlot(6, 1));
  mapping.add(CtSlot(13, 7), CtSlot(6, 2));
  mapping.add(CtSlot(11, 4), CtSlot(6, 3));
  mapping.add(CtSlot(22, 1), CtSlot(6, 4));
  mapping.add(CtSlot(3, 5), CtSlot(6, 5));
  mapping.add(CtSlot(7, 7), CtSlot(6, 6));
  mapping.add(CtSlot(2, 1), CtSlot(6, 7));
  mapping.add(CtSlot(16, 1), CtSlot(7, 0));
  mapping.add(CtSlot(3, 7), CtSlot(7, 1));
  mapping.add(CtSlot(8, 0), CtSlot(7, 2));
  mapping.add(CtSlot(17, 6), CtSlot(7, 3));
  mapping.add(CtSlot(14, 5), CtSlot(7, 4));
  mapping.add(CtSlot(0, 3), CtSlot(7, 5));
  mapping.add(CtSlot(23, 0), CtSlot(7, 6));
  mapping.add(CtSlot(7, 6), CtSlot(7, 7));
  mapping.add(CtSlot(20, 7), CtSlot(8, 0));
  mapping.add(CtSlot(0, 0), CtSlot(8, 1));
  mapping.add(CtSlot(5, 6), CtSlot(8, 2));
  mapping.add(CtSlot(6, 7), CtSlot(8, 3));
  mapping.add(CtSlot(9, 7), CtSlot(8, 4));
  mapping.add(CtSlot(18, 7), CtSlot(8, 5));
  mapping.add(CtSlot(1, 1), CtSlot(8, 6));
  mapping.add(CtSlot(7, 7), CtSlot(8, 7));
  mapping.add(CtSlot(12, 7), CtSlot(9, 0));
  mapping.add(CtSlot(7, 5), CtSlot(9, 1));
  mapping.add(CtSlot(4, 2), CtSlot(9, 2));
  mapping.add(CtSlot(2, 0), CtSlot(9, 3));
  mapping.add(CtSlot(13, 5), CtSlot(9, 4));
  mapping.add(CtSlot(19, 0), CtSlot(9, 5));
  mapping.add(CtSlot(0, 0), CtSlot(9, 6));
  mapping.add(CtSlot(2, 4), CtSlot(9, 7));
  mapping.add(CtSlot(13, 2), CtSlot(10, 0));
  mapping.add(CtSlot(11, 0), CtSlot(10, 1));
  mapping.add(CtSlot(13, 4), CtSlot(10, 2));
  mapping.add(CtSlot(16, 5), CtSlot(10, 3));
  mapping.add(CtSlot(2, 1), CtSlot(10, 4));
  mapping.add(CtSlot(4, 1), CtSlot(10, 5));
  mapping.add(CtSlot(10, 1), CtSlot(10, 6));
  mapping.add(CtSlot(11, 2), CtSlot(10, 7));
  mapping.add(CtSlot(8, 0), CtSlot(11, 0));
  mapping.add(CtSlot(21, 0), CtSlot(11, 1));
  mapping.add(CtSlot(10, 2), CtSlot(11, 2));
  mapping.add(CtSlot(16, 0), CtSlot(11, 3));
  mapping.add(CtSlot(5, 7), CtSlot(11, 4));
  mapping.add(CtSlot(23, 6), CtSlot(11, 5));
  mapping.add(CtSlot(4, 6), CtSlot(11, 6));
  mapping.add(CtSlot(6, 3), CtSlot(11, 7));
  mapping.add(CtSlot(22, 1), CtSlot(12, 0));
  mapping.add(CtSlot(1, 5), CtSlot(12, 1));
  mapping.add(CtSlot(2, 4), CtSlot(12, 2));
  mapping.add(CtSlot(4, 3), CtSlot(12, 3));
  mapping.add(CtSlot(8, 3), CtSlot(12, 4));
  mapping.add(CtSlot(16, 4), CtSlot(12, 5));
  mapping.add(CtSlot(23, 5), CtSlot(12, 6));
  mapping.add(CtSlot(19, 0), CtSlot(12, 7));
  mapping.add(CtSlot(11, 7), CtSlot(13, 0));
  mapping.add(CtSlot(13, 4), CtSlot(13, 1));
  mapping.add(CtSlot(12, 1), CtSlot(13, 2));
  mapping.add(CtSlot(2, 3), CtSlot(13, 3));
  mapping.add(CtSlot(21, 5), CtSlot(13, 4));
  mapping.add(CtSlot(4, 6), CtSlot(13, 5));
  mapping.add(CtSlot(16, 5), CtSlot(13, 6));
  mapping.add(CtSlot(12, 6), CtSlot(13, 7));
  mapping.add(CtSlot(2, 7), CtSlot(14, 0));
  mapping.add(CtSlot(2, 3), CtSlot(14, 1));
  mapping.add(CtSlot(21, 7), CtSlot(14, 2));
  mapping.add(CtSlot(23, 4), CtSlot(14, 3));
  mapping.add(CtSlot(19, 7), CtSlot(14, 4));
  mapping.add(CtSlot(0, 1), CtSlot(14, 5));
  mapping.add(CtSlot(15, 4), CtSlot(14, 6));
  mapping.add(CtSlot(0, 6), CtSlot(14, 7));
  mapping.add(CtSlot(11, 0), CtSlot(15, 0));
  mapping.add(CtSlot(17, 7), CtSlot(15, 1));
  mapping.add(CtSlot(18, 0), CtSlot(15, 2));
  mapping.add(CtSlot(15, 0), CtSlot(15, 3));
  mapping.add(CtSlot(4, 1), CtSlot(15, 4));
  mapping.add(CtSlot(12, 6), CtSlot(15, 5));
  mapping.add(CtSlot(12, 5), CtSlot(15, 6));
  mapping.add(CtSlot(5, 2), CtSlot(15, 7));
  mapping.add(CtSlot(2, 5), CtSlot(16, 0));
  mapping.add(CtSlot(23, 0), CtSlot(16, 1));
  mapping.add(CtSlot(10, 2), CtSlot(16, 2));
  mapping.add(CtSlot(9, 7), CtSlot(16, 3));
  mapping.add(CtSlot(2, 6), CtSlot(16, 4));
  mapping.add(CtSlot(7, 0), CtSlot(16, 5));
  mapping.add(CtSlot(20, 2), CtSlot(16, 6));
  mapping.add(CtSlot(13, 0), CtSlot(16, 7));
  mapping.add(CtSlot(7, 4), CtSlot(17, 0));
  mapping.add(CtSlot(6, 4), CtSlot(17, 1));
  mapping.add(CtSlot(12, 1), CtSlot(17, 2));
  mapping.add(CtSlot(5, 5), CtSlot(17, 3));
  mapping.add(CtSlot(8, 4), CtSlot(17, 4));
  mapping.add(CtSlot(14, 7), CtSlot(17, 5));
  mapping.add(CtSlot(18, 3), CtSlot(17, 6));
  mapping.add(CtSlot(19, 6), CtSlot(17, 7));
  mapping.add(CtSlot(16, 2), CtSlot(18, 0));
  mapping.add(CtSlot(14, 7), CtSlot(18, 1));
  mapping.add(CtSlot(3, 3), CtSlot(18, 2));
  mapping.add(CtSlot(21, 7), CtSlot(18, 3));
  mapping.add(CtSlot(17, 6), CtSlot(18, 4));
  mapping.add(CtSlot(5, 4), CtSlot(18, 5));
  mapping.add(CtSlot(8, 2), CtSlot(18, 6));
  mapping.add(CtSlot(19, 3), CtSlot(18, 7));
  mapping.add(CtSlot(11, 7), CtSlot(19, 0));
  mapping.add(CtSlot(8, 5), CtSlot(19, 1));
  mapping.add(CtSlot(17, 4), CtSlot(19, 2));
  mapping.add(CtSlot(6, 6), CtSlot(19, 3));
  mapping.add(CtSlot(14, 0), CtSlot(19, 4));
  mapping.add(CtSlot(20, 5), CtSlot(19, 5));
  mapping.add(CtSlot(0, 1), CtSlot(19, 6));
  mapping.add(CtSlot(12, 4), CtSlot(19, 7));
  mapping.add(CtSlot(13, 5), CtSlot(20, 0));
  mapping.add(CtSlot(20, 4), CtSlot(20, 1));
  mapping.add(CtSlot(11, 1), CtSlot(20, 2));
  mapping.add(CtSlot(2, 6), CtSlot(20, 3));
  mapping.add(CtSlot(7, 7), CtSlot(20, 4));
  mapping.add(CtSlot(6, 1), CtSlot(20, 5));
  mapping.add(CtSlot(12, 6), CtSlot(20, 6));
  mapping.add(CtSlot(19, 2), CtSlot(20, 7));
  mapping.add(CtSlot(18, 7), CtSlot(21, 0));
  mapping.add(CtSlot(14, 5), CtSlot(21, 1));
  mapping.add(CtSlot(12, 5), CtSlot(21, 2));
  mapping.add(CtSlot(18, 4), CtSlot(21, 3));
  mapping.add(CtSlot(22, 5), CtSlot(21, 4));
  mapping.add(CtSlot(2, 0), CtSlot(21, 5));
  mapping.add(CtSlot(4, 7), CtSlot(21, 6));
  mapping.add(CtSlot(21, 0), CtSlot(21, 7));
  mapping.add(CtSlot(19, 1), CtSlot(22, 0));
  mapping.add(CtSlot(0, 7), CtSlot(22, 1));
  mapping.add(CtSlot(14, 7), CtSlot(22, 2));
  mapping.add(CtSlot(4, 7), CtSlot(22, 3));
  mapping.add(CtSlot(16, 5), CtSlot(22, 4));
  mapping.add(CtSlot(10, 1), CtSlot(22, 5));
  mapping.add(CtSlot(19, 2), CtSlot(22, 6));
  mapping.add(CtSlot(4, 1), CtSlot(22, 7));
  mapping.add(CtSlot(11, 1), CtSlot(23, 0));
  mapping.add(CtSlot(2, 2), CtSlot(23, 1));
  mapping.add(CtSlot(19, 6), CtSlot(23, 2));
  mapping.add(CtSlot(16, 6), CtSlot(23, 3));
  mapping.add(CtSlot(10, 1), CtSlot(23, 4));
  mapping.add(CtSlot(10, 1), CtSlot(23, 5));
  mapping.add(CtSlot(23, 5), CtSlot(23, 6));
  mapping.add(CtSlot(5, 1), CtSlot(23, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

// TEST(ImplementShiftNetworkTest, TestRANDOM_64) {
//   int64_t numCts = 24;
//   int64_t ctSize = 8;
//   Mapping mapping(ctSize, numCts);
//   mapping.add(CtSlot(23, 4), CtSlot(0, 0));
//   mapping.add(CtSlot(16, 7), CtSlot(0, 1));
//   mapping.add(CtSlot(1, 1), CtSlot(0, 2));
//   mapping.add(CtSlot(0, 0), CtSlot(0, 3));
//   mapping.add(CtSlot(8, 4), CtSlot(0, 4));
//   mapping.add(CtSlot(9, 0), CtSlot(0, 5));
//   mapping.add(CtSlot(10, 7), CtSlot(0, 6));
//   mapping.add(CtSlot(23, 1), CtSlot(0, 7));
//   mapping.add(CtSlot(17, 5), CtSlot(1, 0));
//   mapping.add(CtSlot(21, 4), CtSlot(1, 1));
//   mapping.add(CtSlot(17, 5), CtSlot(1, 2));
//   mapping.add(CtSlot(5, 1), CtSlot(1, 3));
//   mapping.add(CtSlot(2, 7), CtSlot(1, 4));
//   mapping.add(CtSlot(6, 6), CtSlot(1, 5));
//   mapping.add(CtSlot(17, 1), CtSlot(1, 6));
//   mapping.add(CtSlot(19, 4), CtSlot(1, 7));
//   mapping.add(CtSlot(14, 7), CtSlot(2, 0));
//   mapping.add(CtSlot(10, 4), CtSlot(2, 1));
//   mapping.add(CtSlot(0, 0), CtSlot(2, 2));
//   mapping.add(CtSlot(18, 4), CtSlot(2, 3));
//   mapping.add(CtSlot(16, 4), CtSlot(2, 4));
//   mapping.add(CtSlot(4, 4), CtSlot(2, 5));
//   mapping.add(CtSlot(16, 7), CtSlot(2, 6));
//   mapping.add(CtSlot(9, 3), CtSlot(2, 7));
//   mapping.add(CtSlot(0, 6), CtSlot(3, 0));
//   mapping.add(CtSlot(23, 0), CtSlot(3, 1));
//   mapping.add(CtSlot(5, 5), CtSlot(3, 2));
//   mapping.add(CtSlot(20, 3), CtSlot(3, 3));
//   mapping.add(CtSlot(12, 1), CtSlot(3, 4));
//   mapping.add(CtSlot(6, 7), CtSlot(3, 5));
//   mapping.add(CtSlot(14, 0), CtSlot(3, 6));
//   mapping.add(CtSlot(9, 4), CtSlot(3, 7));
//   mapping.add(CtSlot(2, 4), CtSlot(4, 0));
//   mapping.add(CtSlot(10, 0), CtSlot(4, 1));
//   mapping.add(CtSlot(13, 5), CtSlot(4, 2));
//   mapping.add(CtSlot(23, 5), CtSlot(4, 3));
//   mapping.add(CtSlot(10, 1), CtSlot(4, 4));
//   mapping.add(CtSlot(3, 7), CtSlot(4, 5));
//   mapping.add(CtSlot(0, 5), CtSlot(4, 6));
//   mapping.add(CtSlot(4, 5), CtSlot(4, 7));
//   mapping.add(CtSlot(6, 6), CtSlot(5, 0));
//   mapping.add(CtSlot(6, 6), CtSlot(5, 1));
//   mapping.add(CtSlot(12, 5), CtSlot(5, 2));
//   mapping.add(CtSlot(15, 0), CtSlot(5, 3));
//   mapping.add(CtSlot(5, 6), CtSlot(5, 4));
//   mapping.add(CtSlot(3, 0), CtSlot(5, 5));
//   mapping.add(CtSlot(17, 2), CtSlot(5, 6));
//   mapping.add(CtSlot(7, 5), CtSlot(5, 7));
//   mapping.add(CtSlot(1, 1), CtSlot(6, 0));
//   mapping.add(CtSlot(22, 5), CtSlot(6, 1));
//   mapping.add(CtSlot(13, 7), CtSlot(6, 2));
//   mapping.add(CtSlot(11, 4), CtSlot(6, 3));
//   mapping.add(CtSlot(22, 1), CtSlot(6, 4));
//   mapping.add(CtSlot(3, 5), CtSlot(6, 5));
//   mapping.add(CtSlot(7, 7), CtSlot(6, 6));
//   mapping.add(CtSlot(2, 1), CtSlot(6, 7));
//   mapping.add(CtSlot(16, 1), CtSlot(7, 0));
//   mapping.add(CtSlot(3, 7), CtSlot(7, 1));
//   mapping.add(CtSlot(8, 0), CtSlot(7, 2));
//   mapping.add(CtSlot(17, 1), CtSlot(7, 3));
//   mapping.add(CtSlot(14, 5), CtSlot(7, 4));
//   mapping.add(CtSlot(0, 3), CtSlot(7, 5));
//   mapping.add(CtSlot(23, 0), CtSlot(7, 6));
//   mapping.add(CtSlot(7, 6), CtSlot(7, 7));
//   mapping.add(CtSlot(20, 7), CtSlot(8, 0));
//   mapping.add(CtSlot(0, 0), CtSlot(8, 1));
//   mapping.add(CtSlot(5, 6), CtSlot(8, 2));
//   mapping.add(CtSlot(6, 7), CtSlot(8, 3));
//   mapping.add(CtSlot(9, 7), CtSlot(8, 4));
//   mapping.add(CtSlot(18, 7), CtSlot(8, 5));
//   mapping.add(CtSlot(1, 1), CtSlot(8, 6));
//   mapping.add(CtSlot(7, 7), CtSlot(8, 7));
//   mapping.add(CtSlot(12, 7), CtSlot(9, 0));
//   mapping.add(CtSlot(7, 5), CtSlot(9, 1));
//   mapping.add(CtSlot(4, 2), CtSlot(9, 2));
//   mapping.add(CtSlot(2, 0), CtSlot(9, 3));
//   mapping.add(CtSlot(13, 5), CtSlot(9, 4));
//   mapping.add(CtSlot(19, 0), CtSlot(9, 5));
//   mapping.add(CtSlot(0, 0), CtSlot(9, 6));
//   mapping.add(CtSlot(2, 4), CtSlot(9, 7));
//   mapping.add(CtSlot(13, 2), CtSlot(10, 0));
//   mapping.add(CtSlot(11, 0), CtSlot(10, 1));
//   mapping.add(CtSlot(13, 4), CtSlot(10, 2));
//   mapping.add(CtSlot(16, 5), CtSlot(10, 3));
//   mapping.add(CtSlot(2, 1), CtSlot(10, 4));
//   mapping.add(CtSlot(4, 1), CtSlot(10, 5));
//   mapping.add(CtSlot(10, 1), CtSlot(10, 6));
//   mapping.add(CtSlot(11, 2), CtSlot(10, 7));
//   mapping.add(CtSlot(8, 0), CtSlot(11, 0));
//   mapping.add(CtSlot(21, 0), CtSlot(11, 1));
//   mapping.add(CtSlot(10, 2), CtSlot(11, 2));
//   mapping.add(CtSlot(16, 0), CtSlot(11, 3));
//   mapping.add(CtSlot(5, 7), CtSlot(11, 4));
//   mapping.add(CtSlot(23, 6), CtSlot(11, 5));
//   mapping.add(CtSlot(4, 6), CtSlot(11, 6));
//   mapping.add(CtSlot(6, 3), CtSlot(11, 7));
//   mapping.add(CtSlot(22, 1), CtSlot(12, 0));
//   mapping.add(CtSlot(1, 5), CtSlot(12, 1));
//   mapping.add(CtSlot(2, 4), CtSlot(12, 2));
//   mapping.add(CtSlot(4, 3), CtSlot(12, 3));
//   mapping.add(CtSlot(8, 3), CtSlot(12, 4));
//   mapping.add(CtSlot(16, 4), CtSlot(12, 5));
//   mapping.add(CtSlot(23, 5), CtSlot(12, 6));
//   mapping.add(CtSlot(19, 0), CtSlot(12, 7));
//   mapping.add(CtSlot(11, 7), CtSlot(13, 0));
//   mapping.add(CtSlot(13, 4), CtSlot(13, 1));
//   mapping.add(CtSlot(12, 1), CtSlot(13, 2));
//   mapping.add(CtSlot(2, 3), CtSlot(13, 3));
//   mapping.add(CtSlot(21, 5), CtSlot(13, 4));
//   mapping.add(CtSlot(4, 6), CtSlot(13, 5));
//   mapping.add(CtSlot(16, 5), CtSlot(13, 6));
//   mapping.add(CtSlot(12, 6), CtSlot(13, 7));
//   mapping.add(CtSlot(2, 7), CtSlot(14, 0));
//   mapping.add(CtSlot(2, 3), CtSlot(14, 1));
//   mapping.add(CtSlot(21, 7), CtSlot(14, 2));
//   mapping.add(CtSlot(23, 4), CtSlot(14, 3));
//   mapping.add(CtSlot(19, 7), CtSlot(14, 4));
//   mapping.add(CtSlot(0, 1), CtSlot(14, 5));
//   mapping.add(CtSlot(15, 4), CtSlot(14, 6));
//   mapping.add(CtSlot(0, 6), CtSlot(14, 7));
//   mapping.add(CtSlot(11, 0), CtSlot(15, 0));
//   mapping.add(CtSlot(17, 7), CtSlot(15, 1));
//   mapping.add(CtSlot(18, 0), CtSlot(15, 2));
//   mapping.add(CtSlot(15, 0), CtSlot(15, 3));
//   mapping.add(CtSlot(4, 1), CtSlot(15, 4));
//   mapping.add(CtSlot(12, 6), CtSlot(15, 5));
//   mapping.add(CtSlot(12, 5), CtSlot(15, 6));
//   mapping.add(CtSlot(5, 2), CtSlot(15, 7));
//   mapping.add(CtSlot(2, 5), CtSlot(16, 0));
//   mapping.add(CtSlot(23, 0), CtSlot(16, 1));
//   mapping.add(CtSlot(10, 2), CtSlot(16, 2));
//   mapping.add(CtSlot(9, 7), CtSlot(16, 3));
//   mapping.add(CtSlot(2, 6), CtSlot(16, 4));
//   mapping.add(CtSlot(7, 0), CtSlot(16, 5));
//   mapping.add(CtSlot(20, 2), CtSlot(16, 6));
//   mapping.add(CtSlot(13, 0), CtSlot(16, 7));
//   mapping.add(CtSlot(7, 4), CtSlot(17, 0));
//   mapping.add(CtSlot(6, 4), CtSlot(17, 1));
//   mapping.add(CtSlot(12, 1), CtSlot(17, 2));
//   mapping.add(CtSlot(5, 5), CtSlot(17, 3));
//   mapping.add(CtSlot(8, 4), CtSlot(17, 4));
//   mapping.add(CtSlot(14, 7), CtSlot(17, 5));
//   mapping.add(CtSlot(18, 3), CtSlot(17, 6));
//   mapping.add(CtSlot(19, 6), CtSlot(17, 7));
//   mapping.add(CtSlot(16, 2), CtSlot(18, 0));
//   mapping.add(CtSlot(14, 7), CtSlot(18, 1));
//   mapping.add(CtSlot(3, 3), CtSlot(18, 2));
//   mapping.add(CtSlot(21, 7), CtSlot(18, 3));
//   mapping.add(CtSlot(17, 6), CtSlot(18, 4));
//   mapping.add(CtSlot(5, 4), CtSlot(18, 5));
//   mapping.add(CtSlot(8, 2), CtSlot(18, 6));
//   mapping.add(CtSlot(19, 3), CtSlot(18, 7));
//   mapping.add(CtSlot(11, 7), CtSlot(19, 0));
//   mapping.add(CtSlot(8, 5), CtSlot(19, 1));
//   mapping.add(CtSlot(17, 4), CtSlot(19, 2));
//   mapping.add(CtSlot(6, 6), CtSlot(19, 3));
//   mapping.add(CtSlot(14, 0), CtSlot(19, 4));
//   mapping.add(CtSlot(20, 5), CtSlot(19, 5));
//   mapping.add(CtSlot(0, 1), CtSlot(19, 6));
//   mapping.add(CtSlot(12, 4), CtSlot(19, 7));
//   mapping.add(CtSlot(13, 5), CtSlot(20, 0));
//   mapping.add(CtSlot(20, 4), CtSlot(20, 1));
//   mapping.add(CtSlot(11, 1), CtSlot(20, 2));
//   mapping.add(CtSlot(2, 6), CtSlot(20, 3));
//   mapping.add(CtSlot(7, 7), CtSlot(20, 4));
//   mapping.add(CtSlot(6, 1), CtSlot(20, 5));
//   mapping.add(CtSlot(12, 6), CtSlot(20, 6));
//   mapping.add(CtSlot(19, 2), CtSlot(20, 7));
//   mapping.add(CtSlot(18, 7), CtSlot(21, 0));
//   mapping.add(CtSlot(14, 5), CtSlot(21, 1));
//   mapping.add(CtSlot(12, 5), CtSlot(21, 2));
//   mapping.add(CtSlot(18, 4), CtSlot(21, 3));
//   mapping.add(CtSlot(22, 5), CtSlot(21, 4));
//   mapping.add(CtSlot(2, 0), CtSlot(21, 5));
//   mapping.add(CtSlot(4, 7), CtSlot(21, 6));
//   mapping.add(CtSlot(21, 0), CtSlot(21, 7));
//   mapping.add(CtSlot(19, 1), CtSlot(22, 0));
//   mapping.add(CtSlot(0, 7), CtSlot(22, 1));
//   mapping.add(CtSlot(14, 7), CtSlot(22, 2));
//   mapping.add(CtSlot(4, 7), CtSlot(22, 3));
//   mapping.add(CtSlot(16, 5), CtSlot(22, 4));
//   mapping.add(CtSlot(10, 1), CtSlot(22, 5));
//   mapping.add(CtSlot(19, 2), CtSlot(22, 6));
//   mapping.add(CtSlot(4, 1), CtSlot(22, 7));
//   mapping.add(CtSlot(11, 1), CtSlot(23, 0));
//   mapping.add(CtSlot(2, 2), CtSlot(23, 1));
//   mapping.add(CtSlot(19, 6), CtSlot(23, 2));
//   mapping.add(CtSlot(16, 6), CtSlot(23, 3));
//   mapping.add(CtSlot(10, 1), CtSlot(23, 4));
//   mapping.add(CtSlot(10, 1), CtSlot(23, 5));
//   mapping.add(CtSlot(23, 5), CtSlot(23, 6));
//   mapping.add(CtSlot(5, 1), CtSlot(23, 7));
//   VosVosErkinShiftNetworks shiftNetworks;
//   auto scheme = shiftNetworks.findShiftScheme(mapping);
//   simulateShiftNetwork(mapping, scheme, numCts, ctSize);
// }

TEST(ImplementShiftNetworkTest, TestRANDOM_65) {
  int64_t numCts = 2;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(1, 1), CtSlot(0, 0));
  mapping.add(CtSlot(1, 4), CtSlot(0, 1));
  mapping.add(CtSlot(1, 7), CtSlot(0, 2));
  mapping.add(CtSlot(1, 3), CtSlot(0, 3));
  mapping.add(CtSlot(0, 6), CtSlot(0, 4));
  mapping.add(CtSlot(1, 7), CtSlot(0, 5));
  mapping.add(CtSlot(0, 1), CtSlot(0, 6));
  mapping.add(CtSlot(1, 1), CtSlot(0, 7));
  mapping.add(CtSlot(0, 2), CtSlot(1, 0));
  mapping.add(CtSlot(1, 2), CtSlot(1, 1));
  mapping.add(CtSlot(1, 7), CtSlot(1, 2));
  mapping.add(CtSlot(0, 0), CtSlot(1, 3));
  mapping.add(CtSlot(0, 0), CtSlot(1, 4));
  mapping.add(CtSlot(0, 2), CtSlot(1, 5));
  mapping.add(CtSlot(0, 5), CtSlot(1, 6));
  mapping.add(CtSlot(1, 2), CtSlot(1, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_66) {
  int64_t numCts = 2;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(1, 1), CtSlot(0, 0));
  mapping.add(CtSlot(1, 4), CtSlot(0, 1));
  mapping.add(CtSlot(1, 7), CtSlot(0, 2));
  mapping.add(CtSlot(1, 3), CtSlot(0, 3));
  mapping.add(CtSlot(0, 7), CtSlot(0, 4));
  mapping.add(CtSlot(1, 7), CtSlot(0, 5));
  mapping.add(CtSlot(0, 1), CtSlot(0, 6));
  mapping.add(CtSlot(1, 1), CtSlot(0, 7));
  mapping.add(CtSlot(0, 2), CtSlot(1, 0));
  mapping.add(CtSlot(1, 2), CtSlot(1, 1));
  mapping.add(CtSlot(1, 7), CtSlot(1, 2));
  mapping.add(CtSlot(0, 0), CtSlot(1, 3));
  mapping.add(CtSlot(0, 0), CtSlot(1, 4));
  mapping.add(CtSlot(0, 2), CtSlot(1, 5));
  mapping.add(CtSlot(0, 5), CtSlot(1, 6));
  mapping.add(CtSlot(1, 2), CtSlot(1, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_67) {
  int64_t numCts = 1;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 1), CtSlot(0, 0));
  mapping.add(CtSlot(0, 1), CtSlot(0, 1));
  mapping.add(CtSlot(0, 1), CtSlot(0, 2));
  mapping.add(CtSlot(0, 1), CtSlot(0, 3));
  mapping.add(CtSlot(0, 0), CtSlot(0, 4));
  mapping.add(CtSlot(0, 1), CtSlot(0, 5));
  mapping.add(CtSlot(0, 0), CtSlot(0, 6));
  mapping.add(CtSlot(0, 1), CtSlot(0, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_68) {
  int64_t numCts = 1;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 1), CtSlot(0, 0));
  mapping.add(CtSlot(0, 1), CtSlot(0, 1));
  mapping.add(CtSlot(0, 0), CtSlot(0, 2));
  mapping.add(CtSlot(0, 1), CtSlot(0, 3));
  mapping.add(CtSlot(0, 0), CtSlot(0, 4));
  mapping.add(CtSlot(0, 1), CtSlot(0, 5));
  mapping.add(CtSlot(0, 0), CtSlot(0, 6));
  mapping.add(CtSlot(0, 1), CtSlot(0, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_69) {
  int64_t numCts = 1;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(0, 1), CtSlot(0, 0));
  mapping.add(CtSlot(0, 1), CtSlot(0, 1));
  mapping.add(CtSlot(0, 0), CtSlot(0, 2));
  mapping.add(CtSlot(0, 1), CtSlot(0, 3));
  mapping.add(CtSlot(0, 0), CtSlot(0, 4));
  mapping.add(CtSlot(0, 1), CtSlot(0, 5));
  mapping.add(CtSlot(0, 0), CtSlot(0, 6));
  mapping.add(CtSlot(0, 0), CtSlot(0, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_70) {
  int64_t numCts = 23;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(17, 4), CtSlot(0, 0));
  mapping.add(CtSlot(6, 7), CtSlot(0, 1));
  mapping.add(CtSlot(19, 7), CtSlot(0, 2));
  mapping.add(CtSlot(17, 2), CtSlot(0, 3));
  mapping.add(CtSlot(17, 1), CtSlot(0, 4));
  mapping.add(CtSlot(7, 2), CtSlot(0, 5));
  mapping.add(CtSlot(15, 1), CtSlot(0, 6));
  mapping.add(CtSlot(15, 1), CtSlot(0, 7));
  mapping.add(CtSlot(10, 2), CtSlot(1, 0));
  mapping.add(CtSlot(6, 1), CtSlot(1, 1));
  mapping.add(CtSlot(4, 6), CtSlot(1, 2));
  mapping.add(CtSlot(6, 6), CtSlot(1, 3));
  mapping.add(CtSlot(9, 5), CtSlot(1, 4));
  mapping.add(CtSlot(20, 7), CtSlot(1, 5));
  mapping.add(CtSlot(1, 4), CtSlot(1, 6));
  mapping.add(CtSlot(15, 3), CtSlot(1, 7));
  mapping.add(CtSlot(20, 1), CtSlot(2, 0));
  mapping.add(CtSlot(10, 4), CtSlot(2, 1));
  mapping.add(CtSlot(9, 0), CtSlot(2, 2));
  mapping.add(CtSlot(13, 0), CtSlot(2, 3));
  mapping.add(CtSlot(2, 1), CtSlot(2, 4));
  mapping.add(CtSlot(12, 3), CtSlot(2, 5));
  mapping.add(CtSlot(16, 2), CtSlot(2, 6));
  mapping.add(CtSlot(14, 7), CtSlot(2, 7));
  mapping.add(CtSlot(20, 1), CtSlot(3, 0));
  mapping.add(CtSlot(13, 2), CtSlot(3, 1));
  mapping.add(CtSlot(7, 0), CtSlot(3, 2));
  mapping.add(CtSlot(15, 0), CtSlot(3, 3));
  mapping.add(CtSlot(1, 0), CtSlot(3, 4));
  mapping.add(CtSlot(2, 7), CtSlot(3, 5));
  mapping.add(CtSlot(7, 2), CtSlot(3, 6));
  mapping.add(CtSlot(6, 4), CtSlot(3, 7));
  mapping.add(CtSlot(20, 5), CtSlot(4, 0));
  mapping.add(CtSlot(15, 4), CtSlot(4, 1));
  mapping.add(CtSlot(6, 6), CtSlot(4, 2));
  mapping.add(CtSlot(19, 7), CtSlot(4, 3));
  mapping.add(CtSlot(20, 4), CtSlot(4, 4));
  mapping.add(CtSlot(15, 3), CtSlot(4, 5));
  mapping.add(CtSlot(0, 5), CtSlot(4, 6));
  mapping.add(CtSlot(18, 0), CtSlot(4, 7));
  mapping.add(CtSlot(10, 2), CtSlot(5, 0));
  mapping.add(CtSlot(2, 6), CtSlot(5, 1));
  mapping.add(CtSlot(16, 2), CtSlot(5, 2));
  mapping.add(CtSlot(10, 5), CtSlot(5, 3));
  mapping.add(CtSlot(11, 2), CtSlot(5, 4));
  mapping.add(CtSlot(20, 0), CtSlot(5, 5));
  mapping.add(CtSlot(6, 5), CtSlot(5, 6));
  mapping.add(CtSlot(15, 1), CtSlot(5, 7));
  mapping.add(CtSlot(5, 5), CtSlot(6, 0));
  mapping.add(CtSlot(6, 0), CtSlot(6, 1));
  mapping.add(CtSlot(0, 4), CtSlot(6, 2));
  mapping.add(CtSlot(5, 1), CtSlot(6, 3));
  mapping.add(CtSlot(0, 0), CtSlot(6, 4));
  mapping.add(CtSlot(11, 1), CtSlot(6, 5));
  mapping.add(CtSlot(3, 6), CtSlot(6, 6));
  mapping.add(CtSlot(16, 2), CtSlot(6, 7));
  mapping.add(CtSlot(21, 1), CtSlot(7, 0));
  mapping.add(CtSlot(18, 0), CtSlot(7, 1));
  mapping.add(CtSlot(2, 7), CtSlot(7, 2));
  mapping.add(CtSlot(8, 4), CtSlot(7, 3));
  mapping.add(CtSlot(18, 0), CtSlot(7, 4));
  mapping.add(CtSlot(21, 2), CtSlot(7, 5));
  mapping.add(CtSlot(14, 0), CtSlot(7, 6));
  mapping.add(CtSlot(4, 3), CtSlot(7, 7));
  mapping.add(CtSlot(11, 3), CtSlot(8, 0));
  mapping.add(CtSlot(0, 6), CtSlot(8, 1));
  mapping.add(CtSlot(3, 6), CtSlot(8, 2));
  mapping.add(CtSlot(13, 1), CtSlot(8, 3));
  mapping.add(CtSlot(19, 5), CtSlot(8, 4));
  mapping.add(CtSlot(14, 6), CtSlot(8, 5));
  mapping.add(CtSlot(22, 3), CtSlot(8, 6));
  mapping.add(CtSlot(7, 6), CtSlot(8, 7));
  mapping.add(CtSlot(22, 5), CtSlot(9, 0));
  mapping.add(CtSlot(17, 2), CtSlot(9, 1));
  mapping.add(CtSlot(21, 0), CtSlot(9, 2));
  mapping.add(CtSlot(0, 3), CtSlot(9, 3));
  mapping.add(CtSlot(13, 7), CtSlot(9, 4));
  mapping.add(CtSlot(14, 6), CtSlot(9, 5));
  mapping.add(CtSlot(16, 4), CtSlot(9, 6));
  mapping.add(CtSlot(17, 2), CtSlot(9, 7));
  mapping.add(CtSlot(1, 3), CtSlot(10, 0));
  mapping.add(CtSlot(15, 2), CtSlot(10, 1));
  mapping.add(CtSlot(12, 3), CtSlot(10, 2));
  mapping.add(CtSlot(2, 3), CtSlot(10, 3));
  mapping.add(CtSlot(1, 3), CtSlot(10, 4));
  mapping.add(CtSlot(6, 6), CtSlot(10, 5));
  mapping.add(CtSlot(10, 2), CtSlot(10, 6));
  mapping.add(CtSlot(21, 6), CtSlot(10, 7));
  mapping.add(CtSlot(16, 3), CtSlot(11, 0));
  mapping.add(CtSlot(12, 4), CtSlot(11, 1));
  mapping.add(CtSlot(20, 3), CtSlot(11, 2));
  mapping.add(CtSlot(12, 2), CtSlot(11, 3));
  mapping.add(CtSlot(18, 7), CtSlot(11, 4));
  mapping.add(CtSlot(9, 0), CtSlot(11, 5));
  mapping.add(CtSlot(13, 1), CtSlot(11, 6));
  mapping.add(CtSlot(14, 1), CtSlot(11, 7));
  mapping.add(CtSlot(4, 7), CtSlot(12, 0));
  mapping.add(CtSlot(17, 6), CtSlot(12, 1));
  mapping.add(CtSlot(7, 0), CtSlot(12, 2));
  mapping.add(CtSlot(9, 5), CtSlot(12, 3));
  mapping.add(CtSlot(12, 4), CtSlot(12, 4));
  mapping.add(CtSlot(21, 1), CtSlot(12, 5));
  mapping.add(CtSlot(0, 7), CtSlot(12, 6));
  mapping.add(CtSlot(15, 3), CtSlot(12, 7));
  mapping.add(CtSlot(16, 4), CtSlot(13, 0));
  mapping.add(CtSlot(13, 6), CtSlot(13, 1));
  mapping.add(CtSlot(14, 0), CtSlot(13, 2));
  mapping.add(CtSlot(1, 4), CtSlot(13, 3));
  mapping.add(CtSlot(12, 0), CtSlot(13, 4));
  mapping.add(CtSlot(20, 1), CtSlot(13, 5));
  mapping.add(CtSlot(2, 6), CtSlot(13, 6));
  mapping.add(CtSlot(17, 1), CtSlot(13, 7));
  mapping.add(CtSlot(1, 4), CtSlot(14, 0));
  mapping.add(CtSlot(4, 0), CtSlot(14, 1));
  mapping.add(CtSlot(10, 2), CtSlot(14, 2));
  mapping.add(CtSlot(6, 5), CtSlot(14, 3));
  mapping.add(CtSlot(21, 0), CtSlot(14, 4));
  mapping.add(CtSlot(6, 4), CtSlot(14, 5));
  mapping.add(CtSlot(7, 7), CtSlot(14, 6));
  mapping.add(CtSlot(18, 3), CtSlot(14, 7));
  mapping.add(CtSlot(22, 1), CtSlot(15, 0));
  mapping.add(CtSlot(7, 0), CtSlot(15, 1));
  mapping.add(CtSlot(15, 2), CtSlot(15, 2));
  mapping.add(CtSlot(3, 3), CtSlot(15, 3));
  mapping.add(CtSlot(8, 5), CtSlot(15, 4));
  mapping.add(CtSlot(7, 3), CtSlot(15, 5));
  mapping.add(CtSlot(0, 4), CtSlot(15, 6));
  mapping.add(CtSlot(11, 7), CtSlot(15, 7));
  mapping.add(CtSlot(14, 3), CtSlot(16, 0));
  mapping.add(CtSlot(19, 5), CtSlot(16, 1));
  mapping.add(CtSlot(9, 4), CtSlot(16, 2));
  mapping.add(CtSlot(22, 5), CtSlot(16, 3));
  mapping.add(CtSlot(8, 6), CtSlot(16, 4));
  mapping.add(CtSlot(13, 7), CtSlot(16, 5));
  mapping.add(CtSlot(17, 1), CtSlot(16, 6));
  mapping.add(CtSlot(13, 4), CtSlot(16, 7));
  mapping.add(CtSlot(14, 2), CtSlot(17, 0));
  mapping.add(CtSlot(1, 2), CtSlot(17, 1));
  mapping.add(CtSlot(2, 3), CtSlot(17, 2));
  mapping.add(CtSlot(12, 5), CtSlot(17, 3));
  mapping.add(CtSlot(22, 3), CtSlot(17, 4));
  mapping.add(CtSlot(11, 7), CtSlot(17, 5));
  mapping.add(CtSlot(12, 2), CtSlot(17, 6));
  mapping.add(CtSlot(0, 7), CtSlot(17, 7));
  mapping.add(CtSlot(6, 6), CtSlot(18, 0));
  mapping.add(CtSlot(8, 3), CtSlot(18, 1));
  mapping.add(CtSlot(10, 4), CtSlot(18, 2));
  mapping.add(CtSlot(8, 1), CtSlot(18, 3));
  mapping.add(CtSlot(13, 0), CtSlot(18, 4));
  mapping.add(CtSlot(3, 7), CtSlot(18, 5));
  mapping.add(CtSlot(22, 4), CtSlot(18, 6));
  mapping.add(CtSlot(5, 5), CtSlot(18, 7));
  mapping.add(CtSlot(9, 4), CtSlot(19, 0));
  mapping.add(CtSlot(9, 7), CtSlot(19, 1));
  mapping.add(CtSlot(10, 7), CtSlot(19, 2));
  mapping.add(CtSlot(15, 0), CtSlot(19, 3));
  mapping.add(CtSlot(18, 7), CtSlot(19, 4));
  mapping.add(CtSlot(14, 3), CtSlot(19, 5));
  mapping.add(CtSlot(7, 5), CtSlot(19, 6));
  mapping.add(CtSlot(0, 7), CtSlot(19, 7));
  mapping.add(CtSlot(12, 6), CtSlot(20, 0));
  mapping.add(CtSlot(3, 2), CtSlot(20, 1));
  mapping.add(CtSlot(20, 6), CtSlot(20, 2));
  mapping.add(CtSlot(4, 3), CtSlot(20, 3));
  mapping.add(CtSlot(15, 7), CtSlot(20, 4));
  mapping.add(CtSlot(19, 5), CtSlot(20, 5));
  mapping.add(CtSlot(22, 2), CtSlot(20, 6));
  mapping.add(CtSlot(19, 1), CtSlot(20, 7));
  mapping.add(CtSlot(3, 6), CtSlot(21, 0));
  mapping.add(CtSlot(14, 6), CtSlot(21, 1));
  mapping.add(CtSlot(6, 1), CtSlot(21, 2));
  mapping.add(CtSlot(8, 2), CtSlot(21, 3));
  mapping.add(CtSlot(8, 5), CtSlot(21, 4));
  mapping.add(CtSlot(15, 1), CtSlot(21, 5));
  mapping.add(CtSlot(14, 3), CtSlot(21, 6));
  mapping.add(CtSlot(16, 5), CtSlot(21, 7));
  mapping.add(CtSlot(19, 2), CtSlot(22, 0));
  mapping.add(CtSlot(18, 3), CtSlot(22, 1));
  mapping.add(CtSlot(9, 1), CtSlot(22, 2));
  mapping.add(CtSlot(13, 0), CtSlot(22, 3));
  mapping.add(CtSlot(2, 4), CtSlot(22, 4));
  mapping.add(CtSlot(10, 7), CtSlot(22, 5));
  mapping.add(CtSlot(19, 2), CtSlot(22, 6));
  mapping.add(CtSlot(10, 6), CtSlot(22, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_71) {
  int64_t numCts = 23;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(17, 4), CtSlot(0, 0));
  mapping.add(CtSlot(6, 7), CtSlot(0, 1));
  mapping.add(CtSlot(19, 7), CtSlot(0, 2));
  mapping.add(CtSlot(17, 2), CtSlot(0, 3));
  mapping.add(CtSlot(17, 1), CtSlot(0, 4));
  mapping.add(CtSlot(7, 2), CtSlot(0, 5));
  mapping.add(CtSlot(15, 1), CtSlot(0, 6));
  mapping.add(CtSlot(15, 1), CtSlot(0, 7));
  mapping.add(CtSlot(10, 2), CtSlot(1, 0));
  mapping.add(CtSlot(6, 1), CtSlot(1, 1));
  mapping.add(CtSlot(4, 6), CtSlot(1, 2));
  mapping.add(CtSlot(6, 6), CtSlot(1, 3));
  mapping.add(CtSlot(9, 5), CtSlot(1, 4));
  mapping.add(CtSlot(20, 7), CtSlot(1, 5));
  mapping.add(CtSlot(1, 4), CtSlot(1, 6));
  mapping.add(CtSlot(15, 3), CtSlot(1, 7));
  mapping.add(CtSlot(20, 1), CtSlot(2, 0));
  mapping.add(CtSlot(10, 4), CtSlot(2, 1));
  mapping.add(CtSlot(9, 0), CtSlot(2, 2));
  mapping.add(CtSlot(13, 0), CtSlot(2, 3));
  mapping.add(CtSlot(2, 1), CtSlot(2, 4));
  mapping.add(CtSlot(12, 3), CtSlot(2, 5));
  mapping.add(CtSlot(16, 2), CtSlot(2, 6));
  mapping.add(CtSlot(14, 7), CtSlot(2, 7));
  mapping.add(CtSlot(20, 1), CtSlot(3, 0));
  mapping.add(CtSlot(13, 2), CtSlot(3, 1));
  mapping.add(CtSlot(7, 0), CtSlot(3, 2));
  mapping.add(CtSlot(15, 0), CtSlot(3, 3));
  mapping.add(CtSlot(1, 0), CtSlot(3, 4));
  mapping.add(CtSlot(2, 7), CtSlot(3, 5));
  mapping.add(CtSlot(7, 2), CtSlot(3, 6));
  mapping.add(CtSlot(6, 4), CtSlot(3, 7));
  mapping.add(CtSlot(20, 5), CtSlot(4, 0));
  mapping.add(CtSlot(15, 4), CtSlot(4, 1));
  mapping.add(CtSlot(6, 6), CtSlot(4, 2));
  mapping.add(CtSlot(19, 7), CtSlot(4, 3));
  mapping.add(CtSlot(20, 4), CtSlot(4, 4));
  mapping.add(CtSlot(15, 3), CtSlot(4, 5));
  mapping.add(CtSlot(0, 5), CtSlot(4, 6));
  mapping.add(CtSlot(18, 0), CtSlot(4, 7));
  mapping.add(CtSlot(10, 2), CtSlot(5, 0));
  mapping.add(CtSlot(2, 6), CtSlot(5, 1));
  mapping.add(CtSlot(16, 2), CtSlot(5, 2));
  mapping.add(CtSlot(10, 5), CtSlot(5, 3));
  mapping.add(CtSlot(11, 2), CtSlot(5, 4));
  mapping.add(CtSlot(20, 0), CtSlot(5, 5));
  mapping.add(CtSlot(6, 5), CtSlot(5, 6));
  mapping.add(CtSlot(15, 1), CtSlot(5, 7));
  mapping.add(CtSlot(5, 5), CtSlot(6, 0));
  mapping.add(CtSlot(6, 0), CtSlot(6, 1));
  mapping.add(CtSlot(0, 4), CtSlot(6, 2));
  mapping.add(CtSlot(5, 1), CtSlot(6, 3));
  mapping.add(CtSlot(0, 0), CtSlot(6, 4));
  mapping.add(CtSlot(11, 1), CtSlot(6, 5));
  mapping.add(CtSlot(3, 6), CtSlot(6, 6));
  mapping.add(CtSlot(16, 2), CtSlot(6, 7));
  mapping.add(CtSlot(21, 1), CtSlot(7, 0));
  mapping.add(CtSlot(18, 0), CtSlot(7, 1));
  mapping.add(CtSlot(2, 7), CtSlot(7, 2));
  mapping.add(CtSlot(8, 4), CtSlot(7, 3));
  mapping.add(CtSlot(18, 0), CtSlot(7, 4));
  mapping.add(CtSlot(21, 2), CtSlot(7, 5));
  mapping.add(CtSlot(14, 0), CtSlot(7, 6));
  mapping.add(CtSlot(4, 3), CtSlot(7, 7));
  mapping.add(CtSlot(11, 3), CtSlot(8, 0));
  mapping.add(CtSlot(0, 6), CtSlot(8, 1));
  mapping.add(CtSlot(3, 6), CtSlot(8, 2));
  mapping.add(CtSlot(13, 1), CtSlot(8, 3));
  mapping.add(CtSlot(19, 5), CtSlot(8, 4));
  mapping.add(CtSlot(14, 6), CtSlot(8, 5));
  mapping.add(CtSlot(22, 3), CtSlot(8, 6));
  mapping.add(CtSlot(7, 6), CtSlot(8, 7));
  mapping.add(CtSlot(22, 5), CtSlot(9, 0));
  mapping.add(CtSlot(17, 2), CtSlot(9, 1));
  mapping.add(CtSlot(21, 0), CtSlot(9, 2));
  mapping.add(CtSlot(0, 3), CtSlot(9, 3));
  mapping.add(CtSlot(13, 7), CtSlot(9, 4));
  mapping.add(CtSlot(14, 6), CtSlot(9, 5));
  mapping.add(CtSlot(16, 4), CtSlot(9, 6));
  mapping.add(CtSlot(17, 2), CtSlot(9, 7));
  mapping.add(CtSlot(1, 3), CtSlot(10, 0));
  mapping.add(CtSlot(15, 2), CtSlot(10, 1));
  mapping.add(CtSlot(12, 3), CtSlot(10, 2));
  mapping.add(CtSlot(2, 3), CtSlot(10, 3));
  mapping.add(CtSlot(0, 3), CtSlot(10, 4));
  mapping.add(CtSlot(6, 6), CtSlot(10, 5));
  mapping.add(CtSlot(10, 2), CtSlot(10, 6));
  mapping.add(CtSlot(21, 6), CtSlot(10, 7));
  mapping.add(CtSlot(16, 3), CtSlot(11, 0));
  mapping.add(CtSlot(12, 4), CtSlot(11, 1));
  mapping.add(CtSlot(20, 3), CtSlot(11, 2));
  mapping.add(CtSlot(12, 2), CtSlot(11, 3));
  mapping.add(CtSlot(18, 7), CtSlot(11, 4));
  mapping.add(CtSlot(9, 0), CtSlot(11, 5));
  mapping.add(CtSlot(13, 1), CtSlot(11, 6));
  mapping.add(CtSlot(14, 1), CtSlot(11, 7));
  mapping.add(CtSlot(4, 7), CtSlot(12, 0));
  mapping.add(CtSlot(17, 6), CtSlot(12, 1));
  mapping.add(CtSlot(7, 0), CtSlot(12, 2));
  mapping.add(CtSlot(9, 5), CtSlot(12, 3));
  mapping.add(CtSlot(12, 4), CtSlot(12, 4));
  mapping.add(CtSlot(21, 1), CtSlot(12, 5));
  mapping.add(CtSlot(0, 7), CtSlot(12, 6));
  mapping.add(CtSlot(15, 3), CtSlot(12, 7));
  mapping.add(CtSlot(16, 4), CtSlot(13, 0));
  mapping.add(CtSlot(13, 6), CtSlot(13, 1));
  mapping.add(CtSlot(14, 0), CtSlot(13, 2));
  mapping.add(CtSlot(1, 4), CtSlot(13, 3));
  mapping.add(CtSlot(12, 0), CtSlot(13, 4));
  mapping.add(CtSlot(20, 1), CtSlot(13, 5));
  mapping.add(CtSlot(2, 6), CtSlot(13, 6));
  mapping.add(CtSlot(17, 1), CtSlot(13, 7));
  mapping.add(CtSlot(1, 4), CtSlot(14, 0));
  mapping.add(CtSlot(4, 0), CtSlot(14, 1));
  mapping.add(CtSlot(10, 2), CtSlot(14, 2));
  mapping.add(CtSlot(6, 5), CtSlot(14, 3));
  mapping.add(CtSlot(21, 0), CtSlot(14, 4));
  mapping.add(CtSlot(6, 4), CtSlot(14, 5));
  mapping.add(CtSlot(7, 7), CtSlot(14, 6));
  mapping.add(CtSlot(18, 3), CtSlot(14, 7));
  mapping.add(CtSlot(22, 1), CtSlot(15, 0));
  mapping.add(CtSlot(7, 0), CtSlot(15, 1));
  mapping.add(CtSlot(15, 2), CtSlot(15, 2));
  mapping.add(CtSlot(3, 3), CtSlot(15, 3));
  mapping.add(CtSlot(8, 5), CtSlot(15, 4));
  mapping.add(CtSlot(7, 3), CtSlot(15, 5));
  mapping.add(CtSlot(0, 4), CtSlot(15, 6));
  mapping.add(CtSlot(11, 7), CtSlot(15, 7));
  mapping.add(CtSlot(14, 3), CtSlot(16, 0));
  mapping.add(CtSlot(19, 5), CtSlot(16, 1));
  mapping.add(CtSlot(9, 4), CtSlot(16, 2));
  mapping.add(CtSlot(22, 5), CtSlot(16, 3));
  mapping.add(CtSlot(8, 6), CtSlot(16, 4));
  mapping.add(CtSlot(13, 7), CtSlot(16, 5));
  mapping.add(CtSlot(17, 1), CtSlot(16, 6));
  mapping.add(CtSlot(13, 4), CtSlot(16, 7));
  mapping.add(CtSlot(14, 2), CtSlot(17, 0));
  mapping.add(CtSlot(1, 2), CtSlot(17, 1));
  mapping.add(CtSlot(2, 3), CtSlot(17, 2));
  mapping.add(CtSlot(12, 5), CtSlot(17, 3));
  mapping.add(CtSlot(22, 3), CtSlot(17, 4));
  mapping.add(CtSlot(11, 7), CtSlot(17, 5));
  mapping.add(CtSlot(12, 2), CtSlot(17, 6));
  mapping.add(CtSlot(0, 7), CtSlot(17, 7));
  mapping.add(CtSlot(6, 6), CtSlot(18, 0));
  mapping.add(CtSlot(8, 3), CtSlot(18, 1));
  mapping.add(CtSlot(10, 4), CtSlot(18, 2));
  mapping.add(CtSlot(8, 1), CtSlot(18, 3));
  mapping.add(CtSlot(13, 0), CtSlot(18, 4));
  mapping.add(CtSlot(3, 7), CtSlot(18, 5));
  mapping.add(CtSlot(22, 4), CtSlot(18, 6));
  mapping.add(CtSlot(5, 5), CtSlot(18, 7));
  mapping.add(CtSlot(9, 4), CtSlot(19, 0));
  mapping.add(CtSlot(9, 7), CtSlot(19, 1));
  mapping.add(CtSlot(10, 7), CtSlot(19, 2));
  mapping.add(CtSlot(15, 0), CtSlot(19, 3));
  mapping.add(CtSlot(18, 7), CtSlot(19, 4));
  mapping.add(CtSlot(14, 3), CtSlot(19, 5));
  mapping.add(CtSlot(7, 5), CtSlot(19, 6));
  mapping.add(CtSlot(0, 7), CtSlot(19, 7));
  mapping.add(CtSlot(12, 6), CtSlot(20, 0));
  mapping.add(CtSlot(3, 2), CtSlot(20, 1));
  mapping.add(CtSlot(20, 6), CtSlot(20, 2));
  mapping.add(CtSlot(4, 3), CtSlot(20, 3));
  mapping.add(CtSlot(15, 7), CtSlot(20, 4));
  mapping.add(CtSlot(19, 5), CtSlot(20, 5));
  mapping.add(CtSlot(22, 2), CtSlot(20, 6));
  mapping.add(CtSlot(19, 1), CtSlot(20, 7));
  mapping.add(CtSlot(3, 6), CtSlot(21, 0));
  mapping.add(CtSlot(14, 6), CtSlot(21, 1));
  mapping.add(CtSlot(6, 1), CtSlot(21, 2));
  mapping.add(CtSlot(8, 2), CtSlot(21, 3));
  mapping.add(CtSlot(8, 5), CtSlot(21, 4));
  mapping.add(CtSlot(15, 1), CtSlot(21, 5));
  mapping.add(CtSlot(14, 3), CtSlot(21, 6));
  mapping.add(CtSlot(16, 5), CtSlot(21, 7));
  mapping.add(CtSlot(19, 2), CtSlot(22, 0));
  mapping.add(CtSlot(18, 3), CtSlot(22, 1));
  mapping.add(CtSlot(9, 1), CtSlot(22, 2));
  mapping.add(CtSlot(13, 0), CtSlot(22, 3));
  mapping.add(CtSlot(2, 4), CtSlot(22, 4));
  mapping.add(CtSlot(10, 7), CtSlot(22, 5));
  mapping.add(CtSlot(19, 2), CtSlot(22, 6));
  mapping.add(CtSlot(10, 6), CtSlot(22, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_72) {
  int64_t numCts = 23;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(17, 4), CtSlot(0, 0));
  mapping.add(CtSlot(6, 7), CtSlot(0, 1));
  mapping.add(CtSlot(19, 7), CtSlot(0, 2));
  mapping.add(CtSlot(17, 2), CtSlot(0, 3));
  mapping.add(CtSlot(17, 1), CtSlot(0, 4));
  mapping.add(CtSlot(7, 2), CtSlot(0, 5));
  mapping.add(CtSlot(15, 1), CtSlot(0, 6));
  mapping.add(CtSlot(15, 1), CtSlot(0, 7));
  mapping.add(CtSlot(10, 2), CtSlot(1, 0));
  mapping.add(CtSlot(6, 1), CtSlot(1, 1));
  mapping.add(CtSlot(4, 6), CtSlot(1, 2));
  mapping.add(CtSlot(6, 6), CtSlot(1, 3));
  mapping.add(CtSlot(9, 5), CtSlot(1, 4));
  mapping.add(CtSlot(20, 7), CtSlot(1, 5));
  mapping.add(CtSlot(1, 4), CtSlot(1, 6));
  mapping.add(CtSlot(15, 3), CtSlot(1, 7));
  mapping.add(CtSlot(20, 1), CtSlot(2, 0));
  mapping.add(CtSlot(10, 4), CtSlot(2, 1));
  mapping.add(CtSlot(9, 0), CtSlot(2, 2));
  mapping.add(CtSlot(13, 0), CtSlot(2, 3));
  mapping.add(CtSlot(2, 1), CtSlot(2, 4));
  mapping.add(CtSlot(12, 3), CtSlot(2, 5));
  mapping.add(CtSlot(16, 2), CtSlot(2, 6));
  mapping.add(CtSlot(14, 7), CtSlot(2, 7));
  mapping.add(CtSlot(20, 1), CtSlot(3, 0));
  mapping.add(CtSlot(13, 2), CtSlot(3, 1));
  mapping.add(CtSlot(7, 0), CtSlot(3, 2));
  mapping.add(CtSlot(15, 0), CtSlot(3, 3));
  mapping.add(CtSlot(1, 0), CtSlot(3, 4));
  mapping.add(CtSlot(2, 7), CtSlot(3, 5));
  mapping.add(CtSlot(7, 2), CtSlot(3, 6));
  mapping.add(CtSlot(6, 4), CtSlot(3, 7));
  mapping.add(CtSlot(20, 5), CtSlot(4, 0));
  mapping.add(CtSlot(15, 4), CtSlot(4, 1));
  mapping.add(CtSlot(6, 6), CtSlot(4, 2));
  mapping.add(CtSlot(19, 7), CtSlot(4, 3));
  mapping.add(CtSlot(20, 4), CtSlot(4, 4));
  mapping.add(CtSlot(15, 3), CtSlot(4, 5));
  mapping.add(CtSlot(0, 5), CtSlot(4, 6));
  mapping.add(CtSlot(18, 0), CtSlot(4, 7));
  mapping.add(CtSlot(10, 2), CtSlot(5, 0));
  mapping.add(CtSlot(2, 6), CtSlot(5, 1));
  mapping.add(CtSlot(16, 2), CtSlot(5, 2));
  mapping.add(CtSlot(10, 5), CtSlot(5, 3));
  mapping.add(CtSlot(11, 2), CtSlot(5, 4));
  mapping.add(CtSlot(20, 0), CtSlot(5, 5));
  mapping.add(CtSlot(6, 5), CtSlot(5, 6));
  mapping.add(CtSlot(15, 1), CtSlot(5, 7));
  mapping.add(CtSlot(5, 5), CtSlot(6, 0));
  mapping.add(CtSlot(6, 0), CtSlot(6, 1));
  mapping.add(CtSlot(0, 4), CtSlot(6, 2));
  mapping.add(CtSlot(5, 1), CtSlot(6, 3));
  mapping.add(CtSlot(0, 0), CtSlot(6, 4));
  mapping.add(CtSlot(11, 1), CtSlot(6, 5));
  mapping.add(CtSlot(3, 6), CtSlot(6, 6));
  mapping.add(CtSlot(16, 2), CtSlot(6, 7));
  mapping.add(CtSlot(21, 1), CtSlot(7, 0));
  mapping.add(CtSlot(18, 0), CtSlot(7, 1));
  mapping.add(CtSlot(2, 7), CtSlot(7, 2));
  mapping.add(CtSlot(8, 4), CtSlot(7, 3));
  mapping.add(CtSlot(18, 0), CtSlot(7, 4));
  mapping.add(CtSlot(21, 2), CtSlot(7, 5));
  mapping.add(CtSlot(14, 0), CtSlot(7, 6));
  mapping.add(CtSlot(4, 3), CtSlot(7, 7));
  mapping.add(CtSlot(11, 6), CtSlot(8, 0));
  mapping.add(CtSlot(0, 6), CtSlot(8, 1));
  mapping.add(CtSlot(3, 6), CtSlot(8, 2));
  mapping.add(CtSlot(13, 1), CtSlot(8, 3));
  mapping.add(CtSlot(19, 5), CtSlot(8, 4));
  mapping.add(CtSlot(14, 6), CtSlot(8, 5));
  mapping.add(CtSlot(22, 3), CtSlot(8, 6));
  mapping.add(CtSlot(7, 6), CtSlot(8, 7));
  mapping.add(CtSlot(22, 5), CtSlot(9, 0));
  mapping.add(CtSlot(17, 2), CtSlot(9, 1));
  mapping.add(CtSlot(21, 0), CtSlot(9, 2));
  mapping.add(CtSlot(0, 3), CtSlot(9, 3));
  mapping.add(CtSlot(13, 7), CtSlot(9, 4));
  mapping.add(CtSlot(14, 6), CtSlot(9, 5));
  mapping.add(CtSlot(16, 4), CtSlot(9, 6));
  mapping.add(CtSlot(17, 2), CtSlot(9, 7));
  mapping.add(CtSlot(1, 3), CtSlot(10, 0));
  mapping.add(CtSlot(15, 2), CtSlot(10, 1));
  mapping.add(CtSlot(12, 3), CtSlot(10, 2));
  mapping.add(CtSlot(2, 3), CtSlot(10, 3));
  mapping.add(CtSlot(0, 3), CtSlot(10, 4));
  mapping.add(CtSlot(6, 6), CtSlot(10, 5));
  mapping.add(CtSlot(10, 2), CtSlot(10, 6));
  mapping.add(CtSlot(21, 6), CtSlot(10, 7));
  mapping.add(CtSlot(16, 3), CtSlot(11, 0));
  mapping.add(CtSlot(12, 4), CtSlot(11, 1));
  mapping.add(CtSlot(20, 3), CtSlot(11, 2));
  mapping.add(CtSlot(12, 2), CtSlot(11, 3));
  mapping.add(CtSlot(18, 7), CtSlot(11, 4));
  mapping.add(CtSlot(9, 0), CtSlot(11, 5));
  mapping.add(CtSlot(13, 1), CtSlot(11, 6));
  mapping.add(CtSlot(14, 1), CtSlot(11, 7));
  mapping.add(CtSlot(4, 7), CtSlot(12, 0));
  mapping.add(CtSlot(17, 6), CtSlot(12, 1));
  mapping.add(CtSlot(7, 0), CtSlot(12, 2));
  mapping.add(CtSlot(9, 5), CtSlot(12, 3));
  mapping.add(CtSlot(12, 4), CtSlot(12, 4));
  mapping.add(CtSlot(21, 1), CtSlot(12, 5));
  mapping.add(CtSlot(0, 7), CtSlot(12, 6));
  mapping.add(CtSlot(15, 3), CtSlot(12, 7));
  mapping.add(CtSlot(16, 4), CtSlot(13, 0));
  mapping.add(CtSlot(13, 6), CtSlot(13, 1));
  mapping.add(CtSlot(14, 0), CtSlot(13, 2));
  mapping.add(CtSlot(1, 4), CtSlot(13, 3));
  mapping.add(CtSlot(12, 0), CtSlot(13, 4));
  mapping.add(CtSlot(20, 1), CtSlot(13, 5));
  mapping.add(CtSlot(2, 6), CtSlot(13, 6));
  mapping.add(CtSlot(17, 1), CtSlot(13, 7));
  mapping.add(CtSlot(1, 4), CtSlot(14, 0));
  mapping.add(CtSlot(4, 0), CtSlot(14, 1));
  mapping.add(CtSlot(10, 2), CtSlot(14, 2));
  mapping.add(CtSlot(6, 5), CtSlot(14, 3));
  mapping.add(CtSlot(21, 0), CtSlot(14, 4));
  mapping.add(CtSlot(6, 4), CtSlot(14, 5));
  mapping.add(CtSlot(7, 7), CtSlot(14, 6));
  mapping.add(CtSlot(18, 3), CtSlot(14, 7));
  mapping.add(CtSlot(22, 1), CtSlot(15, 0));
  mapping.add(CtSlot(7, 0), CtSlot(15, 1));
  mapping.add(CtSlot(15, 2), CtSlot(15, 2));
  mapping.add(CtSlot(3, 3), CtSlot(15, 3));
  mapping.add(CtSlot(8, 5), CtSlot(15, 4));
  mapping.add(CtSlot(7, 3), CtSlot(15, 5));
  mapping.add(CtSlot(0, 4), CtSlot(15, 6));
  mapping.add(CtSlot(11, 7), CtSlot(15, 7));
  mapping.add(CtSlot(14, 3), CtSlot(16, 0));
  mapping.add(CtSlot(19, 5), CtSlot(16, 1));
  mapping.add(CtSlot(9, 4), CtSlot(16, 2));
  mapping.add(CtSlot(22, 5), CtSlot(16, 3));
  mapping.add(CtSlot(8, 6), CtSlot(16, 4));
  mapping.add(CtSlot(13, 7), CtSlot(16, 5));
  mapping.add(CtSlot(17, 1), CtSlot(16, 6));
  mapping.add(CtSlot(13, 4), CtSlot(16, 7));
  mapping.add(CtSlot(14, 2), CtSlot(17, 0));
  mapping.add(CtSlot(1, 2), CtSlot(17, 1));
  mapping.add(CtSlot(2, 3), CtSlot(17, 2));
  mapping.add(CtSlot(12, 5), CtSlot(17, 3));
  mapping.add(CtSlot(22, 3), CtSlot(17, 4));
  mapping.add(CtSlot(11, 7), CtSlot(17, 5));
  mapping.add(CtSlot(12, 2), CtSlot(17, 6));
  mapping.add(CtSlot(0, 7), CtSlot(17, 7));
  mapping.add(CtSlot(6, 6), CtSlot(18, 0));
  mapping.add(CtSlot(8, 3), CtSlot(18, 1));
  mapping.add(CtSlot(10, 4), CtSlot(18, 2));
  mapping.add(CtSlot(8, 1), CtSlot(18, 3));
  mapping.add(CtSlot(13, 0), CtSlot(18, 4));
  mapping.add(CtSlot(3, 7), CtSlot(18, 5));
  mapping.add(CtSlot(22, 4), CtSlot(18, 6));
  mapping.add(CtSlot(5, 5), CtSlot(18, 7));
  mapping.add(CtSlot(9, 4), CtSlot(19, 0));
  mapping.add(CtSlot(9, 7), CtSlot(19, 1));
  mapping.add(CtSlot(10, 7), CtSlot(19, 2));
  mapping.add(CtSlot(15, 0), CtSlot(19, 3));
  mapping.add(CtSlot(18, 7), CtSlot(19, 4));
  mapping.add(CtSlot(14, 3), CtSlot(19, 5));
  mapping.add(CtSlot(7, 5), CtSlot(19, 6));
  mapping.add(CtSlot(0, 7), CtSlot(19, 7));
  mapping.add(CtSlot(12, 6), CtSlot(20, 0));
  mapping.add(CtSlot(3, 2), CtSlot(20, 1));
  mapping.add(CtSlot(20, 6), CtSlot(20, 2));
  mapping.add(CtSlot(4, 3), CtSlot(20, 3));
  mapping.add(CtSlot(15, 7), CtSlot(20, 4));
  mapping.add(CtSlot(19, 5), CtSlot(20, 5));
  mapping.add(CtSlot(22, 2), CtSlot(20, 6));
  mapping.add(CtSlot(19, 1), CtSlot(20, 7));
  mapping.add(CtSlot(3, 6), CtSlot(21, 0));
  mapping.add(CtSlot(14, 6), CtSlot(21, 1));
  mapping.add(CtSlot(6, 1), CtSlot(21, 2));
  mapping.add(CtSlot(8, 2), CtSlot(21, 3));
  mapping.add(CtSlot(8, 5), CtSlot(21, 4));
  mapping.add(CtSlot(15, 1), CtSlot(21, 5));
  mapping.add(CtSlot(14, 3), CtSlot(21, 6));
  mapping.add(CtSlot(16, 5), CtSlot(21, 7));
  mapping.add(CtSlot(19, 2), CtSlot(22, 0));
  mapping.add(CtSlot(18, 3), CtSlot(22, 1));
  mapping.add(CtSlot(9, 1), CtSlot(22, 2));
  mapping.add(CtSlot(13, 0), CtSlot(22, 3));
  mapping.add(CtSlot(2, 4), CtSlot(22, 4));
  mapping.add(CtSlot(10, 7), CtSlot(22, 5));
  mapping.add(CtSlot(19, 2), CtSlot(22, 6));
  mapping.add(CtSlot(10, 6), CtSlot(22, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_73) {
  int64_t numCts = 23;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(17, 4), CtSlot(0, 0));
  mapping.add(CtSlot(6, 7), CtSlot(0, 1));
  mapping.add(CtSlot(19, 7), CtSlot(0, 2));
  mapping.add(CtSlot(17, 2), CtSlot(0, 3));
  mapping.add(CtSlot(17, 1), CtSlot(0, 4));
  mapping.add(CtSlot(7, 2), CtSlot(0, 5));
  mapping.add(CtSlot(15, 1), CtSlot(0, 6));
  mapping.add(CtSlot(15, 1), CtSlot(0, 7));
  mapping.add(CtSlot(10, 2), CtSlot(1, 0));
  mapping.add(CtSlot(6, 1), CtSlot(1, 1));
  mapping.add(CtSlot(4, 6), CtSlot(1, 2));
  mapping.add(CtSlot(6, 6), CtSlot(1, 3));
  mapping.add(CtSlot(9, 5), CtSlot(1, 4));
  mapping.add(CtSlot(20, 7), CtSlot(1, 5));
  mapping.add(CtSlot(1, 4), CtSlot(1, 6));
  mapping.add(CtSlot(15, 3), CtSlot(1, 7));
  mapping.add(CtSlot(20, 1), CtSlot(2, 0));
  mapping.add(CtSlot(10, 4), CtSlot(2, 1));
  mapping.add(CtSlot(9, 0), CtSlot(2, 2));
  mapping.add(CtSlot(13, 0), CtSlot(2, 3));
  mapping.add(CtSlot(2, 1), CtSlot(2, 4));
  mapping.add(CtSlot(12, 3), CtSlot(2, 5));
  mapping.add(CtSlot(16, 2), CtSlot(2, 6));
  mapping.add(CtSlot(14, 7), CtSlot(2, 7));
  mapping.add(CtSlot(20, 1), CtSlot(3, 0));
  mapping.add(CtSlot(13, 2), CtSlot(3, 1));
  mapping.add(CtSlot(7, 0), CtSlot(3, 2));
  mapping.add(CtSlot(15, 0), CtSlot(3, 3));
  mapping.add(CtSlot(1, 0), CtSlot(3, 4));
  mapping.add(CtSlot(2, 7), CtSlot(3, 5));
  mapping.add(CtSlot(7, 2), CtSlot(3, 6));
  mapping.add(CtSlot(6, 4), CtSlot(3, 7));
  mapping.add(CtSlot(20, 5), CtSlot(4, 0));
  mapping.add(CtSlot(15, 4), CtSlot(4, 1));
  mapping.add(CtSlot(6, 6), CtSlot(4, 2));
  mapping.add(CtSlot(19, 7), CtSlot(4, 3));
  mapping.add(CtSlot(20, 4), CtSlot(4, 4));
  mapping.add(CtSlot(15, 3), CtSlot(4, 5));
  mapping.add(CtSlot(0, 5), CtSlot(4, 6));
  mapping.add(CtSlot(18, 0), CtSlot(4, 7));
  mapping.add(CtSlot(10, 2), CtSlot(5, 0));
  mapping.add(CtSlot(2, 6), CtSlot(5, 1));
  mapping.add(CtSlot(16, 2), CtSlot(5, 2));
  mapping.add(CtSlot(10, 5), CtSlot(5, 3));
  mapping.add(CtSlot(11, 2), CtSlot(5, 4));
  mapping.add(CtSlot(20, 0), CtSlot(5, 5));
  mapping.add(CtSlot(6, 5), CtSlot(5, 6));
  mapping.add(CtSlot(15, 1), CtSlot(5, 7));
  mapping.add(CtSlot(5, 5), CtSlot(6, 0));
  mapping.add(CtSlot(6, 0), CtSlot(6, 1));
  mapping.add(CtSlot(0, 4), CtSlot(6, 2));
  mapping.add(CtSlot(5, 1), CtSlot(6, 3));
  mapping.add(CtSlot(0, 0), CtSlot(6, 4));
  mapping.add(CtSlot(11, 1), CtSlot(6, 5));
  mapping.add(CtSlot(3, 6), CtSlot(6, 6));
  mapping.add(CtSlot(16, 2), CtSlot(6, 7));
  mapping.add(CtSlot(21, 1), CtSlot(7, 0));
  mapping.add(CtSlot(18, 0), CtSlot(7, 1));
  mapping.add(CtSlot(2, 7), CtSlot(7, 2));
  mapping.add(CtSlot(8, 4), CtSlot(7, 3));
  mapping.add(CtSlot(18, 0), CtSlot(7, 4));
  mapping.add(CtSlot(21, 2), CtSlot(7, 5));
  mapping.add(CtSlot(14, 0), CtSlot(7, 6));
  mapping.add(CtSlot(4, 3), CtSlot(7, 7));
  mapping.add(CtSlot(11, 6), CtSlot(8, 0));
  mapping.add(CtSlot(0, 6), CtSlot(8, 1));
  mapping.add(CtSlot(3, 6), CtSlot(8, 2));
  mapping.add(CtSlot(13, 1), CtSlot(8, 3));
  mapping.add(CtSlot(19, 5), CtSlot(8, 4));
  mapping.add(CtSlot(14, 6), CtSlot(8, 5));
  mapping.add(CtSlot(22, 3), CtSlot(8, 6));
  mapping.add(CtSlot(7, 6), CtSlot(8, 7));
  mapping.add(CtSlot(22, 5), CtSlot(9, 0));
  mapping.add(CtSlot(17, 2), CtSlot(9, 1));
  mapping.add(CtSlot(21, 0), CtSlot(9, 2));
  mapping.add(CtSlot(0, 3), CtSlot(9, 3));
  mapping.add(CtSlot(13, 7), CtSlot(9, 4));
  mapping.add(CtSlot(14, 6), CtSlot(9, 5));
  mapping.add(CtSlot(16, 4), CtSlot(9, 6));
  mapping.add(CtSlot(17, 2), CtSlot(9, 7));
  mapping.add(CtSlot(1, 3), CtSlot(10, 0));
  mapping.add(CtSlot(15, 2), CtSlot(10, 1));
  mapping.add(CtSlot(12, 3), CtSlot(10, 2));
  mapping.add(CtSlot(2, 3), CtSlot(10, 3));
  mapping.add(CtSlot(0, 3), CtSlot(10, 4));
  mapping.add(CtSlot(6, 6), CtSlot(10, 5));
  mapping.add(CtSlot(10, 2), CtSlot(10, 6));
  mapping.add(CtSlot(21, 6), CtSlot(10, 7));
  mapping.add(CtSlot(16, 3), CtSlot(11, 0));
  mapping.add(CtSlot(12, 4), CtSlot(11, 1));
  mapping.add(CtSlot(20, 3), CtSlot(11, 2));
  mapping.add(CtSlot(12, 2), CtSlot(11, 3));
  mapping.add(CtSlot(18, 7), CtSlot(11, 4));
  mapping.add(CtSlot(9, 0), CtSlot(11, 5));
  mapping.add(CtSlot(13, 1), CtSlot(11, 6));
  mapping.add(CtSlot(14, 1), CtSlot(11, 7));
  mapping.add(CtSlot(4, 7), CtSlot(12, 0));
  mapping.add(CtSlot(17, 6), CtSlot(12, 1));
  mapping.add(CtSlot(7, 0), CtSlot(12, 2));
  mapping.add(CtSlot(9, 5), CtSlot(12, 3));
  mapping.add(CtSlot(12, 4), CtSlot(12, 4));
  mapping.add(CtSlot(21, 1), CtSlot(12, 5));
  mapping.add(CtSlot(0, 7), CtSlot(12, 6));
  mapping.add(CtSlot(15, 3), CtSlot(12, 7));
  mapping.add(CtSlot(16, 4), CtSlot(13, 0));
  mapping.add(CtSlot(13, 6), CtSlot(13, 1));
  mapping.add(CtSlot(14, 0), CtSlot(13, 2));
  mapping.add(CtSlot(1, 4), CtSlot(13, 3));
  mapping.add(CtSlot(12, 0), CtSlot(13, 4));
  mapping.add(CtSlot(20, 1), CtSlot(13, 5));
  mapping.add(CtSlot(2, 6), CtSlot(13, 6));
  mapping.add(CtSlot(17, 1), CtSlot(13, 7));
  mapping.add(CtSlot(1, 4), CtSlot(14, 0));
  mapping.add(CtSlot(4, 0), CtSlot(14, 1));
  mapping.add(CtSlot(10, 2), CtSlot(14, 2));
  mapping.add(CtSlot(6, 5), CtSlot(14, 3));
  mapping.add(CtSlot(21, 0), CtSlot(14, 4));
  mapping.add(CtSlot(6, 4), CtSlot(14, 5));
  mapping.add(CtSlot(7, 7), CtSlot(14, 6));
  mapping.add(CtSlot(18, 3), CtSlot(14, 7));
  mapping.add(CtSlot(22, 1), CtSlot(15, 0));
  mapping.add(CtSlot(7, 0), CtSlot(15, 1));
  mapping.add(CtSlot(15, 2), CtSlot(15, 2));
  mapping.add(CtSlot(3, 3), CtSlot(15, 3));
  mapping.add(CtSlot(8, 5), CtSlot(15, 4));
  mapping.add(CtSlot(7, 3), CtSlot(15, 5));
  mapping.add(CtSlot(0, 4), CtSlot(15, 6));
  mapping.add(CtSlot(11, 7), CtSlot(15, 7));
  mapping.add(CtSlot(14, 3), CtSlot(16, 0));
  mapping.add(CtSlot(19, 5), CtSlot(16, 1));
  mapping.add(CtSlot(9, 4), CtSlot(16, 2));
  mapping.add(CtSlot(22, 5), CtSlot(16, 3));
  mapping.add(CtSlot(8, 6), CtSlot(16, 4));
  mapping.add(CtSlot(13, 7), CtSlot(16, 5));
  mapping.add(CtSlot(17, 1), CtSlot(16, 6));
  mapping.add(CtSlot(13, 4), CtSlot(16, 7));
  mapping.add(CtSlot(14, 2), CtSlot(17, 0));
  mapping.add(CtSlot(1, 2), CtSlot(17, 1));
  mapping.add(CtSlot(2, 3), CtSlot(17, 2));
  mapping.add(CtSlot(12, 5), CtSlot(17, 3));
  mapping.add(CtSlot(22, 3), CtSlot(17, 4));
  mapping.add(CtSlot(11, 7), CtSlot(17, 5));
  mapping.add(CtSlot(12, 2), CtSlot(17, 6));
  mapping.add(CtSlot(0, 7), CtSlot(17, 7));
  mapping.add(CtSlot(6, 6), CtSlot(18, 0));
  mapping.add(CtSlot(8, 3), CtSlot(18, 1));
  mapping.add(CtSlot(10, 4), CtSlot(18, 2));
  mapping.add(CtSlot(8, 1), CtSlot(18, 3));
  mapping.add(CtSlot(13, 0), CtSlot(18, 4));
  mapping.add(CtSlot(3, 7), CtSlot(18, 5));
  mapping.add(CtSlot(22, 4), CtSlot(18, 6));
  mapping.add(CtSlot(5, 0), CtSlot(18, 7));
  mapping.add(CtSlot(9, 4), CtSlot(19, 0));
  mapping.add(CtSlot(9, 7), CtSlot(19, 1));
  mapping.add(CtSlot(10, 7), CtSlot(19, 2));
  mapping.add(CtSlot(15, 0), CtSlot(19, 3));
  mapping.add(CtSlot(18, 7), CtSlot(19, 4));
  mapping.add(CtSlot(14, 3), CtSlot(19, 5));
  mapping.add(CtSlot(7, 5), CtSlot(19, 6));
  mapping.add(CtSlot(0, 7), CtSlot(19, 7));
  mapping.add(CtSlot(12, 6), CtSlot(20, 0));
  mapping.add(CtSlot(3, 2), CtSlot(20, 1));
  mapping.add(CtSlot(20, 6), CtSlot(20, 2));
  mapping.add(CtSlot(4, 3), CtSlot(20, 3));
  mapping.add(CtSlot(15, 7), CtSlot(20, 4));
  mapping.add(CtSlot(19, 5), CtSlot(20, 5));
  mapping.add(CtSlot(22, 2), CtSlot(20, 6));
  mapping.add(CtSlot(19, 1), CtSlot(20, 7));
  mapping.add(CtSlot(3, 6), CtSlot(21, 0));
  mapping.add(CtSlot(14, 6), CtSlot(21, 1));
  mapping.add(CtSlot(6, 1), CtSlot(21, 2));
  mapping.add(CtSlot(8, 2), CtSlot(21, 3));
  mapping.add(CtSlot(8, 5), CtSlot(21, 4));
  mapping.add(CtSlot(15, 1), CtSlot(21, 5));
  mapping.add(CtSlot(14, 3), CtSlot(21, 6));
  mapping.add(CtSlot(16, 5), CtSlot(21, 7));
  mapping.add(CtSlot(19, 2), CtSlot(22, 0));
  mapping.add(CtSlot(18, 3), CtSlot(22, 1));
  mapping.add(CtSlot(9, 1), CtSlot(22, 2));
  mapping.add(CtSlot(13, 0), CtSlot(22, 3));
  mapping.add(CtSlot(2, 4), CtSlot(22, 4));
  mapping.add(CtSlot(10, 7), CtSlot(22, 5));
  mapping.add(CtSlot(19, 2), CtSlot(22, 6));
  mapping.add(CtSlot(10, 6), CtSlot(22, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_74) {
  int64_t numCts = 23;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(17, 4), CtSlot(0, 0));
  mapping.add(CtSlot(6, 7), CtSlot(0, 1));
  mapping.add(CtSlot(19, 7), CtSlot(0, 2));
  mapping.add(CtSlot(17, 2), CtSlot(0, 3));
  mapping.add(CtSlot(17, 1), CtSlot(0, 4));
  mapping.add(CtSlot(7, 2), CtSlot(0, 5));
  mapping.add(CtSlot(15, 1), CtSlot(0, 6));
  mapping.add(CtSlot(15, 1), CtSlot(0, 7));
  mapping.add(CtSlot(10, 2), CtSlot(1, 0));
  mapping.add(CtSlot(6, 1), CtSlot(1, 1));
  mapping.add(CtSlot(4, 6), CtSlot(1, 2));
  mapping.add(CtSlot(6, 6), CtSlot(1, 3));
  mapping.add(CtSlot(9, 5), CtSlot(1, 4));
  mapping.add(CtSlot(20, 7), CtSlot(1, 5));
  mapping.add(CtSlot(1, 4), CtSlot(1, 6));
  mapping.add(CtSlot(15, 3), CtSlot(1, 7));
  mapping.add(CtSlot(20, 1), CtSlot(2, 0));
  mapping.add(CtSlot(10, 4), CtSlot(2, 1));
  mapping.add(CtSlot(9, 0), CtSlot(2, 2));
  mapping.add(CtSlot(13, 0), CtSlot(2, 3));
  mapping.add(CtSlot(2, 1), CtSlot(2, 4));
  mapping.add(CtSlot(12, 3), CtSlot(2, 5));
  mapping.add(CtSlot(16, 2), CtSlot(2, 6));
  mapping.add(CtSlot(14, 7), CtSlot(2, 7));
  mapping.add(CtSlot(20, 1), CtSlot(3, 0));
  mapping.add(CtSlot(13, 2), CtSlot(3, 1));
  mapping.add(CtSlot(7, 0), CtSlot(3, 2));
  mapping.add(CtSlot(15, 0), CtSlot(3, 3));
  mapping.add(CtSlot(1, 0), CtSlot(3, 4));
  mapping.add(CtSlot(2, 7), CtSlot(3, 5));
  mapping.add(CtSlot(7, 2), CtSlot(3, 6));
  mapping.add(CtSlot(6, 4), CtSlot(3, 7));
  mapping.add(CtSlot(20, 5), CtSlot(4, 0));
  mapping.add(CtSlot(15, 4), CtSlot(4, 1));
  mapping.add(CtSlot(6, 6), CtSlot(4, 2));
  mapping.add(CtSlot(19, 7), CtSlot(4, 3));
  mapping.add(CtSlot(20, 4), CtSlot(4, 4));
  mapping.add(CtSlot(15, 3), CtSlot(4, 5));
  mapping.add(CtSlot(0, 5), CtSlot(4, 6));
  mapping.add(CtSlot(18, 0), CtSlot(4, 7));
  mapping.add(CtSlot(10, 2), CtSlot(5, 0));
  mapping.add(CtSlot(11, 6), CtSlot(5, 1));
  mapping.add(CtSlot(16, 2), CtSlot(5, 2));
  mapping.add(CtSlot(10, 5), CtSlot(5, 3));
  mapping.add(CtSlot(11, 2), CtSlot(5, 4));
  mapping.add(CtSlot(20, 0), CtSlot(5, 5));
  mapping.add(CtSlot(6, 5), CtSlot(5, 6));
  mapping.add(CtSlot(15, 1), CtSlot(5, 7));
  mapping.add(CtSlot(5, 5), CtSlot(6, 0));
  mapping.add(CtSlot(6, 0), CtSlot(6, 1));
  mapping.add(CtSlot(0, 4), CtSlot(6, 2));
  mapping.add(CtSlot(5, 1), CtSlot(6, 3));
  mapping.add(CtSlot(0, 0), CtSlot(6, 4));
  mapping.add(CtSlot(11, 1), CtSlot(6, 5));
  mapping.add(CtSlot(3, 6), CtSlot(6, 6));
  mapping.add(CtSlot(16, 2), CtSlot(6, 7));
  mapping.add(CtSlot(21, 1), CtSlot(7, 0));
  mapping.add(CtSlot(18, 0), CtSlot(7, 1));
  mapping.add(CtSlot(2, 7), CtSlot(7, 2));
  mapping.add(CtSlot(8, 4), CtSlot(7, 3));
  mapping.add(CtSlot(18, 0), CtSlot(7, 4));
  mapping.add(CtSlot(21, 2), CtSlot(7, 5));
  mapping.add(CtSlot(14, 0), CtSlot(7, 6));
  mapping.add(CtSlot(4, 3), CtSlot(7, 7));
  mapping.add(CtSlot(11, 6), CtSlot(8, 0));
  mapping.add(CtSlot(0, 6), CtSlot(8, 1));
  mapping.add(CtSlot(3, 6), CtSlot(8, 2));
  mapping.add(CtSlot(13, 1), CtSlot(8, 3));
  mapping.add(CtSlot(19, 5), CtSlot(8, 4));
  mapping.add(CtSlot(14, 6), CtSlot(8, 5));
  mapping.add(CtSlot(22, 3), CtSlot(8, 6));
  mapping.add(CtSlot(7, 6), CtSlot(8, 7));
  mapping.add(CtSlot(22, 5), CtSlot(9, 0));
  mapping.add(CtSlot(17, 2), CtSlot(9, 1));
  mapping.add(CtSlot(21, 0), CtSlot(9, 2));
  mapping.add(CtSlot(0, 3), CtSlot(9, 3));
  mapping.add(CtSlot(13, 7), CtSlot(9, 4));
  mapping.add(CtSlot(14, 6), CtSlot(9, 5));
  mapping.add(CtSlot(16, 4), CtSlot(9, 6));
  mapping.add(CtSlot(17, 2), CtSlot(9, 7));
  mapping.add(CtSlot(1, 3), CtSlot(10, 0));
  mapping.add(CtSlot(15, 2), CtSlot(10, 1));
  mapping.add(CtSlot(12, 3), CtSlot(10, 2));
  mapping.add(CtSlot(2, 3), CtSlot(10, 3));
  mapping.add(CtSlot(0, 3), CtSlot(10, 4));
  mapping.add(CtSlot(6, 6), CtSlot(10, 5));
  mapping.add(CtSlot(10, 2), CtSlot(10, 6));
  mapping.add(CtSlot(21, 6), CtSlot(10, 7));
  mapping.add(CtSlot(16, 3), CtSlot(11, 0));
  mapping.add(CtSlot(12, 4), CtSlot(11, 1));
  mapping.add(CtSlot(20, 3), CtSlot(11, 2));
  mapping.add(CtSlot(12, 2), CtSlot(11, 3));
  mapping.add(CtSlot(18, 7), CtSlot(11, 4));
  mapping.add(CtSlot(9, 0), CtSlot(11, 5));
  mapping.add(CtSlot(13, 1), CtSlot(11, 6));
  mapping.add(CtSlot(14, 1), CtSlot(11, 7));
  mapping.add(CtSlot(4, 7), CtSlot(12, 0));
  mapping.add(CtSlot(17, 6), CtSlot(12, 1));
  mapping.add(CtSlot(7, 0), CtSlot(12, 2));
  mapping.add(CtSlot(9, 5), CtSlot(12, 3));
  mapping.add(CtSlot(12, 4), CtSlot(12, 4));
  mapping.add(CtSlot(21, 1), CtSlot(12, 5));
  mapping.add(CtSlot(0, 7), CtSlot(12, 6));
  mapping.add(CtSlot(15, 3), CtSlot(12, 7));
  mapping.add(CtSlot(16, 4), CtSlot(13, 0));
  mapping.add(CtSlot(13, 6), CtSlot(13, 1));
  mapping.add(CtSlot(14, 0), CtSlot(13, 2));
  mapping.add(CtSlot(1, 4), CtSlot(13, 3));
  mapping.add(CtSlot(12, 0), CtSlot(13, 4));
  mapping.add(CtSlot(20, 1), CtSlot(13, 5));
  mapping.add(CtSlot(2, 6), CtSlot(13, 6));
  mapping.add(CtSlot(17, 1), CtSlot(13, 7));
  mapping.add(CtSlot(1, 4), CtSlot(14, 0));
  mapping.add(CtSlot(4, 0), CtSlot(14, 1));
  mapping.add(CtSlot(10, 2), CtSlot(14, 2));
  mapping.add(CtSlot(6, 5), CtSlot(14, 3));
  mapping.add(CtSlot(21, 0), CtSlot(14, 4));
  mapping.add(CtSlot(6, 4), CtSlot(14, 5));
  mapping.add(CtSlot(7, 7), CtSlot(14, 6));
  mapping.add(CtSlot(18, 3), CtSlot(14, 7));
  mapping.add(CtSlot(22, 1), CtSlot(15, 0));
  mapping.add(CtSlot(7, 0), CtSlot(15, 1));
  mapping.add(CtSlot(15, 2), CtSlot(15, 2));
  mapping.add(CtSlot(3, 3), CtSlot(15, 3));
  mapping.add(CtSlot(8, 5), CtSlot(15, 4));
  mapping.add(CtSlot(7, 3), CtSlot(15, 5));
  mapping.add(CtSlot(0, 4), CtSlot(15, 6));
  mapping.add(CtSlot(11, 7), CtSlot(15, 7));
  mapping.add(CtSlot(14, 3), CtSlot(16, 0));
  mapping.add(CtSlot(19, 5), CtSlot(16, 1));
  mapping.add(CtSlot(9, 4), CtSlot(16, 2));
  mapping.add(CtSlot(22, 5), CtSlot(16, 3));
  mapping.add(CtSlot(8, 6), CtSlot(16, 4));
  mapping.add(CtSlot(13, 7), CtSlot(16, 5));
  mapping.add(CtSlot(17, 1), CtSlot(16, 6));
  mapping.add(CtSlot(13, 4), CtSlot(16, 7));
  mapping.add(CtSlot(14, 2), CtSlot(17, 0));
  mapping.add(CtSlot(1, 2), CtSlot(17, 1));
  mapping.add(CtSlot(2, 3), CtSlot(17, 2));
  mapping.add(CtSlot(12, 5), CtSlot(17, 3));
  mapping.add(CtSlot(22, 3), CtSlot(17, 4));
  mapping.add(CtSlot(11, 7), CtSlot(17, 5));
  mapping.add(CtSlot(12, 2), CtSlot(17, 6));
  mapping.add(CtSlot(0, 7), CtSlot(17, 7));
  mapping.add(CtSlot(6, 6), CtSlot(18, 0));
  mapping.add(CtSlot(8, 3), CtSlot(18, 1));
  mapping.add(CtSlot(10, 4), CtSlot(18, 2));
  mapping.add(CtSlot(8, 1), CtSlot(18, 3));
  mapping.add(CtSlot(13, 0), CtSlot(18, 4));
  mapping.add(CtSlot(3, 7), CtSlot(18, 5));
  mapping.add(CtSlot(22, 4), CtSlot(18, 6));
  mapping.add(CtSlot(5, 0), CtSlot(18, 7));
  mapping.add(CtSlot(9, 4), CtSlot(19, 0));
  mapping.add(CtSlot(9, 7), CtSlot(19, 1));
  mapping.add(CtSlot(10, 7), CtSlot(19, 2));
  mapping.add(CtSlot(15, 0), CtSlot(19, 3));
  mapping.add(CtSlot(18, 7), CtSlot(19, 4));
  mapping.add(CtSlot(14, 3), CtSlot(19, 5));
  mapping.add(CtSlot(7, 5), CtSlot(19, 6));
  mapping.add(CtSlot(0, 7), CtSlot(19, 7));
  mapping.add(CtSlot(12, 6), CtSlot(20, 0));
  mapping.add(CtSlot(3, 2), CtSlot(20, 1));
  mapping.add(CtSlot(20, 6), CtSlot(20, 2));
  mapping.add(CtSlot(4, 3), CtSlot(20, 3));
  mapping.add(CtSlot(15, 7), CtSlot(20, 4));
  mapping.add(CtSlot(19, 5), CtSlot(20, 5));
  mapping.add(CtSlot(22, 2), CtSlot(20, 6));
  mapping.add(CtSlot(19, 1), CtSlot(20, 7));
  mapping.add(CtSlot(3, 6), CtSlot(21, 0));
  mapping.add(CtSlot(14, 6), CtSlot(21, 1));
  mapping.add(CtSlot(6, 1), CtSlot(21, 2));
  mapping.add(CtSlot(8, 2), CtSlot(21, 3));
  mapping.add(CtSlot(8, 5), CtSlot(21, 4));
  mapping.add(CtSlot(15, 1), CtSlot(21, 5));
  mapping.add(CtSlot(14, 3), CtSlot(21, 6));
  mapping.add(CtSlot(16, 5), CtSlot(21, 7));
  mapping.add(CtSlot(19, 2), CtSlot(22, 0));
  mapping.add(CtSlot(18, 3), CtSlot(22, 1));
  mapping.add(CtSlot(9, 1), CtSlot(22, 2));
  mapping.add(CtSlot(13, 0), CtSlot(22, 3));
  mapping.add(CtSlot(2, 4), CtSlot(22, 4));
  mapping.add(CtSlot(10, 7), CtSlot(22, 5));
  mapping.add(CtSlot(19, 2), CtSlot(22, 6));
  mapping.add(CtSlot(10, 6), CtSlot(22, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_75) {
  int64_t numCts = 23;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(17, 4), CtSlot(0, 0));
  mapping.add(CtSlot(6, 7), CtSlot(0, 1));
  mapping.add(CtSlot(19, 7), CtSlot(0, 2));
  mapping.add(CtSlot(17, 2), CtSlot(0, 3));
  mapping.add(CtSlot(17, 1), CtSlot(0, 4));
  mapping.add(CtSlot(7, 2), CtSlot(0, 5));
  mapping.add(CtSlot(15, 1), CtSlot(0, 6));
  mapping.add(CtSlot(15, 1), CtSlot(0, 7));
  mapping.add(CtSlot(10, 2), CtSlot(1, 0));
  mapping.add(CtSlot(6, 1), CtSlot(1, 1));
  mapping.add(CtSlot(4, 6), CtSlot(1, 2));
  mapping.add(CtSlot(6, 6), CtSlot(1, 3));
  mapping.add(CtSlot(9, 5), CtSlot(1, 4));
  mapping.add(CtSlot(20, 7), CtSlot(1, 5));
  mapping.add(CtSlot(1, 4), CtSlot(1, 6));
  mapping.add(CtSlot(15, 3), CtSlot(1, 7));
  mapping.add(CtSlot(20, 1), CtSlot(2, 0));
  mapping.add(CtSlot(10, 4), CtSlot(2, 1));
  mapping.add(CtSlot(9, 0), CtSlot(2, 2));
  mapping.add(CtSlot(13, 0), CtSlot(2, 3));
  mapping.add(CtSlot(2, 1), CtSlot(2, 4));
  mapping.add(CtSlot(12, 3), CtSlot(2, 5));
  mapping.add(CtSlot(16, 2), CtSlot(2, 6));
  mapping.add(CtSlot(14, 7), CtSlot(2, 7));
  mapping.add(CtSlot(20, 1), CtSlot(3, 0));
  mapping.add(CtSlot(13, 2), CtSlot(3, 1));
  mapping.add(CtSlot(7, 0), CtSlot(3, 2));
  mapping.add(CtSlot(15, 0), CtSlot(3, 3));
  mapping.add(CtSlot(1, 0), CtSlot(3, 4));
  mapping.add(CtSlot(2, 7), CtSlot(3, 5));
  mapping.add(CtSlot(7, 2), CtSlot(3, 6));
  mapping.add(CtSlot(6, 4), CtSlot(3, 7));
  mapping.add(CtSlot(1, 5), CtSlot(4, 0));
  mapping.add(CtSlot(15, 4), CtSlot(4, 1));
  mapping.add(CtSlot(6, 6), CtSlot(4, 2));
  mapping.add(CtSlot(19, 7), CtSlot(4, 3));
  mapping.add(CtSlot(20, 4), CtSlot(4, 4));
  mapping.add(CtSlot(15, 3), CtSlot(4, 5));
  mapping.add(CtSlot(0, 5), CtSlot(4, 6));
  mapping.add(CtSlot(18, 0), CtSlot(4, 7));
  mapping.add(CtSlot(10, 2), CtSlot(5, 0));
  mapping.add(CtSlot(11, 6), CtSlot(5, 1));
  mapping.add(CtSlot(16, 2), CtSlot(5, 2));
  mapping.add(CtSlot(10, 5), CtSlot(5, 3));
  mapping.add(CtSlot(11, 2), CtSlot(5, 4));
  mapping.add(CtSlot(20, 0), CtSlot(5, 5));
  mapping.add(CtSlot(6, 5), CtSlot(5, 6));
  mapping.add(CtSlot(15, 1), CtSlot(5, 7));
  mapping.add(CtSlot(5, 5), CtSlot(6, 0));
  mapping.add(CtSlot(6, 0), CtSlot(6, 1));
  mapping.add(CtSlot(0, 4), CtSlot(6, 2));
  mapping.add(CtSlot(5, 1), CtSlot(6, 3));
  mapping.add(CtSlot(0, 0), CtSlot(6, 4));
  mapping.add(CtSlot(11, 1), CtSlot(6, 5));
  mapping.add(CtSlot(3, 6), CtSlot(6, 6));
  mapping.add(CtSlot(16, 2), CtSlot(6, 7));
  mapping.add(CtSlot(21, 1), CtSlot(7, 0));
  mapping.add(CtSlot(18, 0), CtSlot(7, 1));
  mapping.add(CtSlot(2, 7), CtSlot(7, 2));
  mapping.add(CtSlot(8, 4), CtSlot(7, 3));
  mapping.add(CtSlot(18, 0), CtSlot(7, 4));
  mapping.add(CtSlot(21, 2), CtSlot(7, 5));
  mapping.add(CtSlot(14, 0), CtSlot(7, 6));
  mapping.add(CtSlot(4, 3), CtSlot(7, 7));
  mapping.add(CtSlot(11, 6), CtSlot(8, 0));
  mapping.add(CtSlot(0, 6), CtSlot(8, 1));
  mapping.add(CtSlot(3, 6), CtSlot(8, 2));
  mapping.add(CtSlot(13, 1), CtSlot(8, 3));
  mapping.add(CtSlot(19, 5), CtSlot(8, 4));
  mapping.add(CtSlot(14, 6), CtSlot(8, 5));
  mapping.add(CtSlot(22, 3), CtSlot(8, 6));
  mapping.add(CtSlot(7, 6), CtSlot(8, 7));
  mapping.add(CtSlot(22, 5), CtSlot(9, 0));
  mapping.add(CtSlot(17, 2), CtSlot(9, 1));
  mapping.add(CtSlot(21, 0), CtSlot(9, 2));
  mapping.add(CtSlot(0, 3), CtSlot(9, 3));
  mapping.add(CtSlot(13, 7), CtSlot(9, 4));
  mapping.add(CtSlot(14, 6), CtSlot(9, 5));
  mapping.add(CtSlot(16, 4), CtSlot(9, 6));
  mapping.add(CtSlot(17, 2), CtSlot(9, 7));
  mapping.add(CtSlot(1, 3), CtSlot(10, 0));
  mapping.add(CtSlot(15, 2), CtSlot(10, 1));
  mapping.add(CtSlot(12, 3), CtSlot(10, 2));
  mapping.add(CtSlot(2, 3), CtSlot(10, 3));
  mapping.add(CtSlot(0, 3), CtSlot(10, 4));
  mapping.add(CtSlot(6, 6), CtSlot(10, 5));
  mapping.add(CtSlot(10, 2), CtSlot(10, 6));
  mapping.add(CtSlot(21, 6), CtSlot(10, 7));
  mapping.add(CtSlot(16, 3), CtSlot(11, 0));
  mapping.add(CtSlot(12, 4), CtSlot(11, 1));
  mapping.add(CtSlot(20, 3), CtSlot(11, 2));
  mapping.add(CtSlot(12, 2), CtSlot(11, 3));
  mapping.add(CtSlot(18, 7), CtSlot(11, 4));
  mapping.add(CtSlot(9, 0), CtSlot(11, 5));
  mapping.add(CtSlot(13, 1), CtSlot(11, 6));
  mapping.add(CtSlot(14, 1), CtSlot(11, 7));
  mapping.add(CtSlot(4, 7), CtSlot(12, 0));
  mapping.add(CtSlot(17, 6), CtSlot(12, 1));
  mapping.add(CtSlot(7, 0), CtSlot(12, 2));
  mapping.add(CtSlot(9, 5), CtSlot(12, 3));
  mapping.add(CtSlot(12, 4), CtSlot(12, 4));
  mapping.add(CtSlot(21, 1), CtSlot(12, 5));
  mapping.add(CtSlot(0, 7), CtSlot(12, 6));
  mapping.add(CtSlot(15, 3), CtSlot(12, 7));
  mapping.add(CtSlot(16, 4), CtSlot(13, 0));
  mapping.add(CtSlot(13, 6), CtSlot(13, 1));
  mapping.add(CtSlot(14, 0), CtSlot(13, 2));
  mapping.add(CtSlot(1, 4), CtSlot(13, 3));
  mapping.add(CtSlot(12, 0), CtSlot(13, 4));
  mapping.add(CtSlot(20, 1), CtSlot(13, 5));
  mapping.add(CtSlot(2, 6), CtSlot(13, 6));
  mapping.add(CtSlot(17, 1), CtSlot(13, 7));
  mapping.add(CtSlot(1, 4), CtSlot(14, 0));
  mapping.add(CtSlot(4, 0), CtSlot(14, 1));
  mapping.add(CtSlot(10, 2), CtSlot(14, 2));
  mapping.add(CtSlot(6, 5), CtSlot(14, 3));
  mapping.add(CtSlot(21, 0), CtSlot(14, 4));
  mapping.add(CtSlot(6, 4), CtSlot(14, 5));
  mapping.add(CtSlot(7, 7), CtSlot(14, 6));
  mapping.add(CtSlot(18, 3), CtSlot(14, 7));
  mapping.add(CtSlot(22, 1), CtSlot(15, 0));
  mapping.add(CtSlot(7, 0), CtSlot(15, 1));
  mapping.add(CtSlot(15, 2), CtSlot(15, 2));
  mapping.add(CtSlot(3, 3), CtSlot(15, 3));
  mapping.add(CtSlot(8, 5), CtSlot(15, 4));
  mapping.add(CtSlot(7, 3), CtSlot(15, 5));
  mapping.add(CtSlot(0, 4), CtSlot(15, 6));
  mapping.add(CtSlot(11, 7), CtSlot(15, 7));
  mapping.add(CtSlot(14, 3), CtSlot(16, 0));
  mapping.add(CtSlot(19, 5), CtSlot(16, 1));
  mapping.add(CtSlot(9, 4), CtSlot(16, 2));
  mapping.add(CtSlot(22, 5), CtSlot(16, 3));
  mapping.add(CtSlot(8, 6), CtSlot(16, 4));
  mapping.add(CtSlot(13, 7), CtSlot(16, 5));
  mapping.add(CtSlot(17, 1), CtSlot(16, 6));
  mapping.add(CtSlot(13, 4), CtSlot(16, 7));
  mapping.add(CtSlot(14, 2), CtSlot(17, 0));
  mapping.add(CtSlot(1, 2), CtSlot(17, 1));
  mapping.add(CtSlot(2, 3), CtSlot(17, 2));
  mapping.add(CtSlot(12, 5), CtSlot(17, 3));
  mapping.add(CtSlot(22, 3), CtSlot(17, 4));
  mapping.add(CtSlot(11, 7), CtSlot(17, 5));
  mapping.add(CtSlot(12, 2), CtSlot(17, 6));
  mapping.add(CtSlot(0, 7), CtSlot(17, 7));
  mapping.add(CtSlot(6, 6), CtSlot(18, 0));
  mapping.add(CtSlot(8, 3), CtSlot(18, 1));
  mapping.add(CtSlot(10, 4), CtSlot(18, 2));
  mapping.add(CtSlot(8, 1), CtSlot(18, 3));
  mapping.add(CtSlot(13, 0), CtSlot(18, 4));
  mapping.add(CtSlot(3, 7), CtSlot(18, 5));
  mapping.add(CtSlot(22, 4), CtSlot(18, 6));
  mapping.add(CtSlot(5, 0), CtSlot(18, 7));
  mapping.add(CtSlot(9, 4), CtSlot(19, 0));
  mapping.add(CtSlot(9, 7), CtSlot(19, 1));
  mapping.add(CtSlot(10, 7), CtSlot(19, 2));
  mapping.add(CtSlot(15, 0), CtSlot(19, 3));
  mapping.add(CtSlot(18, 7), CtSlot(19, 4));
  mapping.add(CtSlot(14, 3), CtSlot(19, 5));
  mapping.add(CtSlot(7, 5), CtSlot(19, 6));
  mapping.add(CtSlot(0, 7), CtSlot(19, 7));
  mapping.add(CtSlot(12, 6), CtSlot(20, 0));
  mapping.add(CtSlot(3, 2), CtSlot(20, 1));
  mapping.add(CtSlot(20, 6), CtSlot(20, 2));
  mapping.add(CtSlot(4, 3), CtSlot(20, 3));
  mapping.add(CtSlot(15, 7), CtSlot(20, 4));
  mapping.add(CtSlot(19, 5), CtSlot(20, 5));
  mapping.add(CtSlot(22, 2), CtSlot(20, 6));
  mapping.add(CtSlot(19, 1), CtSlot(20, 7));
  mapping.add(CtSlot(3, 6), CtSlot(21, 0));
  mapping.add(CtSlot(14, 6), CtSlot(21, 1));
  mapping.add(CtSlot(6, 1), CtSlot(21, 2));
  mapping.add(CtSlot(8, 2), CtSlot(21, 3));
  mapping.add(CtSlot(8, 5), CtSlot(21, 4));
  mapping.add(CtSlot(15, 1), CtSlot(21, 5));
  mapping.add(CtSlot(14, 3), CtSlot(21, 6));
  mapping.add(CtSlot(16, 5), CtSlot(21, 7));
  mapping.add(CtSlot(19, 2), CtSlot(22, 0));
  mapping.add(CtSlot(18, 3), CtSlot(22, 1));
  mapping.add(CtSlot(9, 1), CtSlot(22, 2));
  mapping.add(CtSlot(13, 0), CtSlot(22, 3));
  mapping.add(CtSlot(2, 4), CtSlot(22, 4));
  mapping.add(CtSlot(10, 7), CtSlot(22, 5));
  mapping.add(CtSlot(19, 2), CtSlot(22, 6));
  mapping.add(CtSlot(10, 6), CtSlot(22, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

TEST(ImplementShiftNetworkTest, TestRANDOM_76) {
  int64_t numCts = 23;
  int64_t ctSize = 8;
  Mapping mapping(ctSize, numCts);
  mapping.add(CtSlot(17, 4), CtSlot(0, 0));
  mapping.add(CtSlot(6, 7), CtSlot(0, 1));
  mapping.add(CtSlot(19, 7), CtSlot(0, 2));
  mapping.add(CtSlot(17, 2), CtSlot(0, 3));
  mapping.add(CtSlot(17, 1), CtSlot(0, 4));
  mapping.add(CtSlot(7, 2), CtSlot(0, 5));
  mapping.add(CtSlot(15, 1), CtSlot(0, 6));
  mapping.add(CtSlot(15, 1), CtSlot(0, 7));
  mapping.add(CtSlot(10, 2), CtSlot(1, 0));
  mapping.add(CtSlot(6, 1), CtSlot(1, 1));
  mapping.add(CtSlot(4, 6), CtSlot(1, 2));
  mapping.add(CtSlot(6, 6), CtSlot(1, 3));
  mapping.add(CtSlot(9, 5), CtSlot(1, 4));
  mapping.add(CtSlot(20, 7), CtSlot(1, 5));
  mapping.add(CtSlot(1, 4), CtSlot(1, 6));
  mapping.add(CtSlot(15, 3), CtSlot(1, 7));
  mapping.add(CtSlot(20, 1), CtSlot(2, 0));
  mapping.add(CtSlot(10, 4), CtSlot(2, 1));
  mapping.add(CtSlot(9, 0), CtSlot(2, 2));
  mapping.add(CtSlot(13, 0), CtSlot(2, 3));
  mapping.add(CtSlot(2, 1), CtSlot(2, 4));
  mapping.add(CtSlot(12, 3), CtSlot(2, 5));
  mapping.add(CtSlot(16, 2), CtSlot(2, 6));
  mapping.add(CtSlot(14, 7), CtSlot(2, 7));
  mapping.add(CtSlot(20, 1), CtSlot(3, 0));
  mapping.add(CtSlot(13, 2), CtSlot(3, 1));
  mapping.add(CtSlot(7, 0), CtSlot(3, 2));
  mapping.add(CtSlot(15, 0), CtSlot(3, 3));
  mapping.add(CtSlot(1, 0), CtSlot(3, 4));
  mapping.add(CtSlot(2, 7), CtSlot(3, 5));
  mapping.add(CtSlot(7, 2), CtSlot(3, 6));
  mapping.add(CtSlot(6, 4), CtSlot(3, 7));
  mapping.add(CtSlot(1, 5), CtSlot(4, 0));
  mapping.add(CtSlot(15, 4), CtSlot(4, 1));
  mapping.add(CtSlot(6, 6), CtSlot(4, 2));
  mapping.add(CtSlot(19, 7), CtSlot(4, 3));
  mapping.add(CtSlot(20, 4), CtSlot(4, 4));
  mapping.add(CtSlot(15, 3), CtSlot(4, 5));
  mapping.add(CtSlot(0, 5), CtSlot(4, 6));
  mapping.add(CtSlot(18, 0), CtSlot(4, 7));
  mapping.add(CtSlot(10, 2), CtSlot(5, 0));
  mapping.add(CtSlot(11, 6), CtSlot(5, 1));
  mapping.add(CtSlot(16, 2), CtSlot(5, 2));
  mapping.add(CtSlot(10, 5), CtSlot(5, 3));
  mapping.add(CtSlot(11, 2), CtSlot(5, 4));
  mapping.add(CtSlot(20, 0), CtSlot(5, 5));
  mapping.add(CtSlot(6, 5), CtSlot(5, 6));
  mapping.add(CtSlot(15, 1), CtSlot(5, 7));
  mapping.add(CtSlot(5, 5), CtSlot(6, 0));
  mapping.add(CtSlot(6, 0), CtSlot(6, 1));
  mapping.add(CtSlot(0, 4), CtSlot(6, 2));
  mapping.add(CtSlot(5, 1), CtSlot(6, 3));
  mapping.add(CtSlot(0, 0), CtSlot(6, 4));
  mapping.add(CtSlot(11, 1), CtSlot(6, 5));
  mapping.add(CtSlot(3, 6), CtSlot(6, 6));
  mapping.add(CtSlot(16, 2), CtSlot(6, 7));
  mapping.add(CtSlot(21, 1), CtSlot(7, 0));
  mapping.add(CtSlot(18, 0), CtSlot(7, 1));
  mapping.add(CtSlot(2, 7), CtSlot(7, 2));
  mapping.add(CtSlot(8, 4), CtSlot(7, 3));
  mapping.add(CtSlot(18, 0), CtSlot(7, 4));
  mapping.add(CtSlot(21, 2), CtSlot(7, 5));
  mapping.add(CtSlot(14, 0), CtSlot(7, 6));
  mapping.add(CtSlot(4, 3), CtSlot(7, 7));
  mapping.add(CtSlot(11, 6), CtSlot(8, 0));
  mapping.add(CtSlot(0, 6), CtSlot(8, 1));
  mapping.add(CtSlot(3, 6), CtSlot(8, 2));
  mapping.add(CtSlot(13, 1), CtSlot(8, 3));
  mapping.add(CtSlot(19, 5), CtSlot(8, 4));
  mapping.add(CtSlot(14, 6), CtSlot(8, 5));
  mapping.add(CtSlot(22, 3), CtSlot(8, 6));
  mapping.add(CtSlot(7, 6), CtSlot(8, 7));
  mapping.add(CtSlot(22, 5), CtSlot(9, 0));
  mapping.add(CtSlot(17, 2), CtSlot(9, 1));
  mapping.add(CtSlot(21, 0), CtSlot(9, 2));
  mapping.add(CtSlot(0, 3), CtSlot(9, 3));
  mapping.add(CtSlot(13, 7), CtSlot(9, 4));
  mapping.add(CtSlot(14, 6), CtSlot(9, 5));
  mapping.add(CtSlot(16, 4), CtSlot(9, 6));
  mapping.add(CtSlot(17, 2), CtSlot(9, 7));
  mapping.add(CtSlot(1, 3), CtSlot(10, 0));
  mapping.add(CtSlot(15, 2), CtSlot(10, 1));
  mapping.add(CtSlot(12, 3), CtSlot(10, 2));
  mapping.add(CtSlot(2, 3), CtSlot(10, 3));
  mapping.add(CtSlot(0, 3), CtSlot(10, 4));
  mapping.add(CtSlot(6, 6), CtSlot(10, 5));
  mapping.add(CtSlot(10, 2), CtSlot(10, 6));
  mapping.add(CtSlot(21, 6), CtSlot(10, 7));
  mapping.add(CtSlot(16, 3), CtSlot(11, 0));
  mapping.add(CtSlot(12, 4), CtSlot(11, 1));
  mapping.add(CtSlot(20, 3), CtSlot(11, 2));
  mapping.add(CtSlot(12, 2), CtSlot(11, 3));
  mapping.add(CtSlot(18, 7), CtSlot(11, 4));
  mapping.add(CtSlot(9, 0), CtSlot(11, 5));
  mapping.add(CtSlot(13, 1), CtSlot(11, 6));
  mapping.add(CtSlot(14, 1), CtSlot(11, 7));
  mapping.add(CtSlot(4, 7), CtSlot(12, 0));
  mapping.add(CtSlot(17, 6), CtSlot(12, 1));
  mapping.add(CtSlot(7, 0), CtSlot(12, 2));
  mapping.add(CtSlot(9, 5), CtSlot(12, 3));
  mapping.add(CtSlot(12, 4), CtSlot(12, 4));
  mapping.add(CtSlot(21, 1), CtSlot(12, 5));
  mapping.add(CtSlot(0, 7), CtSlot(12, 6));
  mapping.add(CtSlot(15, 3), CtSlot(12, 7));
  mapping.add(CtSlot(16, 4), CtSlot(13, 0));
  mapping.add(CtSlot(13, 6), CtSlot(13, 1));
  mapping.add(CtSlot(14, 0), CtSlot(13, 2));
  mapping.add(CtSlot(1, 4), CtSlot(13, 3));
  mapping.add(CtSlot(12, 0), CtSlot(13, 4));
  mapping.add(CtSlot(20, 1), CtSlot(13, 5));
  mapping.add(CtSlot(2, 6), CtSlot(13, 6));
  mapping.add(CtSlot(17, 1), CtSlot(13, 7));
  mapping.add(CtSlot(1, 4), CtSlot(14, 0));
  mapping.add(CtSlot(4, 0), CtSlot(14, 1));
  mapping.add(CtSlot(10, 2), CtSlot(14, 2));
  mapping.add(CtSlot(6, 5), CtSlot(14, 3));
  mapping.add(CtSlot(21, 0), CtSlot(14, 4));
  mapping.add(CtSlot(6, 4), CtSlot(14, 5));
  mapping.add(CtSlot(7, 7), CtSlot(14, 6));
  mapping.add(CtSlot(18, 3), CtSlot(14, 7));
  mapping.add(CtSlot(22, 1), CtSlot(15, 0));
  mapping.add(CtSlot(7, 0), CtSlot(15, 1));
  mapping.add(CtSlot(15, 2), CtSlot(15, 2));
  mapping.add(CtSlot(3, 3), CtSlot(15, 3));
  mapping.add(CtSlot(8, 5), CtSlot(15, 4));
  mapping.add(CtSlot(7, 3), CtSlot(15, 5));
  mapping.add(CtSlot(0, 4), CtSlot(15, 6));
  mapping.add(CtSlot(11, 7), CtSlot(15, 7));
  mapping.add(CtSlot(14, 3), CtSlot(16, 0));
  mapping.add(CtSlot(19, 5), CtSlot(16, 1));
  mapping.add(CtSlot(9, 4), CtSlot(16, 2));
  mapping.add(CtSlot(22, 5), CtSlot(16, 3));
  mapping.add(CtSlot(8, 6), CtSlot(16, 4));
  mapping.add(CtSlot(13, 7), CtSlot(16, 5));
  mapping.add(CtSlot(17, 1), CtSlot(16, 6));
  mapping.add(CtSlot(13, 4), CtSlot(16, 7));
  mapping.add(CtSlot(14, 2), CtSlot(17, 0));
  mapping.add(CtSlot(1, 2), CtSlot(17, 1));
  mapping.add(CtSlot(2, 3), CtSlot(17, 2));
  mapping.add(CtSlot(12, 5), CtSlot(17, 3));
  mapping.add(CtSlot(18, 3), CtSlot(17, 4));
  mapping.add(CtSlot(11, 7), CtSlot(17, 5));
  mapping.add(CtSlot(12, 2), CtSlot(17, 6));
  mapping.add(CtSlot(0, 7), CtSlot(17, 7));
  mapping.add(CtSlot(6, 6), CtSlot(18, 0));
  mapping.add(CtSlot(8, 3), CtSlot(18, 1));
  mapping.add(CtSlot(10, 4), CtSlot(18, 2));
  mapping.add(CtSlot(8, 1), CtSlot(18, 3));
  mapping.add(CtSlot(13, 0), CtSlot(18, 4));
  mapping.add(CtSlot(3, 7), CtSlot(18, 5));
  mapping.add(CtSlot(22, 4), CtSlot(18, 6));
  mapping.add(CtSlot(5, 0), CtSlot(18, 7));
  mapping.add(CtSlot(9, 4), CtSlot(19, 0));
  mapping.add(CtSlot(9, 7), CtSlot(19, 1));
  mapping.add(CtSlot(10, 7), CtSlot(19, 2));
  mapping.add(CtSlot(15, 0), CtSlot(19, 3));
  mapping.add(CtSlot(18, 7), CtSlot(19, 4));
  mapping.add(CtSlot(14, 3), CtSlot(19, 5));
  mapping.add(CtSlot(7, 5), CtSlot(19, 6));
  mapping.add(CtSlot(0, 7), CtSlot(19, 7));
  mapping.add(CtSlot(12, 6), CtSlot(20, 0));
  mapping.add(CtSlot(3, 2), CtSlot(20, 1));
  mapping.add(CtSlot(20, 6), CtSlot(20, 2));
  mapping.add(CtSlot(4, 3), CtSlot(20, 3));
  mapping.add(CtSlot(15, 7), CtSlot(20, 4));
  mapping.add(CtSlot(19, 5), CtSlot(20, 5));
  mapping.add(CtSlot(22, 2), CtSlot(20, 6));
  mapping.add(CtSlot(19, 1), CtSlot(20, 7));
  mapping.add(CtSlot(3, 6), CtSlot(21, 0));
  mapping.add(CtSlot(14, 6), CtSlot(21, 1));
  mapping.add(CtSlot(6, 1), CtSlot(21, 2));
  mapping.add(CtSlot(8, 2), CtSlot(21, 3));
  mapping.add(CtSlot(8, 5), CtSlot(21, 4));
  mapping.add(CtSlot(15, 1), CtSlot(21, 5));
  mapping.add(CtSlot(14, 3), CtSlot(21, 6));
  mapping.add(CtSlot(16, 5), CtSlot(21, 7));
  mapping.add(CtSlot(19, 2), CtSlot(22, 0));
  mapping.add(CtSlot(18, 3), CtSlot(22, 1));
  mapping.add(CtSlot(9, 1), CtSlot(22, 2));
  mapping.add(CtSlot(13, 0), CtSlot(22, 3));
  mapping.add(CtSlot(2, 4), CtSlot(22, 4));
  mapping.add(CtSlot(10, 7), CtSlot(22, 5));
  mapping.add(CtSlot(19, 2), CtSlot(22, 6));
  mapping.add(CtSlot(10, 6), CtSlot(22, 7));
  VosVosErkinShiftNetworks shiftNetworks;
  auto scheme = shiftNetworks.findShiftScheme(mapping);
  simulateShiftNetwork(mapping, scheme, numCts, ctSize);
}

}  // namespace
}  // namespace tensor_ext
}  // namespace heir
}  // namespace mlir
