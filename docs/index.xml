<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HEIR â€“ Documentation</title><link>https://heir.dev/docs/</link><description>Recent content in Documentation on HEIR</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://heir.dev/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Getting Started</title><link>https://heir.dev/docs/getting_started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/getting_started/</guid><description>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://git-scm.com/">Git&lt;/a>&lt;/li>
&lt;li>Bazel via &lt;a href="https://github.com/bazelbuild/bazelisk">bazelisk&lt;/a>, or version
&lt;code>&amp;gt;=5.5&lt;/code>&lt;/li>
&lt;li>A C compiler (like &lt;a href="https://gcc.gnu.org/">gcc&lt;/a> or
&lt;a href="https://clang.llvm.org/">clang&lt;/a>)&lt;/li>
&lt;/ul>
&lt;h2 id="clone-and-build-the-project">Clone and build the project&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone git@github.com:google/heir.git &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> heir
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bazel build @heir//tools:heir-opt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Some passes in this repository require Yosys as a dependency
(&lt;code>--yosys-optimizer&lt;/code>). If you would like to skip Yosys and ABC compilation to
speed up builds, use the following build setting:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>bazel build --define&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">HEIR_NO_YOSYS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> @heir//tools:heir-opt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="optional-run-the-tests">Optional: Run the tests&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>bazel &lt;span style="color:#204a87">test&lt;/span> @heir//...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Like above, run the following to skip tests that depend on Yosys:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>bazel &lt;span style="color:#204a87">test&lt;/span> --define&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">HEIR_NO_YOSYS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> --test_tag_filters&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>-yosys @heir//...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="optional-run-heir-opt-on-an-mlir-file">Optional: Run heir-opt on an mlir file&lt;/h2>
&lt;p>HEIR comes with two central binaries, &lt;code>heir-opt&lt;/code> for running optimization passes
and dialect conversions, and &lt;code>heir-translate&lt;/code> for backend code generation. To
see the list of available passes in each one, run the binary with &lt;code>--help&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>bazel run //tools:heir-opt -- --help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bazel run //tools:heir-translate -- --help
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once you&amp;rsquo;ve chosen a pass or &lt;code>--pass-pipeline&lt;/code> to run, execute it on the desired
file. For example, you can run a test file through &lt;code>heir-opt&lt;/code> to see its output.
Note that when the binary is run via &lt;code>bazel&lt;/code>, you must pass absolute paths to
input files. You can also access the underlying binary at
&lt;code>bazel-bin/tools/heir-opt&lt;/code>, provided it has already been built.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>bazel run //tools:heir-opt -- &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> --comb-to-cggi -cse &lt;span style="color:#4e9a06">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">&lt;/span> &lt;span style="color:#000">$PWD&lt;/span>/tests/comb_to_cggi/add_one.mlir
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="developing-in-heir">Developing in HEIR&lt;/h2>
&lt;p>We use &lt;a href="https://pre-commit.com/">pre-commit&lt;/a> to manage a series of git
pre-commit hooks for the project; for example, each time you commit code, the
hooks will make sure that your C++ is formatted properly. If your code isn&amp;rsquo;t,
the hook will format it, so when you try to commit the second time you&amp;rsquo;ll get
past the hook.&lt;/p>
&lt;p>All hooks are defined in &lt;code>.pre-commit-config.yaml&lt;/code>. To install these hooks, run&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pip install -r requirements-dev.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then install the hooks to run automatically on &lt;code>git commit&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pre-commit install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To run them manually, run&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>pre-commit run --all-files
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="creating-a-new-pass">Creating a New Pass&lt;/h2>
&lt;p>The &lt;code>templates&lt;/code> folder contains Python scripts to create boilerplate for new
conversion or (dialect-specific) transform passes.&lt;/p>
&lt;h3 id="conversion-pass">Conversion Pass&lt;/h3>
&lt;p>To create a new conversion pass, run a command similar to the following:&lt;/p>
&lt;pre tabindex="0">&lt;code>python templates/templates.py new_conversion_pass \
--source_dialect_name=CGGI \
--source_dialect_namespace=cggi \
--source_dialect_mnemonic=cggi \
--target_dialect_name=TfheRust \
--target_dialect_namespace=tfhe_rust \
--target_dialect_mnemonic=tfhe_rust
&lt;/code>&lt;/pre>&lt;p>In order to build the resulting code, you must fix the labeled &lt;code>FIXME&lt;/code>s in the
type converter and the op conversion patterns.&lt;/p>
&lt;h3 id="transform-passes">Transform Passes&lt;/h3>
&lt;p>To create a transform or rewrite pass that operates on a dialect, run a command
similar to the following:&lt;/p>
&lt;pre tabindex="0">&lt;code>python templates/templates.py new_dialect_transform \
--pass_name=ForgetSecrets \
--pass_flag=forget-secrets \
--dialect_name=Secret \
--dialect_namespace=secret \
--force=false
&lt;/code>&lt;/pre>&lt;p>If the transform does not operate from and to a specific dialect, use&lt;/p>
&lt;pre tabindex="0">&lt;code>python templates/templates.py new_transform \
--pass_name=ForgetSecrets \
--pass_flag=forget-secrets \
--force=false
&lt;/code>&lt;/pre></description></item><item><title>Docs: Contributing to HEIR</title><link>https://heir.dev/docs/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/contributing/</guid><description>
&lt;p>There are several ways to contribute to HEIR, including:&lt;/p>
&lt;ul>
&lt;li>Discussing high-level designs and questions on HEIR&amp;rsquo;s
&lt;a href="https://github.com/google/heir/discussions">discussions page&lt;/a>&lt;/li>
&lt;li>Improving or expanding HEIR&amp;rsquo;s documentation&lt;/li>
&lt;li>Contributing to HEIR&amp;rsquo;s &lt;a href="https://github.com/google/heir">code-base&lt;/a>&lt;/li>
&lt;li>Discuss project direction at HEIR&amp;rsquo;s
&lt;a href="https://heir.dev/community/">Working Group meetings&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="ways-to-contribute">Ways to contribute&lt;/h2>
&lt;p>We welcome pull requests, and have tagged issues for newcomers:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/google/heir/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22">Good first issue&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/google/heir/issues?q=is%3Aissue+is%3Aopen+label%3A%22contributions+welcome%22">Contributions welcome&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/google/heir/labels/research%20synthesis">Research synthesis&lt;/a>: determine what parts of recent FHE research papers can or should be ported to HEIR.&lt;/li>
&lt;/ul>
&lt;p>For new proposals, please open a GitHub
&lt;a href="https://github.com/google/heir/issues">issue&lt;/a> or start a
&lt;a href="https://github.com/google/heir/discussions">discussion&lt;/a> for feedback.&lt;/p>
&lt;h2 id="contributing-to-code-using-pull-requests">Contributing to code using pull requests&lt;/h2>
&lt;h3 id="preparing-a-pull-request">Preparing a pull request&lt;/h3>
&lt;p>The following steps should look familiar to typical workflows for pull request
contributions. Feel free to consult
&lt;a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests">GitHub Help&lt;/a>
if you need more information using pull requests. HEIR-specific processes begin
at the &lt;a href="#pull-request-review-flow">pull request review stage&lt;/a>.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Sign the
&lt;a href="https://cla.developers.google.com/about">Contributor License Agreement&lt;/a>
(CLA). See more
&lt;a href="https://github.com/google/heir/blob/main/CONTRIBUTING.md#sign-our-contributor-license-agreement">here&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Fork the HEIR repository by clicking the &lt;strong>Fork&lt;/strong> button on the
&lt;a href="https://github.com/google/heir">repository page&lt;/a>. This creates a copy of the
HEIR repository on your own GitHub account.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>See &lt;a href="https://heir.dev/docs/getting_started/">Getting Started&lt;/a> to
install developer dependencies to build and run tests.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add the HEIR repository as an upstream remote, so you can sync your changes
against it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git remote add upstream https://www.github.com/google/heir
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Create a development branch for your change:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> git checkout -b name-of-change
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And implement your changes using your favorite IDE. See
&lt;a href="https://heir.dev/docs/ide_configuration/">IDE Configuration&lt;/a>
for more.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check HEIR&amp;rsquo;s lint and style checks by running the following from the top of
the repository:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> pre-commit run --all
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Make sure tests are passing with the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> bazel &lt;span style="color:#204a87">test&lt;/span> @heir//...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Once you are ready with your change, create a commit as follows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git add change.cpp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#4e9a06">&amp;#34;Detailed commit message&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push --set-upstream origin name-of-change
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="pull-request-review-flow">Pull request review flow&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>New PR&lt;/strong>:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>When a new PR is submitted, it is inspected for quality requirements, such as
the CLA requirement, and a sufficient PR description.&lt;/li>
&lt;li>If the PR passes checks, we assign a reviewer. If not, we request additional
changes to ensure the PR passes CI checks.&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>&lt;strong>Review&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>A reviewer will check the PR and potentially request additional changes.&lt;/li>
&lt;li>If a change is needed, the contributor is requested to make a suggested
change. Please make changes with additional commits to your PR, to ensure that
the reviewer can easily see the diff.&lt;/li>
&lt;li>If all looks good, the reviewer will approve the PR.&lt;/li>
&lt;li>This cycle repeats itself until the PR is approved.&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>&lt;strong>Approved&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;strong>At this stage, you must squash your commits into a single commit.&lt;/strong>&lt;/li>
&lt;li>Once the PR is approved, a GitHub workflow will
&lt;a href="https://github.com/google/heir/blob/main/.github/workflows/pr_review.yml">check&lt;/a>
your PR for multiple commits. You may use the &lt;code>git rebase -i&lt;/code> to squash the
commits. Pull requests must comprise of a single git commit before merging.&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>&lt;strong>Pull Ready&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Once the PR is squashed into a single git commit, a maintainer will apply the
&lt;code>pull ready&lt;/code> label.&lt;/li>
&lt;li>This initiates the internal code migration and presubmits.&lt;/li>
&lt;li>If needed, we may come to you to make some minor changes in case tests fail at
this stage. If so, we will request changes from the GitHub UI and the PR must
be approved again.&lt;/li>
&lt;li>At times, it may not be your change, but it may be additional internal lints
and layering checks that are not integrated with &lt;code>bazel&lt;/code> or open-source
tooling. We will go ahead and fix this.&lt;/li>
&lt;li>Once the internal tests pass, we merge the code internally and externally. You
will see &lt;code>copybara-bot&lt;/code> close the PR and merge your commit directly into main.&lt;/li>
&lt;/ul></description></item><item><title>Docs: IDE Configuration</title><link>https://heir.dev/docs/ide_configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/ide_configuration/</guid><description>
&lt;h2 id="vs-code">VS Code&lt;/h2>
&lt;p>For an out-of-tree MLIR project built with Bazel, install the following VS Code
extensions:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>llvm-vs-code-extensions.vscode-mlir&lt;/strong>: Adds language support for MLIR, PDLL,
and TableGen.&lt;/li>
&lt;li>&lt;strong>llvm-vs-code-extensions.vscode-clangd&lt;/strong>: Adds clangd code completion using a
generated
&lt;a href="https://clang.llvm.org/docs/JSONCompilationDatabase.html">compile_commands.json&lt;/a>
file.&lt;/li>
&lt;li>&lt;strong>bazelbuild.vscode-bazel&lt;/strong>: Support for Bazel.&lt;/li>
&lt;/ul>
&lt;p>You will also need to disable &lt;strong>ms-vscode.cpptools&lt;/strong> to avoid a conflict with
clangd.&lt;/p>
&lt;p>Add the following snippet to your VS Code user settings found in
&lt;code>.vscode/settings.json&lt;/code> to enable autocomplete based on the
&lt;code>compile_commands.json&lt;/code> file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;clangd.arguments&amp;#34;&lt;/span>&lt;span style="color:#a40000">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;--compile-commands-dir=${workspaceFolder}/&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;--completion-style=detailed&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;--query-driver=**&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#a40000">,&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To generate the &lt;code>compile_commands.json&lt;/code> file, run&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>bazel run @hedron_compile_commands//:refresh_all
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will need to be regenerated every time you want tooling to see new &lt;code>BUILD&lt;/code>
file changes.&lt;/p>
&lt;p>If you encounter errors like &lt;code>*.h.inc&lt;/code> not found, or syntax errors inside these
files, you may need to build those targets and then re-run the &lt;code>refresh_all&lt;/code>
command above.&lt;/p></description></item><item><title>Docs: Pipelines</title><link>https://heir.dev/docs/pipelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/pipelines/</guid><description>
&lt;h2 id="heir-opt">&lt;code>heir-opt&lt;/code>&lt;/h2>
&lt;h3 id="--heir-tosa-to-arith">&lt;code>--heir-tosa-to-arith&lt;/code>&lt;/h3>
&lt;p>Lowers a TOSA MLIR model to &lt;code>func&lt;/code>, &lt;code>arith&lt;/code>, and &lt;code>memref&lt;/code>.&lt;/p>
&lt;p>Lowers from TOSA through &lt;code>linalg&lt;/code> and &lt;code>affine&lt;/code>, and converts all tensors to
memrefs. Fully unrolls all loops, and forwards stores to subsequent loads
whenever possible. The output is suitable as an input to &lt;code>heir-translate --emit-verilog&lt;/code>. Retains &lt;code>affine.load&lt;/code> and &lt;code>affine.store&lt;/code> ops that cannot be
removed (e.g., reading from the input and writing to the output, or loading from
a memref with a variable index).&lt;/p>
&lt;p>The pass pipeline assumes that the input is a valid TOSA MLIR model with
stripped quantized types. The
&lt;a href="https://openxla.github.io/iree/getting-started/tflite/">iree-import-tflite&lt;/a>
tool can lower a TFLite FlatBuffer to textual MLIR with
&lt;code>--output-format=mlir-ir&lt;/code>. See
&lt;a href="https://github.com/google/heir/blob/main/tests/hello_world.tosa.mlir">hello_world.tosa.mlir&lt;/a>
for an example.&lt;/p>
&lt;h3 id="--yosys-optimizer">&lt;code>--yosys-optimizer&lt;/code>&lt;/h3>
&lt;p>Uses Yosys to booleanize and optimize MLIR functions.&lt;/p>
&lt;p>This pass pipeline requires inputs to be in standard MLIR (&lt;code>arith&lt;/code>, &lt;code>affine&lt;/code>,
&lt;code>func&lt;/code>, &lt;code>memref&lt;/code>). The pass imports the model to Yosys and runs passes to
booleanize the circuit and then uses ABC to perform optimizations. We use
standard LUT 3 cells. THe output of this pass includes &lt;code>arith&lt;/code> constants and
&lt;code>comb.truth_table&lt;/code> ops.&lt;/p>
&lt;p>The pass requires that the environment variable &lt;code>HEIR_ABC_BINARY&lt;/code> contains the
location of the ABC binary and that &lt;code>HEIR_YOSYS_SCRIPTS_DIR&lt;/code> contains the
location of the Yosys&amp;rsquo; techlib files that are needed to execute the path.&lt;/p>
&lt;p>This pass can be disabled by defining &lt;code>HEIR_NO_YOSYS&lt;/code>; this will avoid Yosys
library and ABC binary compilation, and avoid registration of this pass.&lt;/p>
&lt;h2 id="heir-translate">&lt;code>heir-translate&lt;/code>&lt;/h2>
&lt;h3 id="--emit-tfhe-rust">&lt;code>--emit-tfhe-rust&lt;/code>&lt;/h3>
&lt;p>Code generation for the &lt;a href="https://docs.zama.ai/tfhe-rs">&lt;code>tfhe-rs&lt;/code>&lt;/a> FHE library.
The library is based on the CGGI cryptosystem, and so this pass is most useful
when paired with lowerings from the &lt;code>cggi&lt;/code> dialect.&lt;/p>
&lt;p>The version of &lt;code>tfhe-rs&lt;/code> supported is defined in the
&lt;a href="https://github.com/google/heir/tree/main/tests/tfhe_rust/end_to_end/Cargo.toml">end to end &lt;code>tfhe_rust&lt;/code> tests&lt;/a>.&lt;/p>
&lt;p>Example input:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mlir" data-lang="mlir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">!&lt;/span>&lt;span style="color:#f57900">sks =&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>tfhe_rust&lt;span style="color:#000;font-weight:bold">.&lt;/span>server_key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">!&lt;/span>&lt;span style="color:#f57900">lut =&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>tfhe_rust&lt;span style="color:#000;font-weight:bold">.&lt;/span>lookup_table
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">!&lt;/span>&lt;span style="color:#f57900">eui3 =&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>tfhe_rust&lt;span style="color:#000;font-weight:bold">.&lt;/span>eui3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">@test_apply_lookup_table&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">%sks&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>sks&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%lut&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>lut&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%input&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>eui3&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>eui3 &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%v1&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> tfhe_rust&lt;span style="color:#000;font-weight:bold">.&lt;/span>apply_lookup_table &lt;span style="color:#000">%sks&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%input&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%lut&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">(!&lt;/span>sks&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>eui3&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>lut&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>eui3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%v2&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> tfhe_rust&lt;span style="color:#000;font-weight:bold">.&lt;/span>add &lt;span style="color:#000">%sks&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%input&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%v1&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">(!&lt;/span>sks&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>eui3&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>eui3&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>eui3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%c1&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">constant&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%v3&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> tfhe_rust&lt;span style="color:#000;font-weight:bold">.&lt;/span>scalar_left_shift &lt;span style="color:#000">%sks&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%v2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%c1&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">(!&lt;/span>sks&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>eui3&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i8&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>eui3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%v4&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> tfhe_rust&lt;span style="color:#000;font-weight:bold">.&lt;/span>apply_lookup_table &lt;span style="color:#000">%sks&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%v3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%lut&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">(!&lt;/span>sks&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>eui3&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>lut&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>eui3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">%v4&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>eui3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">use&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">tfhe&lt;/span>::&lt;span style="color:#000">shortint&lt;/span>::&lt;span style="color:#000">prelude&lt;/span>::&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">pub&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">fn&lt;/span> &lt;span style="color:#000">test_apply_lookup_table&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v9&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">ServerKey&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v10&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">LookupTableOwned&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v11&lt;/span>: &lt;span style="color:#204a87;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">Ciphertext&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>-&amp;gt; &lt;span style="color:#000">Ciphertext&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v4&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v9&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">apply_lookup_table&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">v11&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">v10&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v5&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v9&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">unchecked_add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">v11&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">v4&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v6&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v7&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v9&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">scalar_left_shift&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">v5&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v6&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">let&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v8&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v9&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">apply_lookup_table&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">v7&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">v10&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">v8&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note, the chosen variable names are arbitrary, and the resulting program still
must be integrated with a larger Rust program.&lt;/p>
&lt;h3 id="--emit-verilog">&lt;code>--emit-verilog&lt;/code>&lt;/h3>
&lt;p>Code generation for verilog from &lt;code>arith&lt;/code> and &lt;code>memref&lt;/code>. Expects a single top
level &lt;code>func.func&lt;/code> op as the entry point, which is converted to the output
verilog module.&lt;/p>
&lt;p>Example input:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mlir" data-lang="mlir">&lt;span style="display:flex;">&lt;span>module &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">@main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">%arg0&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i8&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i8&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%c0&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">constant&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%c1&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">constant&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%c2&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">constant&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%c3&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">constant&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%0&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>extsi &lt;span style="color:#000">%arg0&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i8&lt;/span> to &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%1&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>subi &lt;span style="color:#000">%0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%c1&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%2&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>muli &lt;span style="color:#000">%1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%c2&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%3&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>addi &lt;span style="color:#000">%2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%c3&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%4&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>cmpi sge&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%c0&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%5&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>select &lt;span style="color:#000">%4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%c1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%c2&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%6&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>shrsi &lt;span style="color:#000">%3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%c1&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%7&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>shrui &lt;span style="color:#000">%3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%c1&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%out&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>trunci &lt;span style="color:#000">%6&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span> to &lt;span style="color:#204a87;font-weight:bold">i8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">%out&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">module&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">input&lt;/span> &lt;span style="color:#204a87;font-weight:bold">wire&lt;/span> &lt;span style="color:#204a87;font-weight:bold">signed&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">7&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">arg1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">output&lt;/span> &lt;span style="color:#204a87;font-weight:bold">wire&lt;/span> &lt;span style="color:#204a87;font-weight:bold">signed&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">7&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">_out_&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">wire&lt;/span> &lt;span style="color:#204a87;font-weight:bold">signed&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">31&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">v2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">wire&lt;/span> &lt;span style="color:#204a87;font-weight:bold">signed&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">31&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">v3&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">wire&lt;/span> &lt;span style="color:#204a87;font-weight:bold">signed&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">31&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">v4&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">wire&lt;/span> &lt;span style="color:#204a87;font-weight:bold">signed&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">31&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">v5&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">wire&lt;/span> &lt;span style="color:#204a87;font-weight:bold">signed&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">31&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">v6&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">wire&lt;/span> &lt;span style="color:#204a87;font-weight:bold">signed&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">31&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">v7&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">wire&lt;/span> &lt;span style="color:#204a87;font-weight:bold">signed&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">31&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">v8&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">wire&lt;/span> &lt;span style="color:#204a87;font-weight:bold">signed&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">31&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">v9&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">wire&lt;/span> &lt;span style="color:#000">v10&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">wire&lt;/span> &lt;span style="color:#204a87;font-weight:bold">signed&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">31&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">v11&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">wire&lt;/span> &lt;span style="color:#204a87;font-weight:bold">signed&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">31&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">v12&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">wire&lt;/span> &lt;span style="color:#204a87;font-weight:bold">signed&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">31&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">v13&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">wire&lt;/span> &lt;span style="color:#204a87;font-weight:bold">signed&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">7&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000">v14&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">assign&lt;/span> &lt;span style="color:#000">v2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">assign&lt;/span> &lt;span style="color:#000">v3&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">assign&lt;/span> &lt;span style="color:#000">v4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">assign&lt;/span> &lt;span style="color:#000">v5&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">assign&lt;/span> &lt;span style="color:#000">v6&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{{&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">24&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">arg1&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">7&lt;/span>&lt;span style="color:#000;font-weight:bold">]}},&lt;/span> &lt;span style="color:#000">arg1&lt;/span>&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">assign&lt;/span> &lt;span style="color:#000">v7&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">v6&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">v3&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">assign&lt;/span> &lt;span style="color:#000">v8&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">v7&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">v4&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">assign&lt;/span> &lt;span style="color:#000">v9&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">v8&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">v5&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">assign&lt;/span> &lt;span style="color:#000">v10&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">v8&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#000">v2&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">assign&lt;/span> &lt;span style="color:#000">v11&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">v10&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">?&lt;/span> &lt;span style="color:#000">v3&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">v4&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">assign&lt;/span> &lt;span style="color:#000">v12&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">v9&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">v3&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">assign&lt;/span> &lt;span style="color:#000">v13&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">v9&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#000">v3&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">assign&lt;/span> &lt;span style="color:#000">v14&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">v12&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">7&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">assign&lt;/span> &lt;span style="color:#000">_out_&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">v14&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="--emit-metadata">&lt;code>--emit-metadata&lt;/code>&lt;/h3>
&lt;p>Prints a json object describing the function signatures. Used for code
generation after &lt;code>--emit-verilog&lt;/code>.&lt;/p>
&lt;p>Example input:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mlir" data-lang="mlir">&lt;span style="display:flex;">&lt;span>module &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">@main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">%arg0&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">memref&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">80x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i8&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;)&lt;/span> &lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">memref&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1x3x2x1x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i8&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%alloc_0&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">memref&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>alloc&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#f57900">alignment =&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">64&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i64&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">memref&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1x3x2x1x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i8&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">%alloc_0&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">memref&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1x3x2x1x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i8&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;functions&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;main&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;params&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;index&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;memref&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;element_type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;integer&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;is_signed&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;width&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;shape&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;return_type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;memref&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;element_type&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;integer&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;is_signed&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;width&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">&amp;#34;shape&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Tutorials</title><link>https://heir.dev/docs/tutorials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/tutorials/</guid><description>
&lt;p>A list of tutorials by the HEIR community. To add to this list, open an issue or
submit a pull request
&lt;a href="https://github.com/google/heir/blob/main/docs/content/en/docs/tutorials.md">on GitHub&lt;/a>.&lt;/p>
&lt;h2 id="mlir-tutorials">MLIR tutorials&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/j2kun/mlir-tutorial/">MLIR for Beginners by Jeremy Kun&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="fhe-math">FHE math&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://jeremykun.com/2022/12/28/estimating-the-security-of-ring-learning-with-errors-rlwe/">Estimating the Security of Ring Learning With Errors by Cathie Yun&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jeremykun.com/2022/08/29/key-switching-in-lwe/">Key Switching in LWE by Jeremy Kun&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jeremykun.com/2022/07/16/modulus-switching-in-lwe/">Modulus Switching in LWE by Jeremy Kun&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jeremykun.com/2022/12/09/negacyclic-polynomial-multiplication/">Negacyclic Polynomial Multiplication by Jeremy Kun&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jeremykun.com/2023/02/27/sample-extraction-from-rlwe-to-lwe/">Sample Extraction from RLWE to LWE by Jeremy Kun&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jeremykun.com/2021/12/11/the-gadget-decomposition-in-fhe/">The Gadget Decomposition in FHE by Jeremy Kun&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: BGV</title><link>https://heir.dev/docs/dialects/bgv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/dialects/bgv/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;p>The BGV dialect defines the types and operations of the BGV cryptosystem.&lt;/p>
&lt;h2 id="bgv-attributes">BGV attributes&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="bgvringsattr">BGVRingsAttr&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>#bgv.rings&amp;lt;
::llvm::ArrayRef&amp;lt;::mlir::heir::polynomial::RingAttr&amp;gt; # rings
&amp;gt;
&lt;/code>&lt;/pre>&lt;h4 id="parameters">Parameters:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Parameter&lt;/th>
&lt;th style="text-align:center">C++ type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">rings&lt;/td>
&lt;td style="text-align:center">&lt;code>::llvm::ArrayRef&amp;lt;::mlir::heir::polynomial::RingAttr&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="bgv-types">BGV types&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="ciphertexttype">CiphertextType&lt;/h3>
&lt;p>a BGV ciphertext&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>!bgv.ciphertext&amp;lt;
::mlir::heir::bgv::BGVRingsAttr, # rings
unsigned, # dim
std::optional&amp;lt;uint64_t&amp;gt; # level
&amp;gt;
&lt;/code>&lt;/pre>&lt;p>This type tracks the BGV ciphertext parameters, including the ciphertext
dimension (number of polynomials) and the set of rings that were used for
the particular BGV scheme instance. The default dimension is 2, representing
a ciphertext that is canonically encrypted against the key basis $(1, s)$.&lt;/p>
&lt;p>The type also includes a ring parameter specification.&lt;/p>
&lt;p>For example, &lt;code>bgv.ciphertext&amp;lt;rings=#rings, dim=3&amp;gt;&lt;/code> is a ciphertext with 3
polynomials $(c_0, c_1, c_2)$.&lt;/p>
&lt;p>The optional attribute &lt;code>level&lt;/code> specifies the &amp;ldquo;current ring&amp;rdquo;.&lt;/p>
&lt;h4 id="parameters-1">Parameters:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Parameter&lt;/th>
&lt;th style="text-align:center">C++ type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">rings&lt;/td>
&lt;td style="text-align:center">&lt;code>::mlir::heir::bgv::BGVRingsAttr&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">dim&lt;/td>
&lt;td style="text-align:center">&lt;code>unsigned&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">level&lt;/td>
&lt;td style="text-align:center">&lt;code>std::optional&amp;lt;uint64_t&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="bgv-ops">BGV ops&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="bgvadd-heirbgvaddop">&lt;code>bgv.add&lt;/code> (heir::bgv::AddOp)&lt;/h3>
&lt;p>&lt;em>Addition operation between ciphertexts.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `bgv.add` `(` operands `)` attr-dict `:` type($output)
&lt;/code>&lt;/pre>&lt;p>Traits: Commutative, SameOperandsAndResultType&lt;/p>
&lt;p>Interfaces: InferTypeOpInterface&lt;/p>
&lt;h4 id="operands">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>x&lt;/code>&lt;/td>
&lt;td>a BGV ciphertext&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>y&lt;/code>&lt;/td>
&lt;td>a BGV ciphertext&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>a BGV ciphertext&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="bgvmodulus_switch-heirbgvmodulusswitch">&lt;code>bgv.modulus_switch&lt;/code> (heir::bgv::ModulusSwitch)&lt;/h3>
&lt;p>&lt;em>Lower the modulus level of the ciphertext.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `bgv.modulus_switch` `(` operands `)` attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>Traits: SameOperandsAndResultRings&lt;/p>
&lt;h4 id="attributes">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>from_level&lt;/code>&lt;/td>&lt;td>::mlir::IntegerAttr&lt;/td>&lt;td>64-bit signless integer attribute&lt;/td>&lt;/tr>
&lt;tr>&lt;td>&lt;code>to_level&lt;/code>&lt;/td>&lt;td>::mlir::IntegerAttr&lt;/td>&lt;td>64-bit signless integer attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-1">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>x&lt;/code>&lt;/td>
&lt;td>a BGV ciphertext&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-1">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>a BGV ciphertext&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="bgvmul-heirbgvmulop">&lt;code>bgv.mul&lt;/code> (heir::bgv::MulOp)&lt;/h3>
&lt;p>&lt;em>Multiplication operation between ciphertexts.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `bgv.mul` `(` operands `)` attr-dict `:` type($x) `-&amp;gt;` type($output)
&lt;/code>&lt;/pre>&lt;p>Traits: Commutative, SameOperandsAndResultRings, SameTypeOperands&lt;/p>
&lt;h4 id="operands-2">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>x&lt;/code>&lt;/td>
&lt;td>a BGV ciphertext&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>y&lt;/code>&lt;/td>
&lt;td>a BGV ciphertext&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-2">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>a BGV ciphertext&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="bgvnegate-heirbgvnegate">&lt;code>bgv.negate&lt;/code> (heir::bgv::Negate)&lt;/h3>
&lt;p>&lt;em>Negate the coefficients of the ciphertext.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `bgv.negate` `(` operands `)` attr-dict `:` type($output)
&lt;/code>&lt;/pre>&lt;p>Traits: SameOperandsAndResultType&lt;/p>
&lt;p>Interfaces: InferTypeOpInterface&lt;/p>
&lt;h4 id="operands-3">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>x&lt;/code>&lt;/td>
&lt;td>a BGV ciphertext&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-3">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>a BGV ciphertext&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="bgvrelinearize-heirbgvrelinearize">&lt;code>bgv.relinearize&lt;/code> (heir::bgv::Relinearize)&lt;/h3>
&lt;p>&lt;em>Relinearize the ciphertext.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `bgv.relinearize` `(` operands `)` attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>This op takes integer array attributes &lt;code>from_basis&lt;/code> and &lt;code>to_basis&lt;/code> that are
used to indicate the key basis from which and to which the ciphertext is
encrypted against. A ciphertext is canonically encrypted against key basis
&lt;code>(1, s)&lt;/code>. After a multiplication, its size will increase and the basis will be
&lt;code>(1, s, s^2)&lt;/code>. The array that represents the key basis is constructed by
listing the powers of &lt;code>s&lt;/code> at each position of the array. For example, &lt;code>(1, s, s^2)&lt;/code> corresponds to &lt;code>[0, 1, 2]&lt;/code>, while &lt;code>(1, s^2)&lt;/code> corresponds to &lt;code>[0, 2]&lt;/code>.&lt;/p>
&lt;p>Traits: SameOperandsAndResultRings&lt;/p>
&lt;h4 id="attributes-1">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>from_basis&lt;/code>&lt;/td>&lt;td>::mlir::DenseI32ArrayAttr&lt;/td>&lt;td>i32 dense array attribute&lt;/td>&lt;/tr>
&lt;tr>&lt;td>&lt;code>to_basis&lt;/code>&lt;/td>&lt;td>::mlir::DenseI32ArrayAttr&lt;/td>&lt;td>i32 dense array attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-4">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>x&lt;/code>&lt;/td>
&lt;td>a BGV ciphertext&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-4">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>a BGV ciphertext&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="bgvrotate-heirbgvrotate">&lt;code>bgv.rotate&lt;/code> (heir::bgv::Rotate)&lt;/h3>
&lt;p>&lt;em>Rotate the coefficients of the ciphertext using a Galois automorphism.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `bgv.rotate` `(` operands `)` attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>Traits: SameOperandsAndResultRings&lt;/p>
&lt;h4 id="attributes-2">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>offset&lt;/code>&lt;/td>&lt;td>::mlir::IntegerAttr&lt;/td>&lt;td>64-bit signless integer attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-5">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>x&lt;/code>&lt;/td>
&lt;td>a BGV ciphertext&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-5">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>a BGV ciphertext&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="bgvsub-heirbgvsubop">&lt;code>bgv.sub&lt;/code> (heir::bgv::SubOp)&lt;/h3>
&lt;p>&lt;em>Subtraction operation between ciphertexts.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `bgv.sub` `(` operands `)` attr-dict `:` type($output)
&lt;/code>&lt;/pre>&lt;p>Traits: SameOperandsAndResultType&lt;/p>
&lt;p>Interfaces: InferTypeOpInterface&lt;/p>
&lt;h4 id="operands-6">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>x&lt;/code>&lt;/td>
&lt;td>a BGV ciphertext&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>y&lt;/code>&lt;/td>
&lt;td>a BGV ciphertext&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-6">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>a BGV ciphertext&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: BGVToPolynomial</title><link>https://heir.dev/docs/passes/bgvtopolynomial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/bgvtopolynomial/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-bgv-to-polynomial">&lt;code>-bgv-to-polynomial&lt;/code>&lt;/h3>
&lt;p>&lt;em>Lower &lt;code>bgv&lt;/code> to &lt;code>polynomial&lt;/code> dialect.&lt;/em>&lt;/p>
&lt;p>This pass lowers the &lt;code>bgv&lt;/code> dialect to &lt;code>polynomial&lt;/code> dialect.&lt;/p></description></item><item><title>Docs: CGGI</title><link>https://heir.dev/docs/dialects/cggi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/dialects/cggi/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;p>A dialect for types and operations in the CGGI cryptosystem&lt;/p>
&lt;h2 id="cggi-attributes">CGGI attributes&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="cggiparamsattr">CGGIParamsAttr&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>#cggi.cggi_params&amp;lt;
::mlir::heir::lwe::RLWEParamsAttr, # rlweParams
unsigned, # bsk_noise_variance
unsigned, # bsk_gadget_base_log
unsigned, # bsk_gadget_num_levels
unsigned, # ksk_noise_variance
unsigned, # ksk_gadget_base_log
unsigned # ksk_gadget_num_levels
&amp;gt;
&lt;/code>&lt;/pre>&lt;h4 id="parameters">Parameters:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Parameter&lt;/th>
&lt;th style="text-align:center">C++ type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">rlweParams&lt;/td>
&lt;td style="text-align:center">&lt;code>::mlir::heir::lwe::RLWEParamsAttr&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">bsk_noise_variance&lt;/td>
&lt;td style="text-align:center">&lt;code>unsigned&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">bsk_gadget_base_log&lt;/td>
&lt;td style="text-align:center">&lt;code>unsigned&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">bsk_gadget_num_levels&lt;/td>
&lt;td style="text-align:center">&lt;code>unsigned&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">ksk_noise_variance&lt;/td>
&lt;td style="text-align:center">&lt;code>unsigned&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">ksk_gadget_base_log&lt;/td>
&lt;td style="text-align:center">&lt;code>unsigned&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">ksk_gadget_num_levels&lt;/td>
&lt;td style="text-align:center">&lt;code>unsigned&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="cggi-ops">CGGI ops&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="cggiand-heircggiandop">&lt;code>cggi.and&lt;/code> (heir::cggi::AndOp)&lt;/h3>
&lt;p>&lt;em>Logical AND of two ciphertexts.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `cggi.and` operands attr-dict `:` qualified(type($output))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait, Commutative, Elementwise, SameOperandsAndResultType, Scalarizable&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>lhs&lt;/code>&lt;/td>
&lt;td>ciphertext-like&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>rhs&lt;/code>&lt;/td>
&lt;td>ciphertext-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>ciphertext-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="cggilut2-heircggilut2op">&lt;code>cggi.lut2&lt;/code> (heir::cggi::Lut2Op)&lt;/h3>
&lt;p>&lt;em>A lookup table on two inputs.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `cggi.lut2` `(` operands `)` attr-dict `:` qualified(type($output))
&lt;/code>&lt;/pre>&lt;p>An op representing a lookup table applied to some number &lt;code>n&lt;/code> of ciphertexts
encrypting boolean input bits.&lt;/p>
&lt;p>Over cleartext bits &lt;code>a, b, c&lt;/code>, using &lt;code>n = 3&lt;/code> for example, the operation
computed by this function can be interpreted as&lt;/p>
&lt;pre tabindex="0">&lt;code> truth_table &amp;gt;&amp;gt; {c, b, a}
&lt;/code>&lt;/pre>&lt;p>where &lt;code>{c, b, a}&lt;/code> is the unsigned 3-bit integer with bits &lt;code>c, b, a&lt;/code> from most
significant bit to least-significant bit. The input are combined into a
single ciphertext input to the lookup table using products with plaintexts
and sums.&lt;/p>
&lt;p>Traits: AlwaysSpeculatableImplTrait, Commutative, Elementwise, Scalarizable&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>lookup_table&lt;/code>&lt;/td>&lt;td>::mlir::IntegerAttr&lt;/td>&lt;td>An Attribute containing a integer value&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-1">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>b&lt;/code>&lt;/td>
&lt;td>ciphertext-like&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>a&lt;/code>&lt;/td>
&lt;td>ciphertext-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-1">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>ciphertext-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="cggilut3-heircggilut3op">&lt;code>cggi.lut3&lt;/code> (heir::cggi::Lut3Op)&lt;/h3>
&lt;p>&lt;em>A lookup table on three inputs.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `cggi.lut3` `(` operands `)` attr-dict `:` qualified(type($output))
&lt;/code>&lt;/pre>&lt;p>An op representing a lookup table applied to some number &lt;code>n&lt;/code> of ciphertexts
encrypting boolean input bits.&lt;/p>
&lt;p>Over cleartext bits &lt;code>a, b, c&lt;/code>, using &lt;code>n = 3&lt;/code> for example, the operation
computed by this function can be interpreted as&lt;/p>
&lt;pre tabindex="0">&lt;code> truth_table &amp;gt;&amp;gt; {c, b, a}
&lt;/code>&lt;/pre>&lt;p>where &lt;code>{c, b, a}&lt;/code> is the unsigned 3-bit integer with bits &lt;code>c, b, a&lt;/code> from most
significant bit to least-significant bit. The input are combined into a
single ciphertext input to the lookup table using products with plaintexts
and sums.&lt;/p>
&lt;p>Traits: AlwaysSpeculatableImplTrait, Commutative, Elementwise, Scalarizable&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-1">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>lookup_table&lt;/code>&lt;/td>&lt;td>::mlir::IntegerAttr&lt;/td>&lt;td>An Attribute containing a integer value&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-2">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>c&lt;/code>&lt;/td>
&lt;td>ciphertext-like&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>b&lt;/code>&lt;/td>
&lt;td>ciphertext-like&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>a&lt;/code>&lt;/td>
&lt;td>ciphertext-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-2">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>ciphertext-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="cgginot-heircgginotop">&lt;code>cggi.not&lt;/code> (heir::cggi::NotOp)&lt;/h3>
&lt;p>&lt;em>Logical NOT of two ciphertexts&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `cggi.not` operands attr-dict `:` qualified(type($output))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait, Involution, SameOperandsAndResultType&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-3">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>input&lt;/code>&lt;/td>
&lt;td>A type for LWE ciphertexts&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-3">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>A type for LWE ciphertexts&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="cggior-heircggiorop">&lt;code>cggi.or&lt;/code> (heir::cggi::OrOp)&lt;/h3>
&lt;p>&lt;em>Logical OR of two ciphertexts.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `cggi.or` operands attr-dict `:` qualified(type($output))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait, Commutative, Elementwise, SameOperandsAndResultType, Scalarizable&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-4">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>lhs&lt;/code>&lt;/td>
&lt;td>ciphertext-like&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>rhs&lt;/code>&lt;/td>
&lt;td>ciphertext-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-4">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>ciphertext-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="cggixor-heircggixorop">&lt;code>cggi.xor&lt;/code> (heir::cggi::XorOp)&lt;/h3>
&lt;p>&lt;em>Logical XOR of two ciphertexts.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `cggi.xor` operands attr-dict `:` qualified(type($output))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait, Commutative, Elementwise, SameOperandsAndResultType, Scalarizable&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-5">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>lhs&lt;/code>&lt;/td>
&lt;td>ciphertext-like&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>rhs&lt;/code>&lt;/td>
&lt;td>ciphertext-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-5">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>ciphertext-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: CGGIPasses</title><link>https://heir.dev/docs/passes/cggipasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/cggipasses/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-cggi-set-default-parameters">&lt;code>-cggi-set-default-parameters&lt;/code>&lt;/h3>
&lt;p>&lt;em>Set default parameters for CGGI ops&lt;/em>&lt;/p>
&lt;p>This pass adds default parameters to all CGGI ops as &lt;code>cggi_params&lt;/code> named
attributes, overriding any existing attribute set with that name.&lt;/p>
&lt;p>This pass is primarily for testing purposes, and as a parameter provider
before a proper parameter selection mechanism is added. This pass should not
be used in production.&lt;/p>
&lt;p>The specific parameters are hard-coded in
&lt;code>lib/Dialect/CGGI/Transforms/SetDefaultParameters.cpp&lt;/code>.&lt;/p>
&lt;h3 id="-cggi-straight-line-vectorizer">&lt;code>-cggi-straight-line-vectorizer&lt;/code>&lt;/h3>
&lt;p>&lt;em>A straight-line vectorizer for CGGI bootstrapping ops.&lt;/em>&lt;/p>
&lt;p>This pass vectorizes CGGI ops. It ignores control flow and only vectorizes
straight-line programs within a given region.&lt;/p></description></item><item><title>Docs: CGGIToTfheRust</title><link>https://heir.dev/docs/passes/cggitotfherust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/cggitotfherust/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-cggi-to-tfhe-rust">&lt;code>-cggi-to-tfhe-rust&lt;/code>&lt;/h3>
&lt;p>&lt;em>Lower &lt;code>cggi&lt;/code> to &lt;code>tfhe_rust&lt;/code> dialect.&lt;/em>&lt;/p></description></item><item><title>Docs: Comb</title><link>https://heir.dev/docs/dialects/comb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/dialects/comb/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;p>Types and operations for comb dialect
This dialect defines the &lt;code>comb&lt;/code> dialect, which is intended to be a generic
representation of combinational logic outside of a particular use-case.&lt;/p>
&lt;h2 id="operations">Operations&lt;/h2>
&lt;h3 id="combadd-heircombaddop">&lt;code>comb.add&lt;/code> (heir::comb::AddOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.add` (`bin` $twoState^)? $inputs attr-dict `:` qualified(type($result))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait, Commutative, SameOperandsAndResultType, SameTypeOperands&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>twoState&lt;/code>&lt;/td>&lt;td>::mlir::UnitAttr&lt;/td>&lt;td>unit attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>inputs&lt;/code>&lt;/td>
&lt;td>variadic of signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="comband-heircombandop">&lt;code>comb.and&lt;/code> (heir::comb::AndOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.and` (`bin` $twoState^)? $inputs attr-dict `:` qualified(type($result))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait, Commutative, SameOperandsAndResultType, SameTypeOperands&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-1">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>twoState&lt;/code>&lt;/td>&lt;td>::mlir::UnitAttr&lt;/td>&lt;td>unit attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-1">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>inputs&lt;/code>&lt;/td>
&lt;td>variadic of signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-1">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combconcat-heircombconcatop">&lt;code>comb.concat&lt;/code> (heir::comb::ConcatOp)&lt;/h3>
&lt;p>&lt;em>Concatenate a variadic list of operands together.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.concat` $inputs attr-dict `:` qualified(type($inputs))
&lt;/code>&lt;/pre>&lt;p>See the comb rationale document for details on operand ordering.&lt;/p>
&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-2">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>inputs&lt;/code>&lt;/td>
&lt;td>variadic of signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-2">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combextract-heircombextractop">&lt;code>comb.extract&lt;/code> (heir::comb::ExtractOp)&lt;/h3>
&lt;p>&lt;em>Extract a range of bits into a smaller value, lowBit specifies the lowest bit included.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.extract` $input `from` $lowBit attr-dict `:` functional-type($input, $result)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-2">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>lowBit&lt;/code>&lt;/td>&lt;td>::mlir::IntegerAttr&lt;/td>&lt;td>32-bit signless integer attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-3">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>input&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-3">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combicmp-heircombicmpop">&lt;code>comb.icmp&lt;/code> (heir::comb::ICmpOp)&lt;/h3>
&lt;p>&lt;em>Compare two integer values&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.icmp` (`bin` $twoState^)? $predicate $lhs `,` $rhs attr-dict `:` qualified(type($lhs))
&lt;/code>&lt;/pre>&lt;p>This operation compares two integers using a predicate. If the predicate is
true, returns 1, otherwise returns 0. This operation always returns a one
bit wide result.&lt;/p>
&lt;pre tabindex="0">&lt;code> %r = comb.icmp eq %a, %b : i4
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait, SameTypeOperands&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-3">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>predicate&lt;/code>&lt;/td>&lt;td>::mlir::heir::comb::ICmpPredicateAttr&lt;/td>&lt;td>hw.icmp comparison predicate&lt;/td>&lt;/tr>
&lt;tr>&lt;td>&lt;code>twoState&lt;/code>&lt;/td>&lt;td>::mlir::UnitAttr&lt;/td>&lt;td>unit attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-4">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>lhs&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>rhs&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-4">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>1-bit signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combmul-heircombmulop">&lt;code>comb.mul&lt;/code> (heir::comb::MulOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.mul` (`bin` $twoState^)? $inputs attr-dict `:` qualified(type($result))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait, Commutative, SameOperandsAndResultType, SameTypeOperands&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-4">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>twoState&lt;/code>&lt;/td>&lt;td>::mlir::UnitAttr&lt;/td>&lt;td>unit attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-5">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>inputs&lt;/code>&lt;/td>
&lt;td>variadic of signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-5">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combmux-heircombmuxop">&lt;code>comb.mux&lt;/code> (heir::comb::MuxOp)&lt;/h3>
&lt;p>&lt;em>Return one or the other operand depending on a selector bit&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.mux` (`bin` $twoState^)? $cond `,` $trueValue `,` $falseValue attr-dict `:` qualified(type($result))
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code> %0 = mux %pred, %tvalue, %fvalue : i4
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-5">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>twoState&lt;/code>&lt;/td>&lt;td>::mlir::UnitAttr&lt;/td>&lt;td>unit attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-6">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cond&lt;/code>&lt;/td>
&lt;td>1-bit signless integer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>trueValue&lt;/code>&lt;/td>
&lt;td>any type&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>falseValue&lt;/code>&lt;/td>
&lt;td>any type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-6">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>any type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combor-heircomborop">&lt;code>comb.or&lt;/code> (heir::comb::OrOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.or` (`bin` $twoState^)? $inputs attr-dict `:` qualified(type($result))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait, Commutative, SameOperandsAndResultType, SameTypeOperands&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-6">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>twoState&lt;/code>&lt;/td>&lt;td>::mlir::UnitAttr&lt;/td>&lt;td>unit attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-7">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>inputs&lt;/code>&lt;/td>
&lt;td>variadic of signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-7">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combparity-heircombparityop">&lt;code>comb.parity&lt;/code> (heir::comb::ParityOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.parity` (`bin` $twoState^)? $input attr-dict `:` qualified(type($input))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-7">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>twoState&lt;/code>&lt;/td>&lt;td>::mlir::UnitAttr&lt;/td>&lt;td>unit attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-8">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>input&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-8">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>1-bit signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combreplicate-heircombreplicateop">&lt;code>comb.replicate&lt;/code> (heir::comb::ReplicateOp)&lt;/h3>
&lt;p>&lt;em>Concatenate the operand a constant number of times&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.replicate` $input attr-dict `:` functional-type($input, $result)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-9">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>input&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-9">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combtruth_table-heircombtruthtableop">&lt;code>comb.truth_table&lt;/code> (heir::comb::TruthTableOp)&lt;/h3>
&lt;p>&lt;em>Return a true/false based on a lookup table&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.truth_table` $inputs `-&amp;gt;` $lookupTable attr-dict
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code> %a = ... : i1
%b = ... : i1
%0 = comb.truth_table %a, %b -&amp;gt; 6 : ui4
&lt;/code>&lt;/pre>&lt;p>This operation assumes that the lookup table is described as an integer of
2^n bits to fully specify the table. Inputs are sorted MSB -&amp;gt; LSB from left
to right and the offset into &lt;code>lookupTable&lt;/code> is computed from them. The
integer containing the truth table value&amp;rsquo;s LSB is the output for the input
&amp;ldquo;all false&amp;rdquo;, and the MSB is the output for the input &amp;ldquo;all true&amp;rdquo;.&lt;/p>
&lt;p>No difference from array_get into an array of constants except for xprop
behavior. If one of the inputs is unknown, but said input doesn&amp;rsquo;t make a
difference in the output (based on the lookup table) the result should not
be &amp;lsquo;x&amp;rsquo; &amp;ndash; it should be the well-known result.&lt;/p>
&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-8">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>lookupTable&lt;/code>&lt;/td>&lt;td>::mlir::IntegerAttr&lt;/td>&lt;td>An Attribute containing a integer value&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-10">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>inputs&lt;/code>&lt;/td>
&lt;td>variadic of 1-bit signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-10">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>1-bit signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combxor-heircombxorop">&lt;code>comb.xor&lt;/code> (heir::comb::XorOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.xor` (`bin` $twoState^)? $inputs attr-dict `:` qualified(type($result))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait, Commutative, SameOperandsAndResultType, SameTypeOperands&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-9">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>twoState&lt;/code>&lt;/td>&lt;td>::mlir::UnitAttr&lt;/td>&lt;td>unit attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-11">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>inputs&lt;/code>&lt;/td>
&lt;td>variadic of signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-11">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="comb-types">Comb types&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h2 id="comb-ops">Comb ops&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="combadd-heircombaddop-1">&lt;code>comb.add&lt;/code> (heir::comb::AddOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.add` (`bin` $twoState^)? $inputs attr-dict `:` qualified(type($result))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait, Commutative, SameOperandsAndResultType, SameTypeOperands&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-10">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>twoState&lt;/code>&lt;/td>&lt;td>::mlir::UnitAttr&lt;/td>&lt;td>unit attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-12">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>inputs&lt;/code>&lt;/td>
&lt;td>variadic of signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-12">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="comband-heircombandop-1">&lt;code>comb.and&lt;/code> (heir::comb::AndOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.and` (`bin` $twoState^)? $inputs attr-dict `:` qualified(type($result))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait, Commutative, SameOperandsAndResultType, SameTypeOperands&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-11">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>twoState&lt;/code>&lt;/td>&lt;td>::mlir::UnitAttr&lt;/td>&lt;td>unit attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-13">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>inputs&lt;/code>&lt;/td>
&lt;td>variadic of signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-13">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combconcat-heircombconcatop-1">&lt;code>comb.concat&lt;/code> (heir::comb::ConcatOp)&lt;/h3>
&lt;p>&lt;em>Concatenate a variadic list of operands together.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.concat` $inputs attr-dict `:` qualified(type($inputs))
&lt;/code>&lt;/pre>&lt;p>See the comb rationale document for details on operand ordering.&lt;/p>
&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-14">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>inputs&lt;/code>&lt;/td>
&lt;td>variadic of signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-14">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combextract-heircombextractop-1">&lt;code>comb.extract&lt;/code> (heir::comb::ExtractOp)&lt;/h3>
&lt;p>&lt;em>Extract a range of bits into a smaller value, lowBit specifies the lowest bit included.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.extract` $input `from` $lowBit attr-dict `:` functional-type($input, $result)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-12">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>lowBit&lt;/code>&lt;/td>&lt;td>::mlir::IntegerAttr&lt;/td>&lt;td>32-bit signless integer attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-15">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>input&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-15">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combicmp-heircombicmpop-1">&lt;code>comb.icmp&lt;/code> (heir::comb::ICmpOp)&lt;/h3>
&lt;p>&lt;em>Compare two integer values&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.icmp` (`bin` $twoState^)? $predicate $lhs `,` $rhs attr-dict `:` qualified(type($lhs))
&lt;/code>&lt;/pre>&lt;p>This operation compares two integers using a predicate. If the predicate is
true, returns 1, otherwise returns 0. This operation always returns a one
bit wide result.&lt;/p>
&lt;pre tabindex="0">&lt;code> %r = comb.icmp eq %a, %b : i4
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait, SameTypeOperands&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-13">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>predicate&lt;/code>&lt;/td>&lt;td>::mlir::heir::comb::ICmpPredicateAttr&lt;/td>&lt;td>hw.icmp comparison predicate&lt;/td>&lt;/tr>
&lt;tr>&lt;td>&lt;code>twoState&lt;/code>&lt;/td>&lt;td>::mlir::UnitAttr&lt;/td>&lt;td>unit attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-16">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>lhs&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>rhs&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-16">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>1-bit signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combmul-heircombmulop-1">&lt;code>comb.mul&lt;/code> (heir::comb::MulOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.mul` (`bin` $twoState^)? $inputs attr-dict `:` qualified(type($result))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait, Commutative, SameOperandsAndResultType, SameTypeOperands&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-14">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>twoState&lt;/code>&lt;/td>&lt;td>::mlir::UnitAttr&lt;/td>&lt;td>unit attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-17">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>inputs&lt;/code>&lt;/td>
&lt;td>variadic of signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-17">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combmux-heircombmuxop-1">&lt;code>comb.mux&lt;/code> (heir::comb::MuxOp)&lt;/h3>
&lt;p>&lt;em>Return one or the other operand depending on a selector bit&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.mux` (`bin` $twoState^)? $cond `,` $trueValue `,` $falseValue attr-dict `:` qualified(type($result))
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code> %0 = mux %pred, %tvalue, %fvalue : i4
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-15">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>twoState&lt;/code>&lt;/td>&lt;td>::mlir::UnitAttr&lt;/td>&lt;td>unit attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-18">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cond&lt;/code>&lt;/td>
&lt;td>1-bit signless integer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>trueValue&lt;/code>&lt;/td>
&lt;td>any type&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>falseValue&lt;/code>&lt;/td>
&lt;td>any type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-18">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>any type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combor-heircomborop-1">&lt;code>comb.or&lt;/code> (heir::comb::OrOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.or` (`bin` $twoState^)? $inputs attr-dict `:` qualified(type($result))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait, Commutative, SameOperandsAndResultType, SameTypeOperands&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-16">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>twoState&lt;/code>&lt;/td>&lt;td>::mlir::UnitAttr&lt;/td>&lt;td>unit attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-19">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>inputs&lt;/code>&lt;/td>
&lt;td>variadic of signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-19">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combparity-heircombparityop-1">&lt;code>comb.parity&lt;/code> (heir::comb::ParityOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.parity` (`bin` $twoState^)? $input attr-dict `:` qualified(type($input))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-17">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>twoState&lt;/code>&lt;/td>&lt;td>::mlir::UnitAttr&lt;/td>&lt;td>unit attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-20">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>input&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-20">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>1-bit signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combreplicate-heircombreplicateop-1">&lt;code>comb.replicate&lt;/code> (heir::comb::ReplicateOp)&lt;/h3>
&lt;p>&lt;em>Concatenate the operand a constant number of times&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.replicate` $input attr-dict `:` functional-type($input, $result)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-21">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>input&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-21">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combtruth_table-heircombtruthtableop-1">&lt;code>comb.truth_table&lt;/code> (heir::comb::TruthTableOp)&lt;/h3>
&lt;p>&lt;em>Return a true/false based on a lookup table&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.truth_table` $inputs `-&amp;gt;` $lookupTable attr-dict
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code> %a = ... : i1
%b = ... : i1
%0 = comb.truth_table %a, %b -&amp;gt; 6 : ui4
&lt;/code>&lt;/pre>&lt;p>This operation assumes that the lookup table is described as an integer of
2^n bits to fully specify the table. Inputs are sorted MSB -&amp;gt; LSB from left
to right and the offset into &lt;code>lookupTable&lt;/code> is computed from them. The
integer containing the truth table value&amp;rsquo;s LSB is the output for the input
&amp;ldquo;all false&amp;rdquo;, and the MSB is the output for the input &amp;ldquo;all true&amp;rdquo;.&lt;/p>
&lt;p>No difference from array_get into an array of constants except for xprop
behavior. If one of the inputs is unknown, but said input doesn&amp;rsquo;t make a
difference in the output (based on the lookup table) the result should not
be &amp;lsquo;x&amp;rsquo; &amp;ndash; it should be the well-known result.&lt;/p>
&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-18">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>lookupTable&lt;/code>&lt;/td>&lt;td>::mlir::IntegerAttr&lt;/td>&lt;td>An Attribute containing a integer value&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-22">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>inputs&lt;/code>&lt;/td>
&lt;td>variadic of 1-bit signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-22">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>1-bit signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="combxor-heircombxorop-1">&lt;code>comb.xor&lt;/code> (heir::comb::XorOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `comb.xor` (`bin` $twoState^)? $inputs attr-dict `:` qualified(type($result))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait, Commutative, SameOperandsAndResultType, SameTypeOperands&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-19">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>twoState&lt;/code>&lt;/td>&lt;td>::mlir::UnitAttr&lt;/td>&lt;td>unit attribute&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-23">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>inputs&lt;/code>&lt;/td>
&lt;td>variadic of signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-23">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>result&lt;/code>&lt;/td>
&lt;td>signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: CombToCGGI</title><link>https://heir.dev/docs/passes/combtocggi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/combtocggi/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-comb-to-cggi">&lt;code>-comb-to-cggi&lt;/code>&lt;/h3>
&lt;p>&lt;em>Lower &lt;code>comb&lt;/code> to &lt;code>cggi&lt;/code> dialect.&lt;/em>&lt;/p>
&lt;p>This pass lowers the &lt;code>comb&lt;/code> dialect to &lt;code>cggi&lt;/code> dialect.&lt;/p></description></item><item><title>Docs: LWE</title><link>https://heir.dev/docs/dialects/lwe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/dialects/lwe/</guid><description>
&lt;h2 id="lwe-attributes">LWE attributes&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="bitfieldencodingattr">BitFieldEncodingAttr&lt;/h3>
&lt;p>An attribute describing encoded LWE plaintexts using bit fields.&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>#lwe.bit_field_encoding&amp;lt;
unsigned, # cleartext_start
unsigned # cleartext_bitwidth
&amp;gt;
&lt;/code>&lt;/pre>&lt;p>A bit field encoding of an integer describes which contiguous region
of bits a small integer occupies within a larger integer.&lt;/p>
&lt;p>In LWE the plaintexts are integers of a given bit width, and the cleartext
messages are integers of a smaller bit width. A common example might be
3-bit cleartexts inside a 32-bit plaintext. In the CGGI FHE scheme, the
3-bit cleartext might be stored as follows, where 0 denotes a 0 bit, &lt;code>b&lt;/code>
denotes a bit of the cleartext, &lt;code>n&lt;/code> denotes a bit reserved for noise, and
&lt;code>|&lt;/code> is a visual aid to show where the bit fields begin and end.&lt;/p>
&lt;pre tabindex="0">&lt;code> 0|bbb|nn...n
MSB^ ^LSB
&lt;/code>&lt;/pre>&lt;p>The data describing the encoding consists of the starting bit positions of
the cleartext bit field and its width, where the LSB is bit 0 and the MSB
is bit &lt;code>bit_width-1&lt;/code>. So the above example would have starting bit &lt;code>30&lt;/code> and
width &lt;code>3&lt;/code>. The bits preceding (more significant than) the starting bit are
reserved for padding, and the bits following (less significant than) the
ending bit are reserved for noise.&lt;/p>
&lt;p>The presence of this attribute as the &lt;code>encoding&lt;/code> attribute of a tensor
indicates that the tensor is an LWE ciphertext.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;pre tabindex="0">&lt;code>#lwe_encoding = #lwe.bit_field_encoding&amp;lt;cleartext_start=30, cleartext_bitwidth=3&amp;gt;
%lwe_ciphertext = arith.constant &amp;lt;[1,2,3,4]&amp;gt; : tensor&amp;lt;4xi32, #lwe_encoding&amp;gt;
&lt;/code>&lt;/pre>&lt;h4 id="parameters">Parameters:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Parameter&lt;/th>
&lt;th style="text-align:center">C++ type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">cleartext_start&lt;/td>
&lt;td style="text-align:center">&lt;code>unsigned&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">cleartext_bitwidth&lt;/td>
&lt;td style="text-align:center">&lt;code>unsigned&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="lweparamsattr">LWEParamsAttr&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>#lwe.lwe_params&amp;lt;
IntegerAttr, # cmod
unsigned # dimension
&amp;gt;
&lt;/code>&lt;/pre>&lt;h4 id="parameters-1">Parameters:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Parameter&lt;/th>
&lt;th style="text-align:center">C++ type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">cmod&lt;/td>
&lt;td style="text-align:center">&lt;code>IntegerAttr&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">dimension&lt;/td>
&lt;td style="text-align:center">&lt;code>unsigned&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="rlweparamsattr">RLWEParamsAttr&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>#lwe.rlwe_params&amp;lt;
IntegerAttr, # cmod
unsigned, # dimension
unsigned # polyDegree
&amp;gt;
&lt;/code>&lt;/pre>&lt;p>An attribute describing classical RLWE parameters:&lt;/p>
&lt;ul>
&lt;li>&lt;code>cmod&lt;/code>: the coefficient modulus for the polynomials.&lt;/li>
&lt;li>&lt;code>dimension&lt;/code>: the number of polynomials used in an RLWE sample, analogous
to LWEParams.dimension.&lt;/li>
&lt;li>&lt;code>polyDegree&lt;/code>: the degree $N$ of the negacyclic polynomial modulus
$x^N + 1$.&lt;/li>
&lt;/ul>
&lt;h4 id="parameters-2">Parameters:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Parameter&lt;/th>
&lt;th style="text-align:center">C++ type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">cmod&lt;/td>
&lt;td style="text-align:center">&lt;code>IntegerAttr&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">dimension&lt;/td>
&lt;td style="text-align:center">&lt;code>unsigned&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">polyDegree&lt;/td>
&lt;td style="text-align:center">&lt;code>unsigned&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="unspecifiedbitfieldencodingattr">UnspecifiedBitFieldEncodingAttr&lt;/h3>
&lt;p>An attribute describing unspecified bit field encodings.&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>#lwe.unspecified_bit_field_encoding&amp;lt;
unsigned # cleartext_bitwidth
&amp;gt;
&lt;/code>&lt;/pre>&lt;p>See LWE_BitFieldEncoding for a description of bit field encodings.&lt;/p>
&lt;p>This attribute describes an unspecified bit field encoding; this is where
the starting bit position of the cleartext bit field is unspecified, but its
width is fixed. A noise growth analysis should be performed to determine the
optimal amount of bits needed for noise and padding to specify the bit field
encodings starting bit position.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;pre tabindex="0">&lt;code>#lwe_encoding = #lwe.unspecified_bit_field_encoding&amp;lt;cleartext_bitwidth=3&amp;gt;
%lwe_ciphertext = arith.constant &amp;lt;[1,2,3,4]&amp;gt; : tensor&amp;lt;4xi32, #lwe_encoding&amp;gt;
&lt;/code>&lt;/pre>&lt;h4 id="parameters-3">Parameters:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Parameter&lt;/th>
&lt;th style="text-align:center">C++ type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">cleartext_bitwidth&lt;/td>
&lt;td style="text-align:center">&lt;code>unsigned&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="inversecanonicalembeddingencodingattr">InverseCanonicalEmbeddingEncodingAttr&lt;/h3>
&lt;p>An attribute describing encoded RLWE plaintexts via the rounded inverse canonical embedding.&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>#lwe.inverse_canonical_embedding_encoding&amp;lt;
unsigned, # cleartext_start
unsigned # cleartext_bitwidth
&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Let $n$ be the degree of the polynomials in the plaintext space. An
&amp;ldquo;inverse canonical embedding encoding&amp;rdquo; of a list of real or complex values
$v_1, \dots, v_{n/2}$ is (almost) the inverse of the following decoding
map.&lt;/p>
&lt;p>Define a map $\tau_N$ that maps a polynomial $p \in \mathbb{Z}[x] / (x^N + 1)
\to \mathbb{C}^{N/2}$ by evaluating it at the following $N/2$ points,
where $\omega = e^{2 \pi i / 2N}$ is the primitive $2N$th root of unity:&lt;/p>
&lt;p>[
\omega, \omega^3, \omega^5, \dots, \omega^{N-1}
]&lt;/p>
&lt;p>Then the complete decoding operation is $\textup{Decode}(p) =
(1/\Delta)\tau_N(p)$, where $\Delta$ is a scaling parameter and $\tau_N$ is
the truncated canonical embedding above. The encoding operation is the
inverse of the decoding operation, with some caveats explained below.&lt;/p>
&lt;p>The map $\tau_N$ is derived from the so-called &lt;em>canonical embedding&lt;/em>
$\tau$, though in the standard canonical embedding, we evaluate at all odd
powers of the root of unity, $\omega, \omega^3, \dots, \omega^{2N-1}$. For
polynomials in the slightly larger space $\mathbb{R}[x] / (x^N + 1)$, the
image of the canonical embedding is the subspace $H \subset \mathbb{C}^N$
defined by tuples $(z_1, \dots, z_N)$ such that $\overline{z_i} =
\overline{z_{N-i+1}}$. Note that this property holds because polynomial
evaluation commutes with complex conjugates, and the second half of the
roots of unity evaluate are complex conjugates of the first half. The
converse, that any such tuple with complex conjugate symmetry has an
inverse under $\tau$ with all real coefficients, makes $\tau$ is a
bijection onto $H$. $\tau$ and its inverse are explicitly computable as
discrete Fourier Transforms.&lt;/p>
&lt;p>Because of the symmetry in canonical embedding for real polynomials, inputs
to this encoding can be represented as a list of $N/2$ complex points, with
the extra symmetric structure left implicit. $\tau_N$ and its inverse can
also be explicitly computed without need to expand the vectors to length
$N$.&lt;/p>
&lt;p>The rounding step is required to invert the decoding because, while
cleartexts must be (implicitly) in the subspace $H$, they need not be the
output of $\tau_N$ for an &lt;em>integer&lt;/em> polynomial. The rounding step ensures
we can use integer polynomial plaintexts for the FHE operations. There are
multiple rounding mechanisms, and this attribute does not specify which is
used, because in theory two ciphertexts that have used different roundings
are still compatible, though they may have different noise growth patterns.&lt;/p>
&lt;p>The scaling parameter $\Delta$ is specified by the &lt;code>cleartext_start&lt;/code> and
&lt;code>cleartext_bitwidth&lt;/code> parameters, which are applied coefficient-wise using
the same semantics as the &lt;code>bit_field_encoding&lt;/code>.&lt;/p>
&lt;p>This attribute can be used in multiple ways:&lt;/p>
&lt;ul>
&lt;li>On a &lt;code>poly.poly&lt;/code>, it asserts that the polynomial has been transformed
from a coefficient list using the canonical embedding.&lt;/li>
&lt;li>On a tensor of &lt;code>poly.poly&lt;/code>, it asserts that the tensor is an RLWE
ciphertext for some RLWE scheme that supports the approximate embedding
encoding.&lt;/li>
&lt;/ul>
&lt;p>A typical flow for the CKKS scheme using this encoding would be to apply an
inverse FFT operation to invert the canonical embedding to be a polynomial
with real coefficients, then encrypt scale the resulting polynomial&amp;rsquo;s
coefficients according to the scaling parameters, then round to get integer
coefficients.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;pre tabindex="0">&lt;code>#generator = #poly.polynomial&amp;lt;1 + x**1024&amp;gt;
#ring = #poly.ring&amp;lt;cmod=65536, ideal=#generator&amp;gt;
#lwe_encoding = #lwe.polynomial_evaluation_encoding&amp;lt;cleartext_start=30, cleartext_bitwidth=3&amp;gt;
%evals = arith.constant &amp;lt;[1, 2, 4, 5]&amp;gt; : tensor&amp;lt;4xi16&amp;gt;
// TODO(https://github.com/google/heir/issues/182): fix docs
// Note no `intt` operation exists in poly yet.
%poly1 = poly.intt %evals : tensor&amp;lt;4xi16&amp;gt; -&amp;gt; !poly.poly&amp;lt;#ring, #eval_encoding&amp;gt;
%poly2 = poly.intt %evals : tensor&amp;lt;4xi16&amp;gt; -&amp;gt; !poly.poly&amp;lt;#ring, #eval_encoding&amp;gt;
%rlwe_ciphertext = tensor.from_elements %poly1, %poly2 : tensor&amp;lt;2x!poly.poly&amp;lt;#ring, #eval_encoding&amp;gt;&amp;gt;
&lt;/code>&lt;/pre>&lt;h4 id="parameters-4">Parameters:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Parameter&lt;/th>
&lt;th style="text-align:center">C++ type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">cleartext_start&lt;/td>
&lt;td style="text-align:center">&lt;code>unsigned&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">cleartext_bitwidth&lt;/td>
&lt;td style="text-align:center">&lt;code>unsigned&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="polynomialcoefficientencodingattr">PolynomialCoefficientEncodingAttr&lt;/h3>
&lt;p>An attribute describing encoded RLWE plaintexts via coefficients.&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>#lwe.polynomial_coefficient_encoding&amp;lt;
unsigned, # cleartext_start
unsigned # cleartext_bitwidth
&amp;gt;
&lt;/code>&lt;/pre>&lt;p>A coefficient encoding of a list of integers asserts that the coefficients
of the polynomials contain the cleartexts, with the same semantics as
&lt;code>bit_field_encoding&lt;/code> for per-coefficient encodings.&lt;/p>
&lt;p>The presence of this attribute as the &lt;code>encoding&lt;/code> attribute of a tensor of
&lt;code>poly.poly&lt;/code> indicates that the tensor is an RLWE ciphertext for some RLWE
scheme that supports the coefficient encoding.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;pre tabindex="0">&lt;code>#generator = #poly.polynomial&amp;lt;1 + x**1024&amp;gt;
#ring = #poly.ring&amp;lt;cmod=65536, ideal=#generator&amp;gt;
#coeff_encoding = #lwe.polynomial_coefficient_encoding&amp;lt;cleartext_start=15, cleartext_bitwidth=4&amp;gt;
%poly1 = poly.from_tensor %coeffs1 : tensor&amp;lt;10xi16&amp;gt; -&amp;gt; !poly.poly&amp;lt;#ring&amp;gt;
%poly2 = poly.from_tensor %coeffs2 : tensor&amp;lt;10xi16&amp;gt; -&amp;gt; !poly.poly&amp;lt;#ring&amp;gt;
%rlwe_ciphertext = tensor.from_elements %poly1, %poly2 : tensor&amp;lt;2x!poly.poly&amp;lt;#ring&amp;gt;, #coeff_encoding&amp;gt;
&lt;/code>&lt;/pre>&lt;h4 id="parameters-5">Parameters:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Parameter&lt;/th>
&lt;th style="text-align:center">C++ type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">cleartext_start&lt;/td>
&lt;td style="text-align:center">&lt;code>unsigned&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">cleartext_bitwidth&lt;/td>
&lt;td style="text-align:center">&lt;code>unsigned&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="polynomialevaluationencodingattr">PolynomialEvaluationEncodingAttr&lt;/h3>
&lt;p>An attribute describing encoded RLWE plaintexts via evaluations at fixed points.&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>#lwe.polynomial_evaluation_encoding&amp;lt;
unsigned, # cleartext_start
unsigned # cleartext_bitwidth
&amp;gt;
&lt;/code>&lt;/pre>&lt;p>A &amp;ldquo;evaluation encoding&amp;rdquo; of a list of integers $(v_1, \dots, v_n)$ asserts
that $f(x_1 ) = v_1, \dots, f(x_n) = v_n$ for some implicit, but fixed and
distinct choice of inputs $x_i$. The encoded values are also scaled by a
scale factor, having the same semantics as &lt;code>bit_field_encoding&lt;/code>, but
applied entry-wise (to either the coefficient or evaluation representation).&lt;/p>
&lt;p>This attribute can be used in multiple ways:&lt;/p>
&lt;ul>
&lt;li>On a &lt;code>poly.poly&lt;/code>, it asserts that the polynomial has been transformed
from an evaluation tensor.&lt;/li>
&lt;li>On a tensor of &lt;code>poly.poly&lt;/code>, it asserts that the tensor is an RLWE
ciphertext for some RLWE scheme that supports the evaluation encoding.&lt;/li>
&lt;/ul>
&lt;p>A typical workflow for the BFV/BGV schemes using this encoding would be
to apply a INTT operation to the input list of cleartexts to convert from
evaluation form to coefficient form, then encrypt the resulting polynomial
in coefficient form, then apply NTT back to the evaluation form for faster
multiplication of ciphertexts.&lt;/p>
&lt;p>The points chosen are fixed to be the powers of a primitive root of unity
of the coefficient ring of the plaintext space, which allows one to use
NTT/INTT to tansform quickly between the coefficient and evaluation forms.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;pre tabindex="0">&lt;code>#generator = #poly.polynomial&amp;lt;1 + x**1024&amp;gt;
// note that the cmod should be chosen so as to ensure a primitive root of
// unity exists in the multiplicative group (Z / cmod Z)^*
#ring = #poly.ring&amp;lt;cmod=65536, ideal=#generator&amp;gt;
#lwe_encoding = #lwe.polynomial_evaluation_encoding&amp;lt;cleartext_start=30, cleartext_bitwidth=3&amp;gt;
%evals = arith.constant &amp;lt;[1, 2, 4, 5]&amp;gt; : tensor&amp;lt;4xi16&amp;gt;
// TODO(https://github.com/google/heir/issues/182): fix docs
// Note no `intt` operation exists in poly yet.
%poly1 = poly.intt %evals : tensor&amp;lt;4xi16&amp;gt; -&amp;gt; !poly.poly&amp;lt;#ring, #eval_encoding&amp;gt;
%poly2 = poly.intt %evals : tensor&amp;lt;4xi16&amp;gt; -&amp;gt; !poly.poly&amp;lt;#ring, #eval_encoding&amp;gt;
%rlwe_ciphertext = tensor.from_elements %poly1, %poly2 : tensor&amp;lt;2x!poly.poly&amp;lt;#ring, #eval_encoding&amp;gt;&amp;gt;
&lt;/code>&lt;/pre>&lt;h4 id="parameters-6">Parameters:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Parameter&lt;/th>
&lt;th style="text-align:center">C++ type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">cleartext_start&lt;/td>
&lt;td style="text-align:center">&lt;code>unsigned&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">cleartext_bitwidth&lt;/td>
&lt;td style="text-align:center">&lt;code>unsigned&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="lwe-types">LWE types&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="lweciphertexttype">LWECiphertextType&lt;/h3>
&lt;p>A type for LWE ciphertexts&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>!lwe.lwe_ciphertext&amp;lt;
::mlir::Attribute, # encoding
LWEParamsAttr # lwe_params
&amp;gt;
&lt;/code>&lt;/pre>&lt;p>A type for LWE ciphertexts.&lt;/p>
&lt;p>This type keeps track of the plaintext integer encoding for the LWE
Ciphertext to ensure proper decoding after decryption. It also keeps track
of the ring where the LWE ciphertext is defined, which provides information
on the ciphertext shape and the ring operations used in LWE operations.&lt;/p>
&lt;h4 id="parameters-7">Parameters:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Parameter&lt;/th>
&lt;th style="text-align:center">C++ type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">encoding&lt;/td>
&lt;td style="text-align:center">&lt;code>::mlir::Attribute&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">lwe_params&lt;/td>
&lt;td style="text-align:center">&lt;code>LWEParamsAttr&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="lweplaintexttype">LWEPlaintextType&lt;/h3>
&lt;p>A type for LWE plaintexts&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>!lwe.lwe_plaintext&amp;lt;
::mlir::Attribute # encoding
&amp;gt;
&lt;/code>&lt;/pre>&lt;p>A type for LWE plaintexts.&lt;/p>
&lt;p>This type keeps track of the plaintext integer encoding for the LWE
plaintext before it is encrypted.&lt;/p>
&lt;h4 id="parameters-8">Parameters:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Parameter&lt;/th>
&lt;th style="text-align:center">C++ type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">encoding&lt;/td>
&lt;td style="text-align:center">&lt;code>::mlir::Attribute&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="rlweciphertexttype">RLWECiphertextType&lt;/h3>
&lt;p>A type for RLWE ciphertexts&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>!lwe.rlwe_ciphertext&amp;lt;
::mlir::Attribute, # encoding
RLWEParamsAttr # rlwe_params
&amp;gt;
&lt;/code>&lt;/pre>&lt;h4 id="parameters-9">Parameters:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Parameter&lt;/th>
&lt;th style="text-align:center">C++ type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">encoding&lt;/td>
&lt;td style="text-align:center">&lt;code>::mlir::Attribute&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">rlwe_params&lt;/td>
&lt;td style="text-align:center">&lt;code>RLWEParamsAttr&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="rlweplaintexttype">RLWEPlaintextType&lt;/h3>
&lt;p>A type for RLWE plaintexts&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>!lwe.rlwe_plaintext&amp;lt;
::mlir::Attribute # encoding
&amp;gt;
&lt;/code>&lt;/pre>&lt;h4 id="parameters-10">Parameters:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Parameter&lt;/th>
&lt;th style="text-align:center">C++ type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">encoding&lt;/td>
&lt;td style="text-align:center">&lt;code>::mlir::Attribute&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="lwe-ops">LWE ops&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="lweencode-heirlweencodeop">&lt;code>lwe.encode&lt;/code> (heir::lwe::EncodeOp)&lt;/h3>
&lt;p>&lt;em>Encode an integer to yield an LWE plaintext&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `lwe.encode` $plaintext attr-dict `:` qualified(type($plaintext)) `to` qualified(type($output))
&lt;/code>&lt;/pre>&lt;p>Encode an integer to yield an LWE plaintext.&lt;/p>
&lt;p>This op uses a an encoding attribute to encode the bits of the integer into
an LWE plaintext value that can then be encrypted.&lt;/p>
&lt;p>Examples:&lt;/p>
&lt;pre tabindex="0">&lt;code>%Y = lwe.encode %value {encoding = #enc}: i1 to !lwe.lwe_plaintext&amp;lt;encoding = #enc, ring = #ring&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>encoding&lt;/code>&lt;/td>&lt;td>::mlir::Attribute&lt;/td>&lt;td>An attribute describing encoded LWE plaintexts using bit fields. or An attribute describing unspecified bit field encodings.&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>plaintext&lt;/code>&lt;/td>
&lt;td>signless-integer-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>A type for LWE plaintexts&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="lwetrivial_encrypt-heirlwetrivialencryptop">&lt;code>lwe.trivial_encrypt&lt;/code> (heir::lwe::TrivialEncryptOp)&lt;/h3>
&lt;p>&lt;em>Create a trivial encryption of a plaintext.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `lwe.trivial_encrypt` operands attr-dict `:` qualified(type(operands)) `to` qualified(type(results))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes-1">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>params&lt;/code>&lt;/td>&lt;td>::mlir::heir::lwe::LWEParamsAttr&lt;/td>&lt;td>&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-1">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>input&lt;/code>&lt;/td>
&lt;td>A type for LWE plaintexts&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-1">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>A type for LWE ciphertexts&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: LWEPasses</title><link>https://heir.dev/docs/passes/lwepasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/lwepasses/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-lwe-set-default-parameters">&lt;code>-lwe-set-default-parameters&lt;/code>&lt;/h3>
&lt;p>&lt;em>Set default parameters for LWE ops&lt;/em>&lt;/p>
&lt;p>This pass adds default parameters to all &lt;code>lwe&lt;/code> types as the &lt;code>lwe_params&lt;/code>
attribute, and for &lt;code>lwe&lt;/code> ops as the &lt;code>params&lt;/code> attribute, overriding any
existing attributes set with those names.&lt;/p>
&lt;p>This pass is primarily for testing purposes, and as a parameter provider
before a proper parameter selection mechanism is added. This pass should not
be used in production.&lt;/p>
&lt;p>The specific parameters are hard-coded in
&lt;code>lib/Dialect/LWE/Transforms/SetDefaultParameters.cpp&lt;/code>.&lt;/p></description></item><item><title>Docs: MemrefToArith</title><link>https://heir.dev/docs/passes/memreftoarith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/memreftoarith/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-expand-copy">&lt;code>-expand-copy&lt;/code>&lt;/h3>
&lt;p>&lt;em>Expands memref.copy ops to explicit affine loads and stores&lt;/em>&lt;/p>
&lt;p>This pass removes memref copy operations by expanding them to affine loads
and stores. This pass introduces affine loops over the dimensions of the
MemRef, so must be run prior to any affine loop unrolling in a pipeline.&lt;/p>
&lt;p>Input&lt;/p>
&lt;pre tabindex="0">&lt;code>module {
func.func @memref_copy() {
%alloc = memref.alloc() : memref&amp;lt;2x3xi32&amp;gt;
%alloc_0 = memref.alloc() : memref&amp;lt;2x3xi32&amp;gt;
memref.copy %alloc, %alloc_0 : memref&amp;lt;1x1xi32&amp;gt; to memref&amp;lt;1x1xi32&amp;gt;
}
}
&lt;/code>&lt;/pre>&lt;p>Output&lt;/p>
&lt;pre tabindex="0">&lt;code>module {
func.func @memref_copy() {
%alloc = memref.alloc() : memref&amp;lt;2x3xi32&amp;gt;
%alloc_0 = memref.alloc() : memref&amp;lt;2x3xi32&amp;gt;
affine.for %arg0 = 0 to 2 {
affine.for %arg1 = 0 to 3 {
%1 = affine.load %alloc[%arg0, %arg1] : memref&amp;lt;2x3xi32&amp;gt;
affine.store %1, %alloc_0[%arg0, %arg1] : memref&amp;lt;2x3xi32&amp;gt;
}
}
}
}
&lt;/code>&lt;/pre>&lt;h3 id="-extract-loop-body">&lt;code>-extract-loop-body&lt;/code>&lt;/h3>
&lt;p>&lt;em>Extracts logic of a loop bodies into functions.&lt;/em>&lt;/p>
&lt;p>This pass extracts logic in the inner body of for loops into functions.&lt;/p>
&lt;p>This pass requires that tensors are lowered to memref. It expects that a
loop body contains a number of affine.load statements used as inputs to the
extracted function, and a single affine.store used as the extracted
function&amp;rsquo;s output.&lt;/p>
&lt;p>Input&lt;/p>
&lt;pre tabindex="0">&lt;code>module {
func.func @loop_body() {
%c-128_i8 = arith.constant -128 : i8
%c127_i8 = arith.constant 127 : i8
%alloc_7 = memref.alloc() {alignment = 64 : i64} : memref&amp;lt;25x20x8xi8&amp;gt;
affine.for %arg1 = 0 to 25 {
affine.for %arg2 = 0 to 20 {
affine.for %arg3 = 0 to 8 {
%98 = affine.load %alloc_6[%arg1, %arg2, %arg3] : memref&amp;lt;25x20x8xi8&amp;gt;
%99 = arith.cmpi slt, %arg0, %c-128_i8 : i8
%100 = arith.select %99, %c-128_i8, %arg0 : i8
%101 = arith.cmpi sgt, %arg0, %c127_i8 : i8
%102 = arith.select %101, %c127_i8, %100 : i8
affine.store %102, %alloc_7[%arg1, %arg2, %arg3] : memref&amp;lt;25x20x8xi8&amp;gt;
}
}
}
}
}
&lt;/code>&lt;/pre>&lt;p>Output&lt;/p>
&lt;pre tabindex="0">&lt;code>module {
func.func @loop_body() {
%alloc_7 = memref.alloc() {alignment = 64 : i64} : memref&amp;lt;25x20x8xi8&amp;gt;
affine.for %arg1 = 0 to 25 {
affine.for %arg2 = 0 to 20 {
affine.for %arg3 = 0 to 8 {
%98 = affine.load %alloc_6[%arg1, %arg2, %arg3] : memref&amp;lt;25x20x8xi8&amp;gt;
%102 = func.call @__for_loop(%98) : (i8) -&amp;gt; i8
affine.store %102, %alloc_7[%arg1, %arg2, %arg3] : memref&amp;lt;25x20x8xi8&amp;gt;
}
}
}
}
func.func private @__for_loop(%arg0: i8) -&amp;gt; i8 {
%c-128_i8 = arith.constant -128 : i8
%c127_i8 = arith.constant 127 : i8
%99 = arith.cmpi slt, %arg0, %c-128_i8 : i8
%100 = arith.select %99, %c-128_i8, %arg0 : i8
%101 = arith.cmpi sgt, %arg0, %c127_i8 : i8
%102 = arith.select %101, %c127_i8, %100 : i8
return %102 : i8
}
}
&lt;/code>&lt;/pre>&lt;h4 id="options">Options&lt;/h4>
&lt;pre tabindex="0">&lt;code>-min-loop-size : Use this to control the minimum loop size to apply this pass
-min-body-size : Use this to control the minimum loop body size to apply this pass
&lt;/code>&lt;/pre>&lt;h3 id="-memref-global-replace">&lt;code>-memref-global-replace&lt;/code>&lt;/h3>
&lt;p>&lt;em>MemrefGlobalReplacePass forwards global memrefs accessors to arithmetic values&lt;/em>&lt;/p>
&lt;p>This pass forwards constant global MemRef values to referencing affine
loads. This pass requires that the MemRef global values are initialized as
constants and that the affine load access indices are constants (i.e. not
variadic). Unroll affine loops prior to running this pass.&lt;/p>
&lt;p>MemRef removal is required to remove any memory allocations from the input
model (for example, TensorFlow models contain global memory holding model
weights) to support FHE transpilation.&lt;/p>
&lt;p>Input&lt;/p>
&lt;pre tabindex="0">&lt;code>module {
memref.global &amp;#34;private&amp;#34; constant @__constant_8xi16 : memref&amp;lt;2x4xi16&amp;gt; = dense&amp;lt;[[-10, 20, 3, 4], [5, 6, 7, 8]]&amp;gt;
func.func @main() -&amp;gt; i16 {
%c1 = arith.constant 1 : index
%c2 = arith.constant 2 : index
%0 = memref.get_global @__constant_8xi16 : memref&amp;lt;2x4xi16&amp;gt;
%1 = affine.load %0[%c1, %c1 + %c2] : memref&amp;lt;2x4xi16&amp;gt;
return %1 : i16
}
}
&lt;/code>&lt;/pre>&lt;p>Output&lt;/p>
&lt;pre tabindex="0">&lt;code>module {
func.func @main() -&amp;gt; i16 {
%c1 = arith.constant 1 : index
%c2 = arith.constant 2 : index
%c8_i16 = arith.constant 8 : i16
return %c8_i16 : i16
}
}
&lt;/code>&lt;/pre>&lt;h3 id="-unroll-and-forward">&lt;code>-unroll-and-forward&lt;/code>&lt;/h3>
&lt;p>&lt;em>Loop unrolls and forwards stores to loads.&lt;/em>&lt;/p>
&lt;p>This pass processes the first function in a given module, and, starting from
the first loop, iteratively does the following:&lt;/p>
&lt;ol>
&lt;li>Fully unroll the loop.&lt;/li>
&lt;li>Scan for load ops. For each load op with a statically-inferrable access
index:&lt;/li>
&lt;li>Backtrack to the original memref alloc&lt;/li>
&lt;li>Find all store ops at the corresponding index (possibly transitively
through renames/subviews of the underlying alloc).&lt;/li>
&lt;li>Find the last store that occurs and forward it to the load.&lt;/li>
&lt;li>If the original memref is an input memref, then forward through any
renames to make the target load load directly from the argument memref
(instead of any subviews, say)&lt;/li>
&lt;li>Apply the same logic to any remaining loads not inside any for loop.&lt;/li>
&lt;/ol>
&lt;p>This pass requires that tensors are lowered to memref, and only supports
affine loops with affine.load/store ops.&lt;/p>
&lt;p>Memrefs that result from memref.get_global ops are excluded from
forwarding, even if they are loaded with a static index, and are instead
handled by memref-global-replace, which should be run after this pass.&lt;/p></description></item><item><title>Docs: Openfhe</title><link>https://heir.dev/docs/dialects/openfhe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/dialects/openfhe/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;p>The &lt;code>openfhe&lt;/code> dialect is an exit dialect for generating c++ code against the OpenFHE library API.&lt;/p>
&lt;p>See &lt;a href="https://github.com/openfheorg/openfhe-development">https://github.com/openfheorg/openfhe-development&lt;/a>&lt;/p>
&lt;h2 id="openfhe-types">Openfhe types&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="cryptocontexttype">CryptoContextType&lt;/h3>
&lt;p>The CryptoContext required to perform homomorphic operations in OpenFHE.&lt;/p>
&lt;p>Syntax: &lt;code>!openfhe.crypto_context&lt;/code>&lt;/p>
&lt;h3 id="publickeytype">PublicKeyType&lt;/h3>
&lt;p>The public key required to encrypt plaintext in OpenFHE.&lt;/p>
&lt;p>Syntax: &lt;code>!openfhe.public_key&lt;/code>&lt;/p>
&lt;h2 id="openfhe-ops">Openfhe ops&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="openfheadd-heiropenfheaddop">&lt;code>openfhe.add&lt;/code> (heir::openfhe::AddOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `openfhe.add` operands attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cryptoContext&lt;/code>&lt;/td>
&lt;td>The CryptoContext required to perform homomorphic operations in OpenFHE.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>lhs&lt;/code>&lt;/td>
&lt;td>A type for RLWE ciphertexts&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>rhs&lt;/code>&lt;/td>
&lt;td>A type for RLWE ciphertexts&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>A type for RLWE ciphertexts&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="openfheencrypt-heiropenfheencryptop">&lt;code>openfhe.encrypt&lt;/code> (heir::openfhe::EncryptOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `openfhe.encrypt` operands attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-1">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cryptoContext&lt;/code>&lt;/td>
&lt;td>The CryptoContext required to perform homomorphic operations in OpenFHE.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>plaintext&lt;/code>&lt;/td>
&lt;td>A type for RLWE plaintexts&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>publicKey&lt;/code>&lt;/td>
&lt;td>The public key required to encrypt plaintext in OpenFHE.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-1">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>A type for RLWE ciphertexts&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="openfhemulconst-heiropenfhemulconstop">&lt;code>openfhe.mulconst&lt;/code> (heir::openfhe::MulConstOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `openfhe.mulconst` operands attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-2">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cryptoContext&lt;/code>&lt;/td>
&lt;td>The CryptoContext required to perform homomorphic operations in OpenFHE.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>ciphertext&lt;/code>&lt;/td>
&lt;td>A type for RLWE ciphertexts&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>constant&lt;/code>&lt;/td>
&lt;td>64-bit signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-2">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>A type for RLWE ciphertexts&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="openfhemul-heiropenfhemulop">&lt;code>openfhe.mul&lt;/code> (heir::openfhe::MulOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `openfhe.mul` operands attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-3">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cryptoContext&lt;/code>&lt;/td>
&lt;td>The CryptoContext required to perform homomorphic operations in OpenFHE.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>lhs&lt;/code>&lt;/td>
&lt;td>A type for RLWE ciphertexts&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>rhs&lt;/code>&lt;/td>
&lt;td>A type for RLWE ciphertexts&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-3">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>A type for RLWE ciphertexts&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="openfhemulplain-heiropenfhemulplainop">&lt;code>openfhe.mulplain&lt;/code> (heir::openfhe::MulPlainOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `openfhe.mulplain` operands attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-4">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cryptoContext&lt;/code>&lt;/td>
&lt;td>The CryptoContext required to perform homomorphic operations in OpenFHE.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>ciphertext&lt;/code>&lt;/td>
&lt;td>A type for RLWE ciphertexts&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>plaintext&lt;/code>&lt;/td>
&lt;td>A type for RLWE plaintexts&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-4">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>A type for RLWE ciphertexts&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="openfhenegate-heiropenfhenegateop">&lt;code>openfhe.negate&lt;/code> (heir::openfhe::NegateOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `openfhe.negate` operands attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-5">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cryptoContext&lt;/code>&lt;/td>
&lt;td>The CryptoContext required to perform homomorphic operations in OpenFHE.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>ciphertext&lt;/code>&lt;/td>
&lt;td>A type for RLWE ciphertexts&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-5">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>A type for RLWE ciphertexts&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="openfherot-heiropenfherotop">&lt;code>openfhe.rot&lt;/code> (heir::openfhe::RotOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `openfhe.rot` operands attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-6">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cryptoContext&lt;/code>&lt;/td>
&lt;td>The CryptoContext required to perform homomorphic operations in OpenFHE.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>ciphertext&lt;/code>&lt;/td>
&lt;td>A type for RLWE ciphertexts&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>rot&lt;/code>&lt;/td>
&lt;td>32-bit signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-6">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>A type for RLWE ciphertexts&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="openfhesub-heiropenfhesubop">&lt;code>openfhe.sub&lt;/code> (heir::openfhe::SubOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `openfhe.sub` operands attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-7">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cryptoContext&lt;/code>&lt;/td>
&lt;td>The CryptoContext required to perform homomorphic operations in OpenFHE.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>lhs&lt;/code>&lt;/td>
&lt;td>A type for RLWE ciphertexts&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>rhs&lt;/code>&lt;/td>
&lt;td>A type for RLWE ciphertexts&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-7">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>A type for RLWE ciphertexts&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: PolyExt</title><link>https://heir.dev/docs/dialects/polyext/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/dialects/polyext/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;p>The PolyExt dialect is a place for &amp;ldquo;external&amp;rdquo; operations on
&lt;code>mlir::heir::polynomial::Polynomial&lt;/code>.&lt;/p>
&lt;h2 id="polyext-ops">PolyExt ops&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="poly_extcmod_switch-heirpoly_extcmodswitchop">&lt;code>poly_ext.cmod_switch&lt;/code> (heir::poly_ext::CModSwitchOp)&lt;/h3>
&lt;p>&lt;em>Move polynomial into a ring with different &lt;code>cmod&lt;/code> by scaling polynomial coefficients proportionally&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `poly_ext.cmod_switch` $x attr-dict `:` type($x) `-&amp;gt;` type($output)
&lt;/code>&lt;/pre>&lt;p>&lt;code>poly_ext.cmod_switch&lt;/code> &amp;ldquo;moves&amp;rdquo; polynomial $x$ from ring $Z/QZ[X]/(f(x))$ to the ring $Z/qZ[X]/(f(x))$.
The move is done by scaling the polynomial coefficients by $q/Q$ and &amp;ldquo;rounding&amp;rdquo; so input and output coufficients are congruent modulo &lt;code>congruence_modulus&lt;/code> $t$.
The resulting polynomial $\tilde{x} \approx (q/Q)x$ and $\tilde{x} \equiv x \mod t$.&lt;/p>
&lt;p>Traits: AlwaysSpeculatableImplTrait, Elementwise, Scalarizable, Tensorizable, Vectorizable&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>congruence_modulus&lt;/code>&lt;/td>&lt;td>::mlir::IntegerAttr&lt;/td>&lt;td>An Attribute containing a integer value&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>x&lt;/code>&lt;/td>
&lt;td>polynomial-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>polynomial-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Polynomial</title><link>https://heir.dev/docs/dialects/polynomial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/dialects/polynomial/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;p>The Polynomial dialect defines single-variable polynomial types and
operations.&lt;/p>
&lt;p>The simplest use of this dialect is to do math in a polynomial ring &lt;code>R[x]&lt;/code>,
where &lt;code>R&lt;/code> is another MLIR integer type like &lt;code>u32&lt;/code>, and lower to &lt;code>arith&lt;/code>.&lt;/p>
&lt;p>More generally, this dialect represent polynomial operations in a quotient
polynomial ring &lt;code>Z/qZ[X]/(f(x))&lt;/code> for some integer &lt;code>q&lt;/code> and polynomial &lt;code>f(x)&lt;/code>.
Polyomials &lt;code>p(x), q(x)&lt;/code> are equal in this ring if they have the same remainder
when dividing by &lt;code>f(x)&lt;/code>. The canonical representative for a polynomial &lt;code>p(x)&lt;/code>
is has degree less than &lt;code>deg(f(x))&lt;/code>. When a modulus is given, ring operations
are polynomial addition and multiplication performed with reductions modulo
&lt;code>f(x)&lt;/code> and &lt;code>q&lt;/code>.&lt;/p>
&lt;h2 id="polynomial-attributes">Polynomial attributes&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="polynomialattr">PolynomialAttr&lt;/h3>
&lt;p>An attribute containing a single-variable polynomial.&lt;/p>
&lt;p>#poly = #polynomial.poly&amp;lt;x**1024 + 1&amp;gt;&lt;/p>
&lt;h4 id="parameters">Parameters:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Parameter&lt;/th>
&lt;th style="text-align:center">C++ type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">value&lt;/td>
&lt;td style="text-align:center">&lt;code>Polynomial&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="ringattr">RingAttr&lt;/h3>
&lt;p>An attribute specifying a ring.&lt;/p>
&lt;p>An attribute specifying a polynomial quotient ring with integer
coefficients, $\mathbb{Z}/n\mathbb{Z}[x] / (p(x))$.&lt;/p>
&lt;p>&lt;code>cmod&lt;/code> is the coefficient modulus $n$, and &lt;code>ideal&lt;/code> is the ring ideal
$(p(x))$. Because all ideals in a single-variable polynomial ring are
principal, the ideal is defined by a single polynomial.&lt;/p>
&lt;p>#ring = #polynomial.ring&amp;lt;cmod=1234, ideal=#polynomial.polynomial&amp;lt;x**1024 + 1&amp;raquo;&lt;/p>
&lt;h4 id="parameters-1">Parameters:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Parameter&lt;/th>
&lt;th style="text-align:center">C++ type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">cmod&lt;/td>
&lt;td style="text-align:center">&lt;code>IntegerAttr&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">ideal&lt;/td>
&lt;td style="text-align:center">&lt;code>Polynomial&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="polynomial-types">Polynomial types&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="polynomialtype">PolynomialType&lt;/h3>
&lt;p>An element of a polynomial quotient ring&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>!polynomial.polynomial&amp;lt;
::mlir::heir::polynomial::RingAttr, # ring
Attribute # encoding
&amp;gt;
&lt;/code>&lt;/pre>&lt;p>A type for polynomials in a polynomial quotient ring.&lt;/p>
&lt;h4 id="parameters-2">Parameters:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Parameter&lt;/th>
&lt;th style="text-align:center">C++ type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">ring&lt;/td>
&lt;td style="text-align:center">&lt;code>::mlir::heir::polynomial::RingAttr&lt;/code>&lt;/td>
&lt;td>An attribute specifying a ring.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">encoding&lt;/td>
&lt;td style="text-align:center">&lt;code>Attribute&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="polynomial-ops">Polynomial ops&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="polynomialadd-heirpolynomialaddop">&lt;code>polynomial.add&lt;/code> (heir::polynomial::AddOp)&lt;/h3>
&lt;p>&lt;em>Addition operation between polynomials.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `polynomial.add` `(` operands `)` attr-dict `:` qualified(type($output))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait, Commutative, Elementwise, SameOperandsAndResultType, Scalarizable, Tensorizable, Vectorizable&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>lhs&lt;/code>&lt;/td>
&lt;td>polynomial-like&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>rhs&lt;/code>&lt;/td>
&lt;td>polynomial-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>polynomial-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="polynomialconstant-heirpolynomialconstantop">&lt;code>polynomial.constant&lt;/code> (heir::polynomial::ConstantOp)&lt;/h3>
&lt;p>&lt;em>Define a constant polynomial via an attribute.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `polynomial.constant` $input attr-dict `:` qualified(type($output))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>input&lt;/code>&lt;/td>&lt;td>::mlir::heir::polynomial::PolynomialAttr&lt;/td>&lt;td>An attribute containing a single-variable polynomial.&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="results-1">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>An element of a polynomial quotient ring&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="polynomialfrom_tensor-heirpolynomialfromtensorop">&lt;code>polynomial.from_tensor&lt;/code> (heir::polynomial::FromTensorOp)&lt;/h3>
&lt;p>&lt;em>Creates a polynomial from integer coefficients stored in a tensor.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `polynomial.from_tensor` $input attr-dict `:` type($input) `-&amp;gt;` qualified(type($output))
&lt;/code>&lt;/pre>&lt;p>&lt;code>polynomial.from_tensor&lt;/code> creates a polynomial value from a tensor of coefficients.
The input tensor must list the coefficients in degree-increasing order.&lt;/p>
&lt;p>The input one-dimensional tensor may have size at most the degree of the
ring&amp;rsquo;s ideal generator polynomial, with smaller dimension implying that
all higher-degree terms have coefficient zero.&lt;/p>
&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-1">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>input&lt;/code>&lt;/td>
&lt;td>ranked tensor of integer values&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-2">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>An element of a polynomial quotient ring&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="polynomialleading_term-heirpolynomialleadingtermop">&lt;code>polynomial.leading_term&lt;/code> (heir::polynomial::LeadingTermOp)&lt;/h3>
&lt;p>&lt;em>Compute the leading term of the polynomial.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `polynomial.leading_term` operands attr-dict `:` qualified(type($input)) `-&amp;gt;` `(` type($degree) `,` type($coefficient) `)`
&lt;/code>&lt;/pre>&lt;p>The degree of a polynomial is the largest $k$ for which the coefficient
$a_k$ of $x^k$ is nonzero. The leading term is the term $a_k x^k$, which
this op represents as a pair of results.&lt;/p>
&lt;h4 id="operands-2">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>input&lt;/code>&lt;/td>
&lt;td>An element of a polynomial quotient ring&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-3">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>degree&lt;/code>&lt;/td>
&lt;td>index&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>coefficient&lt;/code>&lt;/td>
&lt;td>integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="polynomialmonomial_mul-heirpolynomialmonomialmulop">&lt;code>polynomial.monomial_mul&lt;/code> (heir::polynomial::MonomialMulOp)&lt;/h3>
&lt;p>&lt;em>Multiply a polynomial by a monic monomial.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `polynomial.monomial_mul` operands attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>In the ring of polynomials mod $x^n - 1$, &lt;code>monomial_mul&lt;/code> can be interpreted
as a cyclic shift of the coefficients of the polynomial. For some rings,
this results in optimized lowerings that involve rotations and rescaling
of the coefficients of the input.&lt;/p>
&lt;p>Interfaces: InferTypeOpInterface&lt;/p>
&lt;h4 id="operands-3">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>input&lt;/code>&lt;/td>
&lt;td>An element of a polynomial quotient ring&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>monomialDegree&lt;/code>&lt;/td>
&lt;td>index&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-4">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>An element of a polynomial quotient ring&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="polynomialmonomial-heirpolynomialmonomialop">&lt;code>polynomial.monomial&lt;/code> (heir::polynomial::MonomialOp)&lt;/h3>
&lt;p>&lt;em>Create a polynomial that consists of a single monomial.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `polynomial.monomial` operands attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;h4 id="operands-4">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>coefficient&lt;/code>&lt;/td>
&lt;td>integer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>degree&lt;/code>&lt;/td>
&lt;td>index&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-5">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>An element of a polynomial quotient ring&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="polynomialmul-heirpolynomialmulop">&lt;code>polynomial.mul&lt;/code> (heir::polynomial::MulOp)&lt;/h3>
&lt;p>&lt;em>Multiplication operation between polynomials.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `polynomial.mul` `(` operands `)` attr-dict `:` qualified(type($output))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait, Commutative, Elementwise, SameOperandsAndResultType, Scalarizable, Tensorizable, Vectorizable&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-5">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>lhs&lt;/code>&lt;/td>
&lt;td>polynomial-like&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>rhs&lt;/code>&lt;/td>
&lt;td>polynomial-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-6">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>polynomial-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="polynomialmul_scalar-heirpolynomialmulscalarop">&lt;code>polynomial.mul_scalar&lt;/code> (heir::polynomial::MulScalarOp)&lt;/h3>
&lt;p>&lt;em>Multiplication by a scalar of the field.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `polynomial.mul_scalar` operands attr-dict `:` qualified(type($polynomial)) `,` type($scalar)
&lt;/code>&lt;/pre>&lt;p>Traits: Elementwise, Scalarizable, Tensorizable, Vectorizable&lt;/p>
&lt;p>Interfaces: InferTypeOpInterface&lt;/p>
&lt;h4 id="operands-6">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>polynomial&lt;/code>&lt;/td>
&lt;td>polynomial-like&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>scalar&lt;/code>&lt;/td>
&lt;td>integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-7">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>polynomial-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="polynomialsub-heirpolynomialsubop">&lt;code>polynomial.sub&lt;/code> (heir::polynomial::SubOp)&lt;/h3>
&lt;p>&lt;em>Subtraction operation between polynomials.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `polynomial.sub` `(` operands `)` attr-dict `:` qualified(type($output))
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait, Elementwise, SameOperandsAndResultType, Scalarizable, Tensorizable, Vectorizable&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-7">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>lhs&lt;/code>&lt;/td>
&lt;td>polynomial-like&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>rhs&lt;/code>&lt;/td>
&lt;td>polynomial-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-8">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>polynomial-like&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="polynomialto_tensor-heirpolynomialtotensorop">&lt;code>polynomial.to_tensor&lt;/code> (heir::polynomial::ToTensorOp)&lt;/h3>
&lt;p>&lt;em>Creates a tensor containing the coefficients of a polynomial.&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `polynomial.to_tensor` $input attr-dict `:` qualified(type($input)) `-&amp;gt;` type($output)
&lt;/code>&lt;/pre>&lt;p>&lt;code>polynomial.to_tensor&lt;/code> creates a tensor value containing the coefficients of the
input polynomial. The output tensor contains the coefficients in
degree-increasing order.&lt;/p>
&lt;p>Operations that act on the coefficients of a polynomial, such as extracting
a specific coefficient or extracting a range of coefficients, should be
implemented by composing &lt;code>to_tensor&lt;/code> with the relevant &lt;code>tensor&lt;/code> dialect
ops.&lt;/p>
&lt;p>The output tensor has shape equal to the degree of the ring&amp;rsquo;s ideal
generator polynomial, including zeroes.&lt;/p>
&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-8">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>input&lt;/code>&lt;/td>
&lt;td>An element of a polynomial quotient ring&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-9">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>ranked tensor of integer values&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: PolynomialToStandard</title><link>https://heir.dev/docs/passes/polynomialtostandard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/polynomialtostandard/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-polynomial-to-standard">&lt;code>-polynomial-to-standard&lt;/code>&lt;/h3>
&lt;p>&lt;em>Lower &lt;code>polynomial&lt;/code> to standard MLIR dialects.&lt;/em>&lt;/p>
&lt;p>This pass lowers the &lt;code>polynomial&lt;/code> dialect to standard MLIR, a mixture of
affine, tensor, and arith.&lt;/p></description></item><item><title>: Search Results</title><link>https://heir.dev/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/search/</guid><description/></item><item><title>Docs: Secret</title><link>https://heir.dev/docs/dialects/secret/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/dialects/secret/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;p>Secret is a dialect for computations that operate on encrypted data.&lt;/p>
&lt;p>Secret is intended to serve as a scheme-agnostic front-end for the HEIR
ecosystem of dialects. It is supposed to be fully interoperable with the
rest of MLIR via secret.generic, while lower-level HEIR dialects would have
custom types for arithmetic on secret integers of various bit widths.&lt;/p>
&lt;h2 id="secret-types">Secret types&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="secrettype">SecretType&lt;/h3>
&lt;p>A secret value&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>!secret.secret&amp;lt;
Type # valueType
&amp;gt;
&lt;/code>&lt;/pre>&lt;p>A generic wrapper around another MLIR type, representing an encrypted value
but not specifying the manner of encryption. This is useful in HEIR because
the compiler may choose various details of the FHE scheme based on the
properties of the input program, the backend target hardware, and cost
models of the various passes.&lt;/p>
&lt;h4 id="parameters">Parameters:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Parameter&lt;/th>
&lt;th style="text-align:center">C++ type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">valueType&lt;/td>
&lt;td style="text-align:center">&lt;code>Type&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="secret-ops">Secret ops&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="secretcast-heirsecretcastop">&lt;code>secret.cast&lt;/code> (heir::secret::CastOp)&lt;/h3>
&lt;p>&lt;em>A placeholder cast from one secret type to another&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `secret.cast` $input attr-dict `:` qualified(type($input)) `to` qualified(type($output))
&lt;/code>&lt;/pre>&lt;p>A &lt;code>cast&lt;/code> operation represents a type cast from one secret type to another,
that is used to enable the intermixing of various equivalent secret types
before a lower-level FHE scheme has been chosen.&lt;/p>
&lt;p>For example, &lt;code>secret.cast&lt;/code> can be used to convert a &lt;code>secret&amp;lt;i8&amp;gt;&lt;/code> to a
&lt;code>secret&amp;lt;tensor&amp;lt;8xi1&amp;gt;&amp;gt;&lt;/code> as a compatibility layer between boolean and
non-boolean parts of a program. The pass that later lowers the IR to
specific FHE schemes would need to replace these casts with appropriate
scheme-specific operations, and it is left to those later passes to
determine which casts are considered valid.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mlir" data-lang="mlir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%result&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>cast &lt;span style="color:#000">%0&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i8&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> to &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i1&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%result2&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>cast &lt;span style="color:#000">%0&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i8&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> to &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">tensor&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2x&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i4&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>input&lt;/code>&lt;/td>
&lt;td>A secret value&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>A secret value&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="secretconceal-heirsecretconcealop">&lt;code>secret.conceal&lt;/code> (heir::secret::ConcealOp)&lt;/h3>
&lt;p>&lt;em>Convert a non-secret value into a secret&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `secret.conceal` $cleartext attr-dict `:` type($cleartext) `-&amp;gt;` type($output)
&lt;/code>&lt;/pre>&lt;p>Convert a value to a secret containing the same value.&lt;/p>
&lt;p>This op represents a scheme-agnostic encryption operation, as well as a
&amp;ldquo;trivial encryption&amp;rdquo; operation which is needed for some FHE schemes. This
op is also useful for type materialization in the dialect conversion
framework.&lt;/p>
&lt;p>Examples:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mlir" data-lang="mlir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%Y&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>conceal &lt;span style="color:#000">%value&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span> &lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-1">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cleartext&lt;/code>&lt;/td>
&lt;td>any type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-1">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>A secret value&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="secretgeneric-heirsecretgenericop">&lt;code>secret.generic&lt;/code> (heir::secret::GenericOp)&lt;/h3>
&lt;p>&lt;em>Lift a plaintext computation to operate on secrets.&lt;/em>&lt;/p>
&lt;p>&lt;code>secret.generic&lt;/code> lifts a plaintext computation to operate on one or more
secrets. The lifted computation is represented as a region containing a
single block terminated by &lt;code>secret.yield&lt;/code>. The arguments of the &lt;code>secret.generic&lt;/code>
may include one or more &lt;code>!secret.secret&lt;/code> types. The arguments of the block
in the op&amp;rsquo;s body correspond to the underlying plaintext types of the secrets.&lt;/p>
&lt;p>&lt;code>secret.generic&lt;/code> is not isolated from above, so you may directly reference
values in the enclosing scope. This is required to support using
&lt;code>secret.generic&lt;/code> inside of ops with &lt;code>AffineScope&lt;/code>, while having the body
of the generic use the induction variables defined by the affine scope.&lt;/p>
&lt;p>Basic examples:&lt;/p>
&lt;p>Add two secret integers together&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mlir" data-lang="mlir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%Z&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>generic ins&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">%X&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%Y&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;,&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f57900">^bb0&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">%x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%y&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%z&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>addi &lt;span style="color:#000">%x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%y&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>yield &lt;span style="color:#000">%z&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">(!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add a secret value with a plaintext value. I.e., not all arguments to the
op need be secret.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mlir" data-lang="mlir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%Z&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>generic ins&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">%X&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%Y&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f57900">^bb0&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">%x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%y&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%z&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>addi &lt;span style="color:#000">%x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%y&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>yield &lt;span style="color:#000">%z&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">(!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The same as above, but the plaintext op is not passed through the basic
block.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mlir" data-lang="mlir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%y&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">constant&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%Z&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>generic ins&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">%Y&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f57900">^bb0&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">%y&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%z&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>addi &lt;span style="color:#000">%x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%y&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>yield &lt;span style="color:#000">%z&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">(!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Traits: SingleBlock, SingleBlockImplicitTerminator&lt;YieldOp>&lt;/p>
&lt;h4 id="operands-2">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>inputs&lt;/code>&lt;/td>
&lt;td>variadic of any type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-2">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>results&lt;/code>&lt;/td>
&lt;td>variadic of any type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="secretreveal-heirsecretrevealop">&lt;code>secret.reveal&lt;/code> (heir::secret::RevealOp)&lt;/h3>
&lt;p>&lt;em>Convert a secret value into a non-secret&lt;/em>&lt;/p>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `secret.reveal` $input attr-dict `:` type($input) `-&amp;gt;` type($cleartext)
&lt;/code>&lt;/pre>&lt;p>Convert a secret into a non-secret containing the same value.&lt;/p>
&lt;p>This op represents a scheme-agnostic decryption operation. This op is also
useful for target materialization in the dialect conversion framework.&lt;/p>
&lt;p>Examples:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mlir" data-lang="mlir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">%Y&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>reveal &lt;span style="color:#000">%secret_value&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-3">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>input&lt;/code>&lt;/td>
&lt;td>A secret value&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-3">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cleartext&lt;/code>&lt;/td>
&lt;td>any type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="secretyield-heirsecretyieldop">&lt;code>secret.yield&lt;/code> (heir::secret::YieldOp)&lt;/h3>
&lt;p>&lt;em>Secret yield operation&lt;/em>&lt;/p>
&lt;p>&lt;code>secret.yield&lt;/code> is a special terminator operation for blocks inside regions
in &lt;code>secret&lt;/code> generic ops. It returns the cleartext value of the
corresponding private computation to the immediately enclosing &lt;code>secret&lt;/code>
generic op.&lt;/p>
&lt;p>Traits: AlwaysSpeculatableImplTrait, HasParent&lt;GenericOp>, ReturnLike, Terminator&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface), RegionBranchTerminatorOpInterface&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-4">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>values&lt;/code>&lt;/td>
&lt;td>variadic of any type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: SecretizePasses</title><link>https://heir.dev/docs/passes/secretizepasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/secretizepasses/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-secretize">&lt;code>-secretize&lt;/code>&lt;/h3>
&lt;p>&lt;em>Adds secret argument attributes to entry function&lt;/em>&lt;/p>
&lt;p>Adds a secret.secret attribute argument to each argument in the entry
function of an MLIR module. By default, the function is &lt;code>main&lt;/code>. This may be
overridden with the option -entry-function=top_level_func.&lt;/p>
&lt;h4 id="options">Options&lt;/h4>
&lt;pre tabindex="0">&lt;code>-entry-function : entry function of the module
&lt;/code>&lt;/pre>&lt;h3 id="-wrap-generic">&lt;code>-wrap-generic&lt;/code>&lt;/h3>
&lt;p>&lt;em>Wraps regions using secret args in secret.generic bodies&lt;/em>&lt;/p>
&lt;p>This pass wraps function regions of &lt;code>func.func&lt;/code> that use secret arguments in
&lt;code>secret.generic&lt;/code> bodies.&lt;/p>
&lt;p>Secret arguments are annotated using a &lt;code>secret.secret&lt;/code> argument attribute.
This pass converts these to secret types and then inserts a &lt;code>secret.generic&lt;/code>
body to hold the functions region. The output type is also converted to a
secret.&lt;/p>
&lt;p>Example input:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mlir" data-lang="mlir">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">@main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">%arg0&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">})&lt;/span> &lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%0&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">constant&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%1&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>addi &lt;span style="color:#000">%0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%arg0&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">%1&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mlir" data-lang="mlir">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">@main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">%arg0&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;)&lt;/span> &lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%0&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>generic ins&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">%arg0&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f57900">^bb0&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">%arg1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%1&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">constant&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">%2&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> arith&lt;span style="color:#000;font-weight:bold">.&lt;/span>addi &lt;span style="color:#000">%0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">%arg1&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>yield &lt;span style="color:#000">%2&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">%0&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>secret&lt;span style="color:#000;font-weight:bold">.&lt;/span>secret&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">i32&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: SecretPasses</title><link>https://heir.dev/docs/passes/secretpasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/secretpasses/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-secret-capture-generic-ambient-scope">&lt;code>-secret-capture-generic-ambient-scope&lt;/code>&lt;/h3>
&lt;p>&lt;em>Capture the ambient scope used in a secret.generic&lt;/em>&lt;/p>
&lt;p>For each value used in the body of a &lt;code>secret.generic&lt;/code> op, which is defined
in the ambient scope outside the &lt;code>generic&lt;/code>, add it to the argument list of
the &lt;code>generic&lt;/code>.&lt;/p>
&lt;h3 id="-secret-distribute-generic">&lt;code>-secret-distribute-generic&lt;/code>&lt;/h3>
&lt;p>&lt;em>Distribute &lt;code>generic&lt;/code> ops through their bodies.&lt;/em>&lt;/p>
&lt;p>Converts &lt;code>generic&lt;/code> ops whose region contains many ops into smaller
sequences of generic ops whose regions contain a single op, dropping the
&lt;code>generic&lt;/code> part from any resulting &lt;code>generic&lt;/code> ops that have no
&lt;code>secret.secret&lt;/code> inputs. If the op has associated regions, and the operands
are not secret, then the generic is distributed recursively through the
op&amp;rsquo;s regions as well.&lt;/p>
&lt;p>This pass is intended to be used as part of a front-end pipeline, where a
program that operates on a secret type annotates the input to a region as
&lt;code>secret&lt;/code>, and then wraps the contents of the region in a single large
&lt;code>secret.generic&lt;/code>, then uses this pass to simplify it.&lt;/p>
&lt;p>The &lt;code>distribute-through&lt;/code> option allows one to specify a comma-separated
list of op names (e.g., &lt;code>distribute-thorugh=&amp;quot;affine.for,scf.if&amp;quot;&lt;/code>), which
limits the distribution to only pass through those ops. If unset, all ops
are distributed through when possible.&lt;/p>
&lt;h4 id="options">Options&lt;/h4>
&lt;pre tabindex="0">&lt;code>-distribute-through : comma-separated list of ops that should be distributed through
&lt;/code>&lt;/pre>&lt;h3 id="-secret-forget-secrets">&lt;code>-secret-forget-secrets&lt;/code>&lt;/h3>
&lt;p>&lt;em>Convert secret types to standard types&lt;/em>&lt;/p>
&lt;p>Drop the &lt;code>secret&amp;lt;...&amp;gt;&lt;/code> type from the IR, replacing it with the contained
type and the corresponding cleartext computation.&lt;/p></description></item><item><title>Docs: TfheRust</title><link>https://heir.dev/docs/dialects/tfherust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/dialects/tfherust/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;p>The &lt;code>thfe_rust&lt;/code> dialect is an exit dialect for generating rust code against the tfhe-rs library API.&lt;/p>
&lt;p>See &lt;a href="https://github.com/zama-ai/tfhe-rs">https://github.com/zama-ai/tfhe-rs&lt;/a>&lt;/p>
&lt;h2 id="tfherust-types">TfheRust types&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="boolserverkeytype">BoolServerKeyType&lt;/h3>
&lt;p>The boolean server key required to perform homomorphic operations.&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.bool_server_key&lt;/code>&lt;/p>
&lt;h3 id="encryptedbooltype">EncryptedBoolType&lt;/h3>
&lt;p>An encrypted Boolean corresponding to tfhe-rs&amp;rsquo;s FHEBool type&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.eb&lt;/code>&lt;/p>
&lt;h3 id="encryptedint8type">EncryptedInt8Type&lt;/h3>
&lt;p>An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt8 type&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.ei8&lt;/code>&lt;/p>
&lt;h3 id="encryptedint16type">EncryptedInt16Type&lt;/h3>
&lt;p>An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt16 type&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.ei16&lt;/code>&lt;/p>
&lt;h3 id="encryptedint32type">EncryptedInt32Type&lt;/h3>
&lt;p>An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt32 type&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.ei32&lt;/code>&lt;/p>
&lt;h3 id="encryptedint64type">EncryptedInt64Type&lt;/h3>
&lt;p>An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt64 type&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.ei64&lt;/code>&lt;/p>
&lt;h3 id="encryptedint128type">EncryptedInt128Type&lt;/h3>
&lt;p>An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt128 type&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.ei128&lt;/code>&lt;/p>
&lt;h3 id="encryptedint256type">EncryptedInt256Type&lt;/h3>
&lt;p>An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt256 type&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.ei256&lt;/code>&lt;/p>
&lt;h3 id="encrypteduint2type">EncryptedUInt2Type&lt;/h3>
&lt;p>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint2 type&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.eui2&lt;/code>&lt;/p>
&lt;h3 id="encrypteduint3type">EncryptedUInt3Type&lt;/h3>
&lt;p>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint3 type&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.eui3&lt;/code>&lt;/p>
&lt;h3 id="encrypteduint4type">EncryptedUInt4Type&lt;/h3>
&lt;p>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint4 type&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.eui4&lt;/code>&lt;/p>
&lt;h3 id="encrypteduint8type">EncryptedUInt8Type&lt;/h3>
&lt;p>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint8 type&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.eui8&lt;/code>&lt;/p>
&lt;h3 id="encrypteduint10type">EncryptedUInt10Type&lt;/h3>
&lt;p>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint10 type&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.eui10&lt;/code>&lt;/p>
&lt;h3 id="encrypteduint12type">EncryptedUInt12Type&lt;/h3>
&lt;p>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint12 type&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.eui12&lt;/code>&lt;/p>
&lt;h3 id="encrypteduint14type">EncryptedUInt14Type&lt;/h3>
&lt;p>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint14 type&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.eui14&lt;/code>&lt;/p>
&lt;h3 id="encrypteduint16type">EncryptedUInt16Type&lt;/h3>
&lt;p>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint16 type&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.eui16&lt;/code>&lt;/p>
&lt;h3 id="encrypteduint32type">EncryptedUInt32Type&lt;/h3>
&lt;p>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint32 type&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.eui32&lt;/code>&lt;/p>
&lt;h3 id="encrypteduint64type">EncryptedUInt64Type&lt;/h3>
&lt;p>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint64 type&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.eui64&lt;/code>&lt;/p>
&lt;h3 id="encrypteduint128type">EncryptedUInt128Type&lt;/h3>
&lt;p>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint128 type&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.eui128&lt;/code>&lt;/p>
&lt;h3 id="encrypteduint256type">EncryptedUInt256Type&lt;/h3>
&lt;p>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint256 type&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.eui256&lt;/code>&lt;/p>
&lt;h3 id="lookuptabletype">LookupTableType&lt;/h3>
&lt;p>A univariate lookup table used for programmable bootstrapping.&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.lookup_table&lt;/code>&lt;/p>
&lt;h3 id="serverkeytype">ServerKeyType&lt;/h3>
&lt;p>The server key required to perform homomorphic operations.&lt;/p>
&lt;p>Syntax: &lt;code>!tfhe_rust.server_key&lt;/code>&lt;/p>
&lt;h2 id="tfherust-ops">TfheRust ops&lt;/h2>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="tfhe_rustadd-heirtfhe_rustaddop">&lt;code>tfhe_rust.add&lt;/code> (heir::tfhe_rust::AddOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `tfhe_rust.add` operands attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>serverKey&lt;/code>&lt;/td>
&lt;td>The server key required to perform homomorphic operations.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>lhs&lt;/code>&lt;/td>
&lt;td>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint2 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint3 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint4 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint8 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint10 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint12 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint14 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint16 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint32 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint64 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint128 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint256 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt8 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt16 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt32 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt64 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt128 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt256 type&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>rhs&lt;/code>&lt;/td>
&lt;td>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint2 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint3 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint4 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint8 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint10 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint12 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint14 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint16 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint32 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint64 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint128 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint256 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt8 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt16 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt32 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt64 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt128 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt256 type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint2 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint3 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint4 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint8 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint10 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint12 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint14 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint16 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint32 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint64 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint128 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint256 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt8 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt16 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt32 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt64 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt128 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt256 type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="tfhe_rustapply_lookup_table-heirtfhe_rustapplylookuptableop">&lt;code>tfhe_rust.apply_lookup_table&lt;/code> (heir::tfhe_rust::ApplyLookupTableOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `tfhe_rust.apply_lookup_table` operands attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-1">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>serverKey&lt;/code>&lt;/td>
&lt;td>The server key required to perform homomorphic operations.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>input&lt;/code>&lt;/td>
&lt;td>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint2 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint3 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint4 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint8 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint10 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint12 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint14 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint16 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint32 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint64 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint128 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint256 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt8 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt16 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt32 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt64 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt128 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt256 type&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>lookupTable&lt;/code>&lt;/td>
&lt;td>A univariate lookup table used for programmable bootstrapping.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-1">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint2 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint3 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint4 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint8 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint10 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint12 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint14 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint16 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint32 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint64 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint128 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint256 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt8 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt16 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt32 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt64 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt128 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt256 type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="tfhe_rustbitand-heirtfhe_rustbitandop">&lt;code>tfhe_rust.bitand&lt;/code> (heir::tfhe_rust::BitAndOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `tfhe_rust.bitand` operands attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-2">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>serverKey&lt;/code>&lt;/td>
&lt;td>The boolean server key required to perform homomorphic operations.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>lhs&lt;/code>&lt;/td>
&lt;td>An encrypted Boolean corresponding to tfhe-rs&amp;rsquo;s FHEBool type&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>rhs&lt;/code>&lt;/td>
&lt;td>An encrypted Boolean corresponding to tfhe-rs&amp;rsquo;s FHEBool type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-2">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>An encrypted Boolean corresponding to tfhe-rs&amp;rsquo;s FHEBool type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="tfhe_rustcreate_bool_trivial-heirtfhe_rustcreatetrivialboolop">&lt;code>tfhe_rust.create_bool_trivial&lt;/code> (heir::tfhe_rust::CreateTrivialBoolOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `tfhe_rust.create_bool_trivial` operands attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-3">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>boolserverKey&lt;/code>&lt;/td>
&lt;td>The boolean server key required to perform homomorphic operations.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>value&lt;/code>&lt;/td>
&lt;td>1-bit signless integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-3">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>An encrypted Boolean corresponding to tfhe-rs&amp;rsquo;s FHEBool type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="tfhe_rustcreate_trivial-heirtfhe_rustcreatetrivialop">&lt;code>tfhe_rust.create_trivial&lt;/code> (heir::tfhe_rust::CreateTrivialOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `tfhe_rust.create_trivial` operands attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-4">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>serverKey&lt;/code>&lt;/td>
&lt;td>The server key required to perform homomorphic operations.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>value&lt;/code>&lt;/td>
&lt;td>integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-4">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint2 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint3 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint4 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint8 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint10 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint12 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint14 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint16 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint32 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint64 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint128 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint256 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt8 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt16 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt32 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt64 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt128 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt256 type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="tfhe_rustgenerate_lookup_table-heirtfhe_rustgeneratelookuptableop">&lt;code>tfhe_rust.generate_lookup_table&lt;/code> (heir::tfhe_rust::GenerateLookupTableOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `tfhe_rust.generate_lookup_table` operands attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="attributes">Attributes:&lt;/h4>
&lt;table>
&lt;tr>&lt;th>Attribute&lt;/th>&lt;th>MLIR Type&lt;/th>&lt;th>Description&lt;/th>&lt;/tr>
&lt;tr>&lt;td>&lt;code>truthTable&lt;/code>&lt;/td>&lt;td>::mlir::IntegerAttr&lt;/td>&lt;td>An Attribute containing a integer value&lt;/td>&lt;/tr>
&lt;/table>
&lt;h4 id="operands-5">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>serverKey&lt;/code>&lt;/td>
&lt;td>The server key required to perform homomorphic operations.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-5">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>lookupTable&lt;/code>&lt;/td>
&lt;td>A univariate lookup table used for programmable bootstrapping.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="tfhe_rustscalar_left_shift-heirtfhe_rustscalarleftshiftop">&lt;code>tfhe_rust.scalar_left_shift&lt;/code> (heir::tfhe_rust::ScalarLeftShiftOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `tfhe_rust.scalar_left_shift` operands attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-6">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>serverKey&lt;/code>&lt;/td>
&lt;td>The server key required to perform homomorphic operations.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>ciphertext&lt;/code>&lt;/td>
&lt;td>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint2 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint3 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint4 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint8 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint10 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint12 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint14 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint16 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint32 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint64 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint128 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint256 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt8 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt16 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt32 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt64 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt128 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt256 type&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>shiftAmount&lt;/code>&lt;/td>
&lt;td>8-bit integer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-6">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint2 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint3 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint4 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint8 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint10 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint12 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint14 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint16 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint32 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint64 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint128 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint256 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt8 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt16 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt32 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt64 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt128 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt256 type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="tfhe_rustsub-heirtfhe_rustsubop">&lt;code>tfhe_rust.sub&lt;/code> (heir::tfhe_rust::SubOp)&lt;/h3>
&lt;p>Syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>operation ::= `tfhe_rust.sub` operands attr-dict `:` `(` type(operands) `)` `-&amp;gt;` type(results)
&lt;/code>&lt;/pre>&lt;p>Traits: AlwaysSpeculatableImplTrait&lt;/p>
&lt;p>Interfaces: ConditionallySpeculatable, InferTypeOpInterface, NoMemoryEffect (MemoryEffectOpInterface)&lt;/p>
&lt;p>Effects: MemoryEffects::Effect{}&lt;/p>
&lt;h4 id="operands-7">Operands:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Operand&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>serverKey&lt;/code>&lt;/td>
&lt;td>The server key required to perform homomorphic operations.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>lhs&lt;/code>&lt;/td>
&lt;td>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint2 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint3 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint4 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint8 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint10 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint12 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint14 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint16 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint32 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint64 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint128 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint256 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt8 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt16 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt32 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt64 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt128 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt256 type&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>rhs&lt;/code>&lt;/td>
&lt;td>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint2 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint3 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint4 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint8 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint10 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint12 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint14 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint16 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint32 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint64 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint128 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint256 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt8 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt16 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt32 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt64 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt128 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt256 type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="results-7">Results:&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Result&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>output&lt;/code>&lt;/td>
&lt;td>An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint2 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint3 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint4 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint8 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint10 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint12 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint14 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint16 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint32 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint64 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint128 type or An encrypted unsigned integer corresponding to tfhe-rs&amp;rsquo;s FHEUint256 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt8 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt16 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt32 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt64 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt128 type or An encrypted signed integer corresponding to tfhe-rs&amp;rsquo;s FHEInt256 type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: YosysOptimizerPasses</title><link>https://heir.dev/docs/passes/yosysoptimizerpasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heir.dev/docs/passes/yosysoptimizerpasses/</guid><description>
&lt;!-- Autogenerated by mlir-tblgen; don't manually edit -->
&lt;h3 id="-yosys-optimizer">&lt;code>-yosys-optimizer&lt;/code>&lt;/h3>
&lt;p>&lt;em>Invoke Yosys to perform circuit optimization.&lt;/em>&lt;/p>
&lt;p>This pass invokes Yosys to convert an arithmetic circuit to an optimized
boolean circuit that uses the arith and comb dialects.&lt;/p>
&lt;p>Note that booleanization changes the function signature: multi-bit integers
are transformed to a tensor of booleans, for example, an &lt;code>i8&lt;/code> is converted
to &lt;code>tensor&amp;lt;8xi1&amp;gt;&lt;/code>.&lt;/p></description></item></channel></rss>